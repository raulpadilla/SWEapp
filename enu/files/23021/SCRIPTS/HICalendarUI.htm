<HTML>
   <BODY id="theBody" SCROLL="auto" LEFTMARGIN="0" TOPMARGIN="0" RIGHTMARGIN="0" DIR="ltr">
      <link ID="linkCSS"></link>
      <STYLE type="text/css">
         .tier3Off A, .tier3Off A:visited, .tier3Off A:hover {border-color:#ccccff #333399 #ccccff #ccccff;}  
      </STYLE>
      <table ID="tbBar" ALIGN="center" WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
         <tr id="idTabRow">
            <td id="idTabRowData" align="left">
               <table CLASS="tier3back" ID="datetabs" BORDER="0" CELLPADDING="0" CELLSPACING="0">
                  <tr>
                     <td ID="0Mtd" STYLE="visibility:hidden;display:none" NOWRAP CLASS="tier3Off" style="cursor:hand"><A ID="daily"></A></td>
                     <td ID="1Mtd" STYLE="visibility:hidden;display:none" NOWRAP CLASS="tier3Off" style="cursor:hand"><A ID="weekly"></A></td>
                     <td ID="2Mtd" STYLE="visibility:hidden;display:none" NOWRAP CLASS="tier3Off" style="cursor:hand"><A ID="monthly"></A></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td id="tdCalCtrls" STYLE="background-color:#FFFFFF;width:100%">
               <table id="tbControls">
                  <tr>
                     <td id="newButton" align="center"></td>
                     <td id="todayButton" align="center"></td>
                     <td id="printButton" align="center"></td>
                     <td STYLE="position:relative;left:5" ID="spacer1" STYLE="display:none" NOWRAP><SPAN CLASS="divider"><img id="spacerImg1" SRC="images/spacer.gif" ALIGN="absmiddle" WIDTH="1" HEIGHT="18"></SPAN></td>
                     <td STYLE="position:relative;left:5" ID="navigateBack"></td>
                     <td STYLE="position:relative;left:5" ID="displayDate" NOWRAP></td>
                     <td STYLE="position:relative;left:5" ID="navigateForward"></td>
                     <td STYLE="position:relative;left:5" ID="spacer2" STYLE="display:none" NOWRAP><SPAN CLASS="divider"><img id="spacerImg2" SRC="images/spacer.gif" ALIGN="absmiddle" WIDTH="1" HEIGHT="18"></SPAN>&nbsp;&nbsp;</td>
                     <td STYLE="position:relative;left:5;visibility:hidden" NOWRAP ID="AccessLabel"></td>
                     <td STYLE="position:relative;left:5;visibility:hidden" ALIGN="absmiddle" NOWRAP ID="accessContainer"></td>
                     <td STYLE="position:relative;left:5" ID="SPLabel1">&nbsp;</td>
                     <td STYLE="position:relative;left:5" NOWRAP ID="TimeZoneLabel"></td>
                     <td STYLE="position:relative;left:5" ID="timezonePicker"></td>
                     <td STYLE="position:relative;left:5" ID="SPLabel2">&nbsp;</td>
                     <td STYLE="position:relative;left:5" NOWRAP ID="FilterLabel"></td>
                     <td STYLE="position:relative;left:5" ID="filterPicker"></td>
                  </tr>
               </table>
               <SCRIPT>
                  // allows specialized class to pass in HTML code for other buttons
                  var stemp = window.external.GetAppletUserProp ("HIC_BUTTON_HTML");
                  if (stemp != "")
                  {
                     document.writeln(stemp);
                  }
               </SCRIPT>
            </td>
         </tr>
      </table>
      <table ID="tbCal" ALIGN="center" WIDTH="100%" BORDER="0" CELLPADDING="0" CELLSPACING="0">
         <tr>
            <td ID="tdMain"><table ID="tbMainH" ALIGN="left" CELLPADDING="0" CELLSPACING="1" BORDER="0" HEIGHT="100%" WIDTH="100%" BGCOLOR="gray">
               </table>
            </td>
            <td ID="tdMini"><DIV ID="dvMiniCal"></DIV>
            </td>
         </tr>
      </table>
      <!-- class_jssapplethicalendar.js -->
      <SCRIPT id="CalendarScript" language="javascript">
      
// TODO: Use individual global variable instead of a variable array
var JGC_ATTR_MAXLENGTH                       = 15;
var JGC_ATTR_PICKONLY                        = 32;
var LOCAL_TIME_NOSEC_FORMAT                  = 5;
var LOCAL_LONG_DATE_FORMAT                   = 19;
var CALJS_ACCESSLIST                         = 1; 
var CALJS_TIMEZONE                           = 2;
var CALJS_DATE                               = 3;
var CALJS_FILTER                             = 4;                          

var g_bCfgNoInsert                           = false;       // Permission based on configuration
var g_bCfgNoUpdate                           = false;       // Permission based on configuration
var g_bNoInsert                              = false;       // Runtime permission
var g_bNoUpdate                              = false;       // Runtime permission
var g_bEnableDailyTab                        = false;
var g_bEnableWeeklyTab                       = false;
var g_bEnableMonthlyTab                      = false;
// Access list
var g_bEnableAccessList                      = false;
var g_oAccessListObject                      = null;
var g_aAccessListLogin2Display               = new Array ();
var g_aAccessListDisplay2Login               = new Array ();
var g_aTimeZoneListName2Display              = new Array (); // 12551879
var g_aTimeZoneListDisplay2Name              = new Array (); // 12551879
var g_aUpdateListLogin                       = null;
var g_sSelectedUser                          = "";
var g_sDefaultUser                           = "";
// Time Zone
var g_bEnableTimeZone                        = false;
var g_sSelectedTimeZone                      = "";
var g_oTimeZonePicker                        = null;
// Date picker
var g_bEnableDatePicker                      = true;
var g_oDatePicker                            = null;
// Filter
var g_bEnableFilterPicker                    = false;
var g_sSelectedFilter                        = "";
var g_sPageBaseUrl                           = "";
var g_sUpdateFilterList                      = "";
var g_bEnableNewButton                       = false;
var g_bEnableTodayButton                     = false;
var g_bEnablePrintButton                     = false;
var g_nWeeklyMode                            = 0;
var g_aFieldName2Index                       = null;
// Locale
var g_oLocale                                = null;
var g_sDispTimeAM                            = null;   // Display string for AM
var g_sDispTimePM                            = null;   // Display string for PM
var g_sDispTimeSeparator                     = null;   // Display string for time separator
var g_sDispTimeFormat			     = null;   // Display format for time string
// The document
var g_oTargetDocument                        = null;
var g_oAppTopDocument                        = null;
var g_bRTLWindow                             = false;
var g_sLoginUserLoginName                    = "";
var g_sLoginUserDisplayName                  = "";
var g_sDefaultTab                            = "";
// Calendar state
var g_bStretchCell                           = false;

// Constants
var g_aMonthStringArray                      = null;  // Strings for Sunday to Saturday
var g_aWeekDaysStringArray                   = null;  // Strings for Jan to Dec
var g_nMinutesInDay                          = 1440;  // How many minutes in a day (constant)
var g_nScrollBarWidth                        = 17;    // Width of the vertical scroll bar (constant)
var g_aTimeSlotLabels                        = new Array ();   // Display text for time slots

var g_nMultiDayDisplayRows                   = 5;     // Number of multi-day rows displayed (constant)
var g_nMultiDayRows                          = 0;     // Number of multi-day rows
var g_nTimeSlotWidth                         = 64;    // width of the time slot column on Daily
var g_nMonthlyColumns                        = 6;     // Number of columns for monthly calendar
var g_nHeaderLabelHeight                     = 25;    // Height of the header row in 5 day weekly/monthly calendar
var g_nCellHeaderHeight                      = 20;    // Height of the cell header

// SWE drag and drop vars
var g_bIsDragItemFromSWE                     = false;
var g_sSWEAppletName                         = "";    // hold name of source applet
var g_sSWERowIds                             = "";    // hold the row ids of the source drag objects

var g_oEarlyIndicator                        = null;  // Early indicator arrow (upper arraw of size 12 X 11)
var g_oLateIndicator                         = null;  // Late indicator arrow

var g_bUse5DayCache                          = true;  // Cache 5 day slot layout
var g_nRows                                  = -1;
var g_nCols                                  = -1;
var g_nCells                                 = -1;    // Number of cells (1 for slot views)
var g_aDateCellMap                           = null;

var g_nSelectedDay                           = -1;
var g_nCurrentTab                            = -1;    // Currently highlighted tab
var g_aPrivateItems                          = null;  // Array holds ids of private records

// Inline editing
var g_aId2UpdateField                        = null;
var g_oInput                                 = null;  // TextArea object for inline editing
var g_sOldInnerText                          = "";    // Text of the record currently edited
var g_sOldInnerHTML                          = "";    // Inner HTML of the element to be edited, added, dragged, etc.
var g_nItemType                              = 0;     // Type of the record to be dragged, editted, stretched, etc.
// Dialog for modifying repeat record
var g_sRepPopupStartTitle                    = "";
var g_sRepPopupLabel1                        = "";
var g_sRepPopupLabel2                        = "";
var g_sRepPopupLabel3                        = "";
var g_sRepPopupLabel4                        = "";
var g_sRepPopupCancelLabel                   = "";
var g_sRepPopupOKLabel                       = "";
var g_oRepPopupWindow                        = null;
var g_oRepPropSet                            = null;

// Private Label
var g_sPrivateLabel                          = "";
var g_printON                                = 0;     // ACR 435 Calendar Printing - Flag to know whether priting is ON
var isPrinting                               = false; // ACR 435 Calendar Printing - This flag will be used  because in Monthly Print
                                                      // we want to change the width back to original


var _aHICGlobal = new Array ();

var g_bExternalWriteAvailable                = false;  // Funtion SWEWriteInnerHTML available

_aHICGlobal["HIC_DraggingItem"]              = false;
_aHICGlobal["HIC_nTopClientCo"]              = 0;
_aHICGlobal["HIC_nBottomClientCo"]           = 0;
_aHICGlobal["HIC_DraggingStretchItemUp"]     = false;
_aHICGlobal["HIC_DraggingStretchItemDown"]   = false;
_aHICGlobal["HIC_idStretchStart"]            = "";
_aHICGlobal["HIC_idHightlightElement"]       = null;
_aHICGlobal["HIC_idHightlightElementBgColor"]= null;
_aHICGlobal["HIC_nRowStart"]                 = 0;
_aHICGlobal["HIC_nRowEnd"]                   = 0;
_aHICGlobal["HIC_SchedSelection"]            = false;
_aHICGlobal["HIC_nStartBusDayRow"]           = 0;
_aHICGlobal["HIC_nSlotSize"]                 = 0;
_aHICGlobal["HIC_nStartBusDayPos"]           = null;
_aHICGlobal["HIC_StartStretchY"]             = 0;
_aHICGlobal["HIC_StartStretchCellHeight"]    = 0;
_aHICGlobal["HIC_MaxStretchY"]               = 0;
_aHICGlobal["HIC_nTimeSlotStretch"]          = 0;
_aHICGlobal["HIC_LastScrollTop"]             = -1;
_aHICGlobal["HIC_LastOuterScrollTop"]        = -1;
_aHICGlobal["HIC_LastCellDrop"]              = null;
_aHICGlobal["HIC_DraggedStartItem"]          = null;
_aHICGlobal["HIC_oIndicator"]                = null;
_aHICGlobal["HIC_SchedDrag"]                 = null;
_aHICGlobal["HIC_SchedDragStartRow"]         = -1;
_aHICGlobal["HIC_SchedDragStartSlot"]        = -1;
_aHICGlobal["HIC_SchedDragLastRow"]          = -1;
_aHICGlobal["HIC_SchedDragLastSlot"]         = -1;
_aHICGlobal["HIC_cDisabled"]                 = false;
_aHICGlobal["HIC_cMode"]                     = 0;
_aHICGlobal["HIC_dtStart"]                   = null;
_aHICGlobal["HIC_dtEnd"]                     = null;
_aHICGlobal["HIC_aUsers"]                    = new Array ();
_aHICGlobal["HIC_oDragIndicator"]            = null;
_aHICGlobal["HIC_oTableBack"]                = null;
_aHICGlobal["HIC_aReserved"]                 = new Array ();
_aHICGlobal["HIC_aSlotWidths"]               = null;
_aHICGlobal["HIC_aHighlight"]                = null;
_aHICGlobal["HIC_aTopTables"]                = null;
_aHICGlobal["HIC_aBlankCells"]               = null;
_aHICGlobal["HIC_aDataDivs"]                 = null;
_aHICGlobal["HIC_aCellDivs"]                 = null;
_aHICGlobal["HIC_aCells"]                    = null;
_aHICGlobal["HIC_aHeaderDivs"]               = null;
_aHICGlobal["HIC_aTimeCells"]                = null;
_aHICGlobal["HIC_aAppointment"]              = null;
_aHICGlobal["HIC_LastFocusItem"]             = null; 
_aHICGlobal["HIC_OldInnerDivWidth"]          = 0
_aHICGlobal["HIC_FirstTDtoScroll"]           = null;
_aHICGlobal["HIC_5DayBlankHTMLCache_current"]= "";
_aHICGlobal["HIC_5DayArrayCell_current"]     = new Array ();
_aHICGlobal["HIC_5DayBlankHTMLCache_master"] = "";
_aHICGlobal["HIC_5DayBlankHTMLCellPtrs"]     = null;
_aHICGlobal["HIC_CurrDvInfoHTML"]            = "";
_aHICGlobal["HIC_SkipTimeScroll"]            = "0";
_aHICGlobal["HIC_b5DayTimeSlot_Click"]       = false;
_aHICGlobal["HIC_nDoResize"]                 = 0;
_aHICGlobal["HIC_nMaxDragY"]                 = 0;
_aHICGlobal["HIC_bStretchCellElementScrollIntoView"] = null;

var SCHED_PARAMS                             = new _Schedule ();
var g_oPropset                               = null;
var g_bSkipPopulate                          = false;
var g_bNeedReload                            = true;

var regExpSetClientPageURL = new RegExp("SET_CLIENT_BASE_URL", "g");
// Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
_aHICGlobal["HIC_DraggingActivityBoundary"]  = false;

function __parseBorderWidth(width) {
    var res = 0;
    if (typeof(width) == "string" && width != null && width != "" ) {
        var p = width.indexOf("px");
        if (p >= 0) {
            res = parseInt(width.substring(0, p));
        }
        else {
             //do not know how to calculate other values 
        //(such as 0.5em or 0.1cm) correctly now
            //so just set the width to 1 pixel
            res = 1; 
        }
    }
    return res;
}

//returns border width for some element
function __getBorderWidth(element) {
    var res = {};
    res.left = __parseBorderWidth(element.style.borderLeftWidth);
    res.top = __parseBorderWidth(element.style.borderTopWidth);
    res.right = __parseBorderWidth(element.style.borderRightWidth);
    res.bottom = __parseBorderWidth(element.style.borderBottomWidth);
   
    return res;
}

//returns the absolute position of some element within document
function getElementAbsolutePos(element) {
    var res = {};
    res.x = 0; res.y = 0;
    if (element !== null) { 
        if (element.getBoundingClientRect) {
            var viewportElement = document.documentElement;  
            var box = element.getBoundingClientRect();
            var scrollLeft = viewportElement.scrollLeft;
            var scrollTop = viewportElement.scrollTop;

            res.x = box.left + scrollLeft;
            res.y = box.top + scrollTop;
        }
    }
    return res;
}


var DragHandler = 
{
   _oElem : null,
   dX : 0,
   dY : 0,
   type : "",    
   td_id : "",
   sSatrtTime : "",

   // Attach drag handler to an element
   attach : function(oElem, input_type, input_td_id) 
   {
      oElem.onmousedown = DragHandler._dragBegin;
      type = input_type;
      td_id = input_td_id;
      return oElem;
   },


   // Begin drag process
   _dragBegin : function(e)
   {
      var oElem = DragHandler._oElem = this;
      
      _aHICGlobal["HIC_DraggingActivityBoundary"] = true;

      if (isNaN(parseInt(oElem.style.left))) { oElem.style.left = '0px'; }
      if (isNaN(parseInt(oElem.style.top))) { oElem.style.top = '0px'; }

      var x = parseInt(oElem.style.left);
      var y = parseInt(oElem.style.top);

      e = e ? e : window.event;
      oElem.mouseX = e.clientX;
      oElem.mouseY = e.clientY;
      
      var oStartCell = GetElement(e.srcElement, td_id);
      sSatrtTime = oStartCell.time;
      
      dX = 0;
      dY = 0;
      
      oElem.onmousemove = DragHandler._drag;
      oElem.onmouseup = DragHandler._dragEnd;
      
      // Make a new div that is placed on top of the event
      oModalEventDiv = g_oTargetDocument.createElement("<DIV STYLE='visibility:visible;overflow:hidden;background-Color:white;position:absolute;border:1px solid #6666cc' >");
      g_oTargetDocument.body.appendChild(oModalEventDiv);
      
      var oParentTable = oElem.parentElement.parentElement.parentElement.parentElement.parentElement;
      var oParentDiv = oParentTable.parentElement;
      
      // Hide the original event
      oParentTable.style.visibility = "hidden";
      
      // Set the background color so transition is smoother
      if ((oParentDiv.rowNumber >= getStartBusDay() * 60 / SCHED_PARAMS.slotTimeInterval) && (oParentDiv.rowNumber < getEndBusDay() * 60 / SCHED_PARAMS.slotTimeInterval))
      {
         oParentDiv.style.backgroundColor = SCHED_PARAMS.HUE_BUS_HRS;
      }
      else
      {
         oParentDiv.style.backgroundColor = SCHED_PARAMS.HUE_NON_BUS_HRS;
      }
	  oParentDiv.style.border = "1px solid #DCDCDC";
      
      // Update the modal div to have the same properties as the element it is copying
      oModalEventDiv.innerHTML = oParentTable.innerHTML;      
      oModalEventDiv.style.pixelLeft = getElementAbsolutePos(oParentTable).x;
      oModalEventDiv.style.pixelTop = getElementAbsolutePos(oParentTable).y;
      oModalEventDiv.style.pixelWidth = oParentTable.clientWidth;
      oModalEventDiv.style.pixelHeight = oParentTable.clientHeight;
      return false;
    },


   // Drag element
   _drag : function(e)
   {
      var oElem = DragHandler._oElem;

      var x = parseInt(oElem.style.left);
      var y = parseInt(oElem.style.top);
      
      var oParentTable = oElem.parentElement.parentElement.parentElement.parentElement.parentElement;

      e = e ? e : window.event;
      oElem.style.left = x + (e.clientX - oElem.mouseX) + 'px';
      oElem.style.top = y + (e.clientY - oElem.mouseY) + 'px';
      
      if (oModalEventDiv)
      {
         oModalEventDiv.style.backgroundColor =  "white";
         var nHeight = parseInt(oModalEventDiv.style.height) - (e.clientY - oElem.mouseY);
         var nTop = g_oTargetDocument.body.scrollTop + e.clientY;
         var nSlotSize = 18;  // Size of one slot
         if (oElem.id == 'imgUp')
         {
             // Dragging from top calculations
             if(nHeight <= nSlotSize ||
               nTop >= (getElementAbsolutePos(oParentTable).y + oParentTable.clientHeight - nSlotSize))
            {
               nHeight = nSlotSize;
               nTop = (getElementAbsolutePos(oParentTable).y + oParentTable.clientHeight - nSlotSize);
            }
            oModalEventDiv.style.pixelHeight = nHeight;
            oModalEventDiv.style.pixelTop = nTop;
         } else if (oElem.id == 'imgDown')
         {
            // Dragging from bottom calculations
            nHeight = parseInt(oModalEventDiv.style.height) + (e.clientY - oElem.mouseY);
             if(nHeight <= nSlotSize ||
               nTop <= (getElementAbsolutePos(oParentTable).y + nSlotSize))
            {
               nHeight = nSlotSize;
            }
            oModalEventDiv.style.pixelHeight = nHeight;
         }
      }
      
      dX = dX + (e.clientX - oElem.mouseX);
      dY = dY + (e.clientY - oElem.mouseY);

      oElem.mouseX = e.clientX;
      oElem.mouseY = e.clientY;

      return false;
    },


   // Stop drag process
   _dragEnd : function()
   {
      var oElem = DragHandler._oElem;

      var x = parseInt(oElem.style.left);
      var y = parseInt(oElem.style.top);
      
      _aHICGlobal["HIC_DraggingActivityBoundary"] = false;
      
	  var oParentTable = oElem.parentElement.parentElement.parentElement.parentElement.parentElement;      
	  var oParentDiv = oParentTable.parentElement;
      // Reshow the original event
      oParentTable.style.visibility = "visible";
	  oParentDiv.style.backgroundColor = "white";
	  
      // Clean up created objects      
      g_oTargetDocument.body.removeChild(oModalEventDiv);
      oModalEventDiv = null;
      
      DragBoundaryEnd(oElem, sSatrtTime, dY);

      oElem.onmousemove = null;
      oElem.onmouseup = null;      
      DragHandler._oElem = null;
    }
}
// End of Fix Bug 12613474

//========================================================================================================
// g_bSkipPopulate is introduced for a customer request where a list applet is put on the same view
// to display the calendar in list format. When the end user moves from record to record and page
// to page, it trigers DoPopulate which is not necessary for the calendar applet as all the records 
// have already been displayed. It is set to true in NotifyGeneric for type "SWEIRowSelection" and 
// "HIScrollData"
//========================================================================================================

//========================================================================================================

//========================================================================================================
//
// Called by the wrapper control
//
//========================================================================================================
function DoInitialize ()
{
   var sValue;
   
   g_oAppTopDocument       = window.external.GetAppTopDocument ();
   g_oTargetDocument       = document;
   g_oLocale               = window.external.GetLocale ();
   g_sSelectedTimeZone     = g_oLocale.GetTimeZoneName ();
   g_sLoginUserLoginName   = GetUserProp ("User Login Name");
   _aHICGlobal["HIC_aUsers"][0] = new user("guid", "gtang");
   //create input time format for current locale
   if (g_sDispTimeSeparator == null)
   {
       g_sDispTimeSeparator = g_oLocale.GetDispTimeSeparator ();
       if (g_sDispTimeSeparator == null || g_sDispTimeSeparator == "")
          g_sDispTimeSeparator = ":";
   }
   g_sDispTimeFormat = "h"+g_sDispTimeSeparator+"mm p";

   //base Page URL is no longer taken from a userproperty
   g_sPageBaseUrl          = window.external.GetPageBaseURL() + "/";
   
   g_bCfgNoInsert          = (GetUserProp ("No Insert") == "Y");
   g_bNoInsert             = g_bCfgNoInsert;
   g_bCfgNoUpdate          = (GetUserProp ("No Update") == "Y");
   g_bNoUpdate             = g_bCfgNoUpdate;
   g_bEnableAccessList     = (GetUserProp ("Enable Owner Picker") == "Y");
   g_sDefaultUser          = GetUserProp ("Default User");
   g_bEnableDatePicker     = (GetUserProp ("Enable Date Picker") == "Y");
   g_bEnableTimeZone       = (GetUserProp ("Enable Timezone Picker") == "Y");
   g_bEnableFilterPicker   = (GetUserProp ("Enable Filter Picker") == "Y");
   g_bEnableDailyTab       = (GetUserProp ("Enable Daily") == "Y");
   g_bEnableWeeklyTab      = (GetUserProp ("Enable Weekly") == "Y");
   g_bEnableMonthlyTab     = (GetUserProp ("Enable Monthly") == "Y");
   g_bEnableNewButton      = (GetUserProp ("Enable New Button") == "Y");
   g_bEnableTodayButton    = (GetUserProp ("Enable Today Button") == "Y");
   g_bEnablePrintButton    = (GetUserProp ("Enable Print Button") == "Y");   

   // If there is only one tab, render no tabs
   if ((g_bEnableDailyTab == false && g_bEnableWeeklyTab == false) ||
       (g_bEnableDailyTab == false && g_bEnableMonthlyTab == false) ||
       (g_bEnableWeeklyTab == false && g_bEnableMonthlyTab == false))
   {
      g_bEnableDailyTab = false;
      g_bEnableWeeklyTab = false;
      g_bEnableMonthlyTab = false;
   }
      
   // Get slot interval
   sValue = GetUserProp ("Preferred Timeslot Interval");
   if (sValue != "")
      SCHED_PARAMS.slotTimeInterval = parseInt(sValue, 10);
   else
      SCHED_PARAMS.slotTimeInterval = 30;
   
   // Get first day of week (defaulted to 1 in the constructor, i.e., Monday)
   sValue = GetUserProp ("First Day of Week");
   if (sValue != "")
   {
      SCHED_PARAMS.firstDay = parseInt(sValue, 10);
      if (SCHED_PARAMS.firstDay < 0 || SCHED_PARAMS.firstDay > 6)
         SCHED_PARAMS.firstDay = 1;
   }
   
   // Get number of columns in monthly calendar
   sValue = GetUserProp ("Monthly Calendar Columns");
   if (sValue != "")
   {
      g_nMonthlyColumns = parseInt(sValue, 10);
      if (g_nMonthlyColumns != 6 && g_nMonthlyColumns != 7)
         g_nMonthlyColumns = 6;
   }
   
   // Get the width of the time slot
   sValue = GetUserProp ("Time Slot Width");
   if (sValue != "")
      g_nTimeSlotWidth = parseInt(sValue, 10);
   
   // Default time zone (can be empty)
   sValue = GetUserProp ("Default Timezone");
   if (sValue != "")
      g_sSelectedTimeZone = sValue;
   
   // Default calendar type
   g_sDefaultTab = GetUserProp ("Default Calendar Mode");
   if (g_sDefaultTab == "")
      g_sDefaultTab = "Daily";
   
   if (g_sDefaultTab == "Daily")
      SCHED_PARAMS.viewMode = 0;
   else if (g_sDefaultTab == "Weekly")
      SCHED_PARAMS.viewMode = 1;
   else
      SCHED_PARAMS.viewMode = 2;
      
   if (GetUserProp ("Preferred Weekly Mode") == "5 Day Weekly")
      g_nWeeklyMode = 1;
   else
      g_nWeeklyMode = 0;
   
   // Default selected day
   sValue = GetUserProp ("Default Selected Day");
   if (sValue != "")
   {
      SCHED_PARAMS.selectedDay = new Date (sValue);

	  
      // CR# 12-1THO6TP: Specific workaround fix for countries that set their DST changes at 12:00AM
      // If selected day has 23:00, push it to next day.
      var tempDateString = new String(SCHED_PARAMS.selectedDay);
   
      if (tempDateString.indexOf('23:00:00') != -1 
          && (tempDateString.indexOf('UTC-200') != -1 || tempDateString.indexOf('UTC-0200') != -1 ||                             // Only Brazil UTC -2/-3 as of now
              tempDateString.indexOf('UTC-300') != -1 || tempDateString.indexOf('UTC-0300') != -1))
      {
         SCHED_PARAMS.selectedDay = new Date(SCHED_PARAMS.selectedDay.getFullYear(), SCHED_PARAMS.selectedDay.getMonth(), SCHED_PARAMS.selectedDay.getDate() + 1);    // Make the required adjustments
         SCHED_PARAMS.selectedDay.setTime(SCHED_PARAMS.selectedDay.getTime() + 3600000);
      }               
   }
   
   // To Do: RKUO Modify after SWE add IsInRTLMode API
   //if (g_bRTLWindow == null)
   //   g_bRTLWindow = top._swe._sweapp.S_App.IsInRTLMode();
   g_bRTLWindow = (GetUserProp ("RTL Mode") == "Y");
   
   // Cache UI strings
   g_aMonthStringArray  = new Array (GetUserProp ("UISTR January"), 
                                     GetUserProp ("UISTR February"),
                                     GetUserProp ("UISTR March"),
                                     GetUserProp ("UISTR April"),
                                     GetUserProp ("UISTR May"),
                                     GetUserProp ("UISTR June"),
                                     GetUserProp ("UISTR July"),
                                     GetUserProp ("UISTR August"),
                                     GetUserProp ("UISTR September"),
                                     GetUserProp ("UISTR October"),
                                     GetUserProp ("UISTR November"),
                                     GetUserProp ("UISTR December"));
   
   g_aWeekDaysStringArray    = new Array (GetUserProp ("UISTR Sunday"),
                                          GetUserProp ("UISTR Monday"),
                                          GetUserProp ("UISTR Tuesday"),
                                          GetUserProp ("UISTR Wednesday"),
                                          GetUserProp ("UISTR Thursday"),
                                          GetUserProp ("UISTR Friday"),
                                          GetUserProp ("UISTR Saturday"));

   g_sRepPopupStartTitle  = GetUserProp ("UISTR Repeating Dialog Title");
   g_sRepPopupLabel1      = GetUserProp ("UISTR Repeating Dialog Label 1");
   g_sRepPopupLabel2      = GetUserProp ("UISTR Repeating Dialog Label 2");
   g_sRepPopupLabel3      = GetUserProp ("UISTR Repeating Dialog This Instance");
   g_sRepPopupLabel4      = GetUserProp ("UISTR Repeating Dialog All Future Instances");
   g_sRepPopupCancelLabel = GetUserProp ("UISTR Repeating Dialog Cancel Button");
   g_sRepPopupOKLabel     = GetUserProp ("UISTR Repeating Dialog OK Button");
   
   //Get Private Label
   g_sPrivateLabel        = GetUserProp ("UISTR Display Value For Private Record");

   // Check whether the external function SWEWriteInnerHTML is available
   if (typeof(g_oAppTopDocument.frames('_swe')) != 'undefined' && g_oAppTopDocument.frames('_swe') != null &&
       typeof(g_oAppTopDocument.frames('_swe').top._swescript) != 'undefined' && 
       g_oAppTopDocument.frames('_swe').top._swescript != null &&
       typeof(g_oAppTopDocument.frames('_swe').top._swescript.SWEWriteInnerHTML) != 'undefined' && 
       g_oAppTopDocument.frames('_swe').top._swescript.SWEWriteInnerHTML != null)
   {
      g_bExternalWriteAvailable = true;
   }
   
   LoadElement ();
   
   GetDateRange ();
}


//========================================================================================================
//
// Called by the wrapper control
//
//========================================================================================================
function DoPopulate ()
{
   if (g_bSkipPopulate == false)
   {
      if (g_bNeedReload)
      {
         var pPropset = NewPropertySet();
         
         pPropset.SetProperty ("StartDate",         SCHED_PARAMS.startDate.HICtoDateString("mm/dd/yyyy"));
         pPropset.SetProperty ("EndDate",           SCHED_PARAMS.endDate.HICtoDateString("mm/dd/yyyy"));
         pPropset.SetProperty ("ViewMode",          SCHED_PARAMS.viewMode);
         pPropset.SetProperty ("CurrentDate",       SCHED_PARAMS.selectedDay.HICtoDateString("mm/dd/yyyy"));
         pPropset.SetProperty ("SelectedDate",      SCHED_PARAMS.selectedDay.valueOf());
         pPropset.SetProperty ("StretchCell",       g_bStretchCell ? "Y" : "N");
         pPropset.SetProperty ("ClippingCount",     GetClippingCount ());
         
         if (g_bEnableTimeZone)
            pPropset.SetProperty ("SelectedTimeZone", g_sSelectedTimeZone);
         
         if (g_bEnableAccessList)
            pPropset.SetProperty ("SelectedUser", g_sSelectedUser);
            
         if (g_bEnableFilterPicker)
            pPropset.SetProperty ("SelectedFilter", g_sSelectedFilter);
            
         g_bNeedReload = false;
         InvokeMethod ("GetCalendarData", pPropset);
         g_bNeedReload = true;
      }  
   }
   else
   {
      g_bSkipPopulate = false;
   }
}


//========================================================================================================
//
// Called by the wrapper control
//
//========================================================================================================
function NotifyGeneric (args)
{
   var rtnPropSet = NewPropertySet ();
   rtnPropSet.DecodeFromString (args);
   var type = rtnPropSet.GetType  ();
   
   if (type == "HICalendarData")
   {
      g_oTargetDocument     = document; 
      g_nMultiDayRows        = 0;
      _aHICGlobal["HIC_nDoResize"]          = 0;
      g_aPrivateItems = new Array ();
      
      if (g_oTargetDocument.getElementById("displayDate").innerHTML == "")
         LoadElement ();
      
      g_oPropset = rtnPropSet;

      // Check if need to update filter picker
      var updateFilter = g_oPropset.GetProperty ("Should Update Filter List");
      if (g_bEnableFilterPicker && (updateFilter == "Y"))
      {
         g_sUpdateFilterList = g_oPropset.GetProperty ("Update Filter List");
         UpdateFilterPicker (g_oPropset.GetProperty ("Selected Filter Value"));
      }

      if (g_oPropset.GetProperty ("FromBookMark") == "Y")
         SCHED_PARAMS.viewMode = parseInt(g_oPropset.GetProperty ("ViewMode"), 10);

      if (g_oPropset.GetProperty ("StretchCell") == "Y")
          g_bStretchCell = true;
      else
         g_bStretchCell = false;

      if (g_bEnableAccessList)
         SetSelectedUser (g_oPropset.GetProperty ("SelectedUser"));
      
      if (g_bEnableTimeZone)
         SetSelectedTimeZone (g_oPropset.GetProperty ("SelectedTimeZone"));
         
      if (g_bEnableFilterPicker)
         SetSelectedFilter (g_oPropset.GetProperty ("SelectedFilter"));
         
      var viewMode = g_oPropset.GetProperty ("ViewMode");
      if (viewMode == "0")
         SCHED_PARAMS.viewMode = 0;
      else if (viewMode == "1")
         SCHED_PARAMS.viewMode = 1;
      else if (viewMode == "2")
         SCHED_PARAMS.viewMode = 2;
      
      BuildFieldIndexes (g_oPropset);
            
      ChangeCalendarTab (SCHED_PARAMS.viewMode);
      SCHED_PARAMS.selectedDay = new Date(Number(g_oPropset.GetProperty ("SelectedDate")))
      
      GetDateRange ();
      
      setDatePickerDisplay (SCHED_PARAMS.selectedDay);
      
      UpdateData (1);

      g_oTargetDocument.getElementById("newButton").disabled = g_bNoInsert;
      
      RemoveDragIndicator ();
      ClearDragStretch ();
      ClearFocus ();
   }
   else if (type == "PrintHICCalGrid")
   {
      try
      {
         g_printON = 1;          // ACR 435 Calendar Printing : UpdateData is called twice because while Printing we change the width of the HTML Page
         isPrinting = true;
         g_nMultiDayRows = 0;
         UpdateData (1);
         PrintHICCalGrid ();
         g_printON = 0;	
         UpdateData (1);
         isPrinting = false;
      }
      catch(e)
      {
      }
   }
   else if (type == "ClosePopup")
   {
      RemoveDragIndicator ();
      RestoreBeforeDrag ();
      RestoreInput ();

      ClearDragStretch ();
   }
   else if (type == "SWEIRowSelection")
   {
      g_bSkipPopulate = true;
   }
   else if (type == "HIScrollData")
   {
      g_bSkipPopulate = true;
   }
}


//========================================================================================================
//
// Interface to the ActiveX, the applet, and the server.
//    InvokeMethod      - Invoke server method
//    GetUserProp       - Get the user property of the applet
//    NewPropertySet    - Create a new property set
//
//========================================================================================================
function InvokeMethod (method, inputPropSet)
{
   //fix for bug#14514993-backing out the entire NML(bug# 10593707) fix. 
   return window.external.InvokeAppletMethod (method, inputPropSet);
}

function GetUserProp (sPropName)
{
   var sPropValue = window.external.GetAppletUserProp (sPropName);
   
   if (sPropValue != null && typeof(sPropValue) != "undefined" && sPropValue != "")
      return sPropValue;
      
   return "";   
}

function NewPropertySet ()
{
   return window.external.CreateCOMPropertySet ();
}

function LoadElement ()
{   
   g_oInput = null;
   
   _aHICGlobal["HIC_oIndicator"] = g_oTargetDocument.createElement("<DIV ID=imgIndicator STYLE='background-Color:white;display:none;position:absolute;left:0;top:0;padding:0;z-index:3;border:2px solid #6666cc;overflow:hidden'></DIV>");
   g_oTargetDocument.body.appendChild(_aHICGlobal["HIC_oIndicator"]);
   
   _aHICGlobal["HIC_oDragIndicator"] = g_oTargetDocument.createElement("<DIV STYLE='visibility:hidden;background-Color:white;position:absolute;border:1px solid #6666cc' >");
   g_oTargetDocument.body.appendChild(_aHICGlobal["HIC_oDragIndicator"]);

   _aHICGlobal["HIC_oTableBack"] = g_oTargetDocument.createElement("<DIV STYLE='padding:0px;visibility:hidden;position:absolute;z-index:2'>");
   g_oTargetDocument.body.appendChild(_aHICGlobal["HIC_oTableBack"]);
   g_oTargetDocument.getElementById("tbCal").onmouseup = onSchedMouseUp;
   g_oTargetDocument.body.onmouseleave = onSchedMouseUp;
   
   g_oTargetDocument.getElementById("tbCal").onclick = ActivateApplet;
   g_oTargetDocument.getElementById("tbBar").onclick = ActivateApplet;

   // RTL Support
   if (g_bRTLWindow)
      RTLEnable ();

   // Tabs
   if (g_bEnableMonthlyTab)
   {   
      var oTab = g_oTargetDocument.getElementById("monthly");
      oTab.innerHTML = "&nbsp;"+GetUserProp ("UISTR Monthly Tab")+"&nbsp;"
      oTab.onclick = gotoMonth;

      g_oTargetDocument.getElementById("2Mtd").style.visibility = "visible";
      g_oTargetDocument.getElementById("2Mtd").style.display = "inline";
   }

   if (g_bEnableWeeklyTab)
   {   
      var oTab = g_oTargetDocument.getElementById("weekly");
      oTab.innerHTML = "&nbsp;"+GetUserProp("UISTR Weekly Tab")+"&nbsp;"
      oTab.onclick = gotoWeek;

      g_oTargetDocument.getElementById("1Mtd").style.visibility = "visible";
      g_oTargetDocument.getElementById("1Mtd").style.display = "inline";
   }
   
   if (g_bEnableDailyTab)
   {   
      var oTab = g_oTargetDocument.getElementById("daily");
      oTab.innerHTML = "&nbsp;"+GetUserProp("UISTR Daily Tab")+"&nbsp;"
      oTab.onclick = gotoDay;
         
      g_oTargetDocument.getElementById("0Mtd").style.visibility = "visible";
      g_oTargetDocument.getElementById("0Mtd").style.display = "inline";
   }
   
   if (!(g_bEnableDailyTab || g_bEnableWeeklyTab || g_bEnableMonthlyTab))
   {
      var oTabRow = g_oTargetDocument.getElementById("idTabRow");
      oTabRow.style.visibility = "hidden";
   }
   
   if (g_bEnableNewButton)
      CreatePushButton ("newButton", GetUserProp ("UISTR New Button"), onNewButton);
      
   if (g_bEnableTodayButton)
      CreatePushButton ("todayButton", GetUserProp ("UISTR Today Button"), onTodayButton);
   
   if (g_bEnablePrintButton)
      CreatePushButton ("printButton", GetUserProp ("UISTR Print Button"), onPrintButton);
   
   if (g_oTargetDocument.getElementById("newconcallButton")) 
   {
      CreatePushButton ("newconcallButton", 
                        GetUserProp ("UISTR Contact Call Button"), 
                        onNewConCall);   
   }
   
   if (g_oTargetDocument.getElementById("newacctcallButton")) 
   {
      CreatePushButton ("newacctcallButton", 
                        GetUserProp ("UISTR Account Call Button"), 
                        onNewAcctCall); 
   }
   
   if (g_oTargetDocument.getElementById("newmeetingButton")) 
   {
     CreatePushButton ("newmeetingButton", 
                        GetUserProp ("UISTR New Meeting Button"), 
                        onNewMeeting);
   }
  
   // Date picker
   if (g_bEnableDatePicker)
   {
     // Bug 10534401 Switch button icons and tooltips on RTL mode
      var sRightArrow = "<IMG STYLE=cursor:hand SRC=" + g_sPageBaseUrl + "images/janna/caright.gif TITLE='" + (g_bRTLWindow?GetUserProp ("UISTR Previous Icon Tooltip"):GetUserProp ("UISTR Next Icon Tooltip")) + "'>";
      var sLeftArrow = "<IMG STYLE=cursor:hand SRC=" + g_sPageBaseUrl + "images/janna/caleft.gif TITLE='" + (g_bRTLWindow?GetUserProp ("UISTR Next Icon Tooltip"):GetUserProp ("UISTR Previous Icon Tooltip")) + "'>";
      
      g_oTargetDocument.getElementById("navigateBack").innerHTML     = (g_bRTLWindow?sRightArrow:sLeftArrow);
      g_oTargetDocument.getElementById("navigateBack").onclick       = onPrevious;
      g_oTargetDocument.getElementById("navigateForward").innerHTML  = (g_bRTLWindow?sLeftArrow:sRightArrow);
      g_oTargetDocument.getElementById("navigateForward").onclick    = onNext;
      CreateDatePicker ();
   }
 
   // Owner picker
   if (g_bEnableAccessList)
   {
      CreateUserPicker ();
   }
   
   // Timezone picker
   if (g_bEnableTimeZone)
   {
      CreateTimeZonePicker ();
   }
   
   // Extra filter picker
   if (g_bEnableFilterPicker)
   {
      CreateFilterPicker ();
   }
   
   // Update space divier
   UpdateSpaceDividers ();
   
   ResizeControlBar ();
}

function RTLEnable ()
{
   // Change the body DIR property
   g_oTargetDocument.getElementById("theBody").dir = "rtl";
   
   // Change alignment of the tabs
   g_oTargetDocument.getElementById("idTabRow").align = "right";
   g_oTargetDocument.getElementById("idTabRowData").align = "right";
   
   // Change alignment of the main body
   g_oTargetDocument.getElementById("tbMainH").align = "right";
}

function UpdateSpaceDividers ()
{
   // space divider 1: active if we have New, Today, Print
   if (g_bEnableNewButton || g_bEnableTodayButton || g_bEnablePrintButton)
   {
      g_oTargetDocument.getElementById("spacer1").style.display = "inline";
   }
   
   // space divider 2: Active if we have datepicker and something to its right
   if (g_bEnableDatePicker && (g_bEnableAccessList || g_bEnableTimeZone || g_bEnableFilterPicker))
   {
      g_oTargetDocument.getElementById("spacer2").style.display = "inline";
   }
}
 
function setDatePickerDisplay (date)
{
   var formatString = g_oLocale.getDateFormat();

   if (g_oDatePicker)
   {
      g_oDatePicker.value = date.toDateString(formatString);
      var displayDate = g_oPropset.GetProperty ("DisplayDate");
      if (displayDate == ""  || displayDate == 'undefined' || displayDate == null)
         return;
         
      g_oDatePicker.DisplayText = displayDate;
   }  
}

function ChangeCalendarTab (id)
{
   if ((id == 0 && (!g_bEnableDailyTab)) ||
       (id == 1 && (!g_bEnableWeeklyTab)) ||
       (id == 2 && (!g_bEnableMonthlyTab)))
   {
      return;
   }
      
   if (id != g_nCurrentTab)
   {
      g_oTargetDocument.getElementById(id + "Mtd").className = "tier3On";   
      
      if (g_nCurrentTab != -1)
      {
         g_oTargetDocument.getElementById(g_nCurrentTab + "Mtd").className = "tier3Off";
      }
      g_nCurrentTab = id;
   }   
   _aHICGlobal["HIC_b5DayTimeSlot_Click"] = false;
}

//For Visual Style Changes-Changing the minibutton style on mouse events.
function MinibtnHover(obj)
{
	if (obj.className != 'miniBtnUICFocus')
	{
		obj.className='miniBtnUICHover';
		obj.parentNode.className='miniBtnUICTopHover';
	}
}
function MinibtnOut(obj)
{
	if (obj.className != 'miniBtnUICFocus')
	{
		obj.className='miniBtnUIC';
		obj.parentNode.className='miniBtnUICTop';
	}
	
}

function MinibtnDown(obj)
{
	obj.className='miniBtnUICDown';
	obj.parentNode.className='miniBtnUICTopDown';
}


function MinibtnUp(obj)
{
	obj.className='miniBtnUICHover';
	obj.parentNode.className='miniBtnUICTopHover';
}

function CreatePushButton (btnId, btnText, clickHandler)
{

   var sButton = "<span class=\"miniBtnUICTop\"><span class=\"miniBtnUIC\">" + 
				 "<A STYLE='cursor:hand;' onmouseover=\"MinibtnHover(this.parentNode)\" " + 
				 "onmouseout=\"MinibtnOut(this.parentNode)\" onmousedown=\"MinibtnDown(this.parentNode)\" " + 
				 "onmouseup=\"MinibtnUp(this.parentNode)\" ONCLICK=''>" + 
				 btnText + 
				 "</a></span></span>";
             
   var oBtn = g_oTargetDocument.getElementById(btnId);
   oBtn.innerHTML   = sButton;
   oBtn.onclick     = clickHandler;
}

function CreateDatePicker ()
{
   var uuidGenCtrl = window.external.GetGenCtrlCLSID ();

   var dateContainerElement = g_oTargetDocument.getElementById("displayDate");

   // fix for FR12-1BJOS21
   if (g_bExternalWriteAvailable)
   {
      g_oAppTopDocument.frames('_swe').top._swescript.SWEWriteInnerHTML (dateContainerElement, "<OBJECT id='DateObject' height='20' width='170' classid='CLSID:" + uuidGenCtrl + "' VIEWASTEXT></OBJECT>");
   }
   else
   {
      dateContainerElement.innerHTML = "<OBJECT id='DateObject' height='20' width='170' classid='CLSID:" + uuidGenCtrl + "' VIEWASTEXT></OBJECT>";
   }
   g_oDatePicker = g_oTargetDocument.getElementById("DateObject");
   g_oDatePicker.ControlType = "date";
   g_oDatePicker.SetAttribute (JGC_ATTR_PICKONLY, true);
   g_oDatePicker.SetFocus (true);
   g_oDatePicker.SetCallbackInterface (window.external.GetCallBackInterface(), CALJS_DATE);
}

function CreateUserPicker ()
{
   CreateComboBox ("AccessLabel", "UISTR Owner Label", "accessContainer", "AccessListObject",
                   400, CALJS_ACCESSLIST, "Access List");
}

function CreateTimeZonePicker ()
{
   CreateComboBox ("TimeZoneLabel", "UISTR Timezone Label", "timezonePicker", "TimeZoneObject",
                   400, CALJS_TIMEZONE, "Timezone List");
}

function CreateFilterPicker ()
{
   CreateComboBox ("FilterLabel", "UISTR Filter Label", "filterPicker", "FilterObject",
                   400, CALJS_FILTER, "Filter List");
}

function CreateComboBox (labelElementId, labelPropName, containerId, objectId, width, ifNum, dataPropName)
{
   var uuidGenCtrl = window.external.GetGenCtrlCLSID ();

   // Set label
   var oLabelObject = g_oTargetDocument.getElementById(labelElementId);
   oLabelObject.innerText = GetUserProp (labelPropName);
   oLabelObject.style.visibility = "visible";
   
   // Create the combo
   var containerElement = g_oTargetDocument.getElementById(containerId);

   // fix for FR12-1BJOS21
   if (g_bExternalWriteAvailable)
   {
      g_oAppTopDocument.frames('_swe').top._swescript.SWEWriteInnerHTML (containerElement, "<OBJECT id='" + objectId + "' height='20' width='200' classid='CLSID:" + uuidGenCtrl + "' VIEWASTEXT></OBJECT>");
   }
   else
   {
      containerElement.innerHTML = "<OBJECT id='" + objectId + "' height='20' width='200' classid='CLSID:" + uuidGenCtrl + "' VIEWASTEXT></OBJECT>";
   }
   
   containerElement.style.visibility = "visible";
   
   var oComboObject = g_oTargetDocument.getElementById(objectId);
   oComboObject.ControlType = "combo";
   oComboObject.SetFocus (true);
   oComboObject.SetCallbackInterface (window.external.GetCallBackInterface(), ifNum);
   oComboObject.SetAttribute (JGC_ATTR_MAXLENGTH, width);
   
   // Build the combo data
   var sDataList = GetUserProp (dataPropName);
       
   if (sDataList != null && sDataList != "")
   {
      var dataPropSet = NewPropertySet ();
      dataPropSet.DecodeFromString (sDataList);
   
      var aNameVals = new Array ();
      var aElement;
      var nIndex = 0, name, value;
      var comboValues = "", comboDisplays = "";
      
      // Access list is a flat prop set with unsorted properties
      if (ifNum == CALJS_ACCESSLIST)
      {
         if ((name = dataPropSet.EnumProperties (true)) != null && name != "") 
         {
            do {
               aElement = new Array ();
               aElement[0] = name;
               aElement[1] = dataPropSet.GetProperty (name);
               aNameVals[nIndex] = aElement;
               nIndex++;
            } while ((name = dataPropSet.EnumProperties (false)) != null && name != "");
         }    
         aNameVals.sort (new Function("a","b","return (a[1]>b[1] ? 1 :-1)"));
      }
      else
      {
         var childPropSet;
         var nCount = dataPropSet.GetChildCount ();
      
         for (nIndex = 0; nIndex < nCount; nIndex++)
         {
            childPropSet = dataPropSet.GetChild (nIndex);
            if (childPropSet == null)
               break;
               
            aElement = new Array ();
            aElement[0] = childPropSet.GetProperty ("Name");
            aElement[1] = childPropSet.GetProperty ("Value");
            aNameVals[nIndex] = aElement;
         }
      }

      // Build combo data
      for (nIndex = 0; nIndex < aNameVals.length; nIndex++)
      {
         name = aNameVals[nIndex][0];
         value = aNameVals[nIndex][1];

         comboValues = comboValues + String(name.length) + "*" + name;
         comboDisplays = comboDisplays + String(value.length) + "*" + value;
            
         if (ifNum == CALJS_ACCESSLIST) // Access list
         {
            g_aAccessListLogin2Display[name] = value;
            g_aAccessListDisplay2Login[value] = name;
         }
// 12551879
         else if (ifNum == CALJS_TIMEZONE) // Time Zone list
         {
            g_aTimeZoneListName2Display[name] = value;
            g_aTimeZoneListDisplay2Name[value] = name;
         }
      }
   
      oComboObject.SetComboValues (comboValues, comboDisplays);
   }
   
   if (ifNum == CALJS_ACCESSLIST)
   {
      // Access list
      g_oAccessListObject = oComboObject;
      g_sLoginUserDisplayName = g_aAccessListLogin2Display[g_sLoginUserLoginName];
   
      // Get the default owner
      if (g_sDefaultUser == null || g_sDefaultUser == "") 
      {
         g_sDefaultUser = g_sLoginUserLoginName;
      }
   
      // Set the selected owner
      g_sSelectedUser = g_sDefaultUser;
      g_oAccessListObject.Value = g_aAccessListLogin2Display[g_sSelectedUser];

      CheckUserPermission (g_sSelectedUser);
   }
   else if (ifNum == CALJS_TIMEZONE)
   {
      // Time Zone
//  12551879 
      g_oTimeZonePicker = oComboObject;
      var sTimeZoneTmp = GetUserProp ("Default Timezone");
      
      if (sTimeZoneTmp == null || sTimeZoneTmp == "")
      {
         sTimeZoneTmp = g_oLocale.GetTimeZoneName ();
      }
      g_oTimeZonePicker.Value = g_aTimeZoneListName2Display[sTimeZoneTmp];
      
      // Set the selected value
      g_sSelectedTimeZone = sTimeZoneTmp;
   }
   else if (ifNum == CALJS_FILTER)
   {
      // Filter
      g_oFilterPicker = oComboObject;
      g_oFilterPicker.Value = GetUserProp ("Default Filter");
      
      // Set the selected value
      g_sSelectedFilter = g_oFilterPicker.Value;
   }
}

function UpdateFilterPicker (selectedFilterVal)
{  
   // Re-Build the combo data
   var sDataList = g_sUpdateFilterList;
    
   if (sDataList != null && sDataList != "")
   {
      var dataPropSet = NewPropertySet ();
      dataPropSet.DecodeFromString (sDataList);
   
      var aNameVals = new Array ();
      var aElement;
      var nIndex = 0, name, value;
      var comboValues = "", comboDisplays = "";

      var childPropSet;
      var nCount = dataPropSet.GetChildCount ();
   
      for (nIndex = 0; nIndex < nCount; nIndex++)
      {
         childPropSet = dataPropSet.GetChild (nIndex);
         if (childPropSet == null)
            break;
            
         aElement = new Array ();
         aElement[0] = childPropSet.GetProperty ("Name");
         aElement[1] = childPropSet.GetProperty ("Value");
         aNameVals[nIndex] = aElement;
      }


      // Build combo data
      for (nIndex = 0; nIndex < aNameVals.length; nIndex++)
      {
         name = aNameVals[nIndex][0];
         value = aNameVals[nIndex][1];

         comboValues = comboValues + String(name.length) + "*" + name;
         comboDisplays = comboDisplays + String(value.length) + "*" + value;
      }
   
      g_oFilterPicker.SetComboValues (comboValues, comboDisplays);
   }  
   
   // Filter
   g_oFilterPicker.Value = selectedFilterVal;
   
   // Set the selected value
   g_sSelectedFilter = g_oFilterPicker.Value;
}

//========================================================================================================
// data objects

function _Schedule ()
{
   this.rows                  = "Automatic";       // number of rows including header rows (integer)
   this.cols                  = "Automatic";       // number of columns (integer)
   this.timeSlots             = 0;                 // number of timeslots (integer)
   this.split                 = "";                // split cell info (string)
   this.headers               = new Array;         // header literals (array)
   this.dateformat            = "";                // date string format (string)
   this.selectedDay           = new Date;          // the selected day
   this.dateData              = new Array;
   this.dateRange             = new Array;
   this.dateRangeData         = new Array;
   this.startDate             = new Date;
   this.endDate               = new Date;
   this.duration              = 0;                 // how many days to show
   this.users                 = 1;                 // num of users
   this.firstDay              = 1;                 // first day of week 0=sun;1=mon
   this.viewMode              = 0;                 // what view to show 0=day;1=week;2=month;3=range
   this.backgroundColor       = "#FFFFFF";
   this.backgroundColorOn     = "#FFFFE0";
   this.timeHeaderBgColorOn   = "navy";
   this.timeHeaderBgColorOff  = "white";
   this.timeHeaderColorOff    = "black";
   this.DayNameHeaderBgColor  = GetUserProp ("Background Color");
   this.slotTimeInterval      = 30;
   this.HUE_BUS_HRS           = "#F0F0F0";
   this.HUE_NON_BUS_HRS       = "#E0E0E0";
   this.currentDayBgColor     = "#F5F5F5";
}

function user(userguid, username)
{
   this.sUserGUID = userguid;
   this.sUserName = username;
}

// Info for the record in daily/5 day weekly view
function docInfo (start, end, conguid, docguid, options, data)
{
   if (start == end) end++;

   this.nStart    = Number(start);
   this.nEnd      = Number(end);
   this.nSpan     = Number(end) - Number(start);
   this.sConGUID  = conguid;
   this.sDocGUID  = docguid;
   this.sOptions  = options;
   this.sData     = data;
   this.vSlot;
}

function slotInfo (colspan, rowspan, conguid, docguid, options, data)
{
   this.nColSpan  = colspan;
   this.nRowSpan  = rowspan;
   this.sConGUID  = conguid;
   this.sDocGUID  = docguid;
   this.sOptions  = options;
   this.data      = data;
}

//========================================================================================================

function UpdateData (hint)
{
   switch (hint)
   {
      case 1:
      {
         ConfigureSchedule ();
         ModifyTable ();

         break;
      }
   }

   if (SCHED_PARAMS.viewMode == 0  || ((SCHED_PARAMS.viewMode == 1) && g_nWeeklyMode == 1))
   {
      if (g_oEarlyIndicator != null)
         g_oEarlyIndicator.style.visibility = "hidden"

      if (g_oLateIndicator != null)
         g_oLateIndicator.style.visibility = "hidden";

      if (_aHICGlobal["HIC_LastScrollTop"] == -1)
      {
         g_oTargetDocument.getElementById("dvInfo0").innerHTML = "<SPAN style='width:100%;height:2000;background-Color:#F0F0F0;z-index:10'></SPAN>";
         _aHICGlobal["HIC_SkipTimeScroll"] = "1";
         g_oTargetDocument.getElementById("dvInfo0").scrollTop = 19*Number(_aHICGlobal["HIC_nStartBusDayRow"]);
         _aHICGlobal["HIC_SkipTimeScroll"] = "0";
         g_oTargetDocument.getElementById("dvInfo0").innerHTML = _aHICGlobal["HIC_CurrDvInfoHTML"];
         BuildCachePtrs ();
         onTimeSlotScroll ();
      }
      else
      {
         g_oTargetDocument.getElementById("dvInfo0").innerHTML = _aHICGlobal["HIC_CurrDvInfoHTML"];
         BuildCachePtrs ();
         g_oTargetDocument.body.scrollTop   = _aHICGlobal["HIC_LastOuterScrollTop"];
         g_oTargetDocument.getElementById("dvInfo0").scrollTop = _aHICGlobal["HIC_LastScrollTop"];
      }

      _aHICGlobal["HIC_LastScrollTop"]      = -1;
      _aHICGlobal["HIC_LastOuterScrollTop"] = -1;
   }
   else
   {
      var oElement = g_oTargetDocument.getElementById(_aHICGlobal["HIC_bStretchCellElementScrollIntoView"]);
      if (oElement != null && g_bStretchCell)
      {
         oElement.scrollIntoView (true);
         _aHICGlobal["HIC_bStretchCellElementScrollIntoView"] = "";
      }
   }

   if (SCHED_PARAMS.slotTimeInterval == 60)
   {
      if (SCHED_PARAMS.viewMode == 0 || (SCHED_PARAMS.viewMode == 1 && g_nWeeklyMode == 1))
      {
         var clientHeight = g_oTargetDocument.getElementById("tbCal").offsetHeight;
         var curHeight = g_aTimeSlotLabels.length*19 + g_oTargetDocument.getElementById("dvTop0").style.height;

         if (curHeight < clientHeight)
         {
            g_oTargetDocument.getElementById("dvInfo0").style.height = Number(curHeight) + 3;
            g_oTargetDocument.getElementById("cell1").style.height = Number(curHeight) + 2;
         }
      }
   }
   
   // This section has been added to accomodate for Localication of Day/Month Names in the 7 day weekly calendar view.
   // FR# 12-1Q06QPH
   // TODO: Port this call to some other place if necessary.
   if (SCHED_PARAMS.viewMode == 1 && SCHED_PARAMS.duration == 7)
      ReplaceDayMonthNames ();  

   highlightDay (g_nSelectedDay);
}


//-------------------------------------------------------------------------------------------------
// Calculate the global layout
// We only support the following schedule:
//    - Daily           duration = 1
//    - 5 Day Weekly    duration = 5
//    - 7 Day Weekly    duration = 7
//    - Monthly         duration = 28, 35, 42
//    - Range           duration = any positive number
//-------------------------------------------------------------------------------------------------
function ConfigureSchedule ()
{
   switch (SCHED_PARAMS.duration)
   {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      {
         SCHED_PARAMS.rows = 1;
         SCHED_PARAMS.cols = 1;
         SCHED_PARAMS.timeSlots = SCHED_PARAMS.duration;
         break;
      }
      case 7:
      {
         SCHED_PARAMS.rows = 3;
         SCHED_PARAMS.cols = 2;
         SCHED_PARAMS.split = "1:2";
         SCHED_PARAMS.timeSlots = 0;
         break;
      }
      case 8:
      {
         SCHED_PARAMS.rows = 2;
         SCHED_PARAMS.cols = 4;
         SCHED_PARAMS.timeSlots = 0;
         break;
      }
      case 9:
      {
         SCHED_PARAMS.rows = 3;
         SCHED_PARAMS.cols = 3;
         SCHED_PARAMS.timeSlots = 0;
         break;
      }
      case 10:
      {
         SCHED_PARAMS.rows = 2;
         SCHED_PARAMS.cols = 5;
         SCHED_PARAMS.timeSlots = 0;
         break;
      }
      default:
      {
         var aHeaders = new Array();
                           
         aHeaders[0]   = new Array();
         SCHED_PARAMS.rows = SCHED_PARAMS.duration / 7 + 1;
         SCHED_PARAMS.timeSlots = 0;
                           
         //FR#12-1FC0WIN 
         SCHED_PARAMS.cols = 6;
         SCHED_PARAMS.split = "5:-1";                 
         
         // FR 12-1YOMUG9: First Day of Week not applied in 7 days monthly view
         // I have also modified all the else if with a standard calculation.
         if (g_nMonthlyColumns == 7)
         {
            aHeaders[0][0] = g_aWeekDaysStringArray[SCHED_PARAMS.firstDay];
            aHeaders[0][1] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+1)%7];
            aHeaders[0][2] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+2)%7];
            aHeaders[0][3] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+3)%7];
            aHeaders[0][4] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+4)%7];
            aHeaders[0][5] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+5)%7];
            aHeaders[0][6] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+6)%7];
                           
            SCHED_PARAMS.cols = 7;
            SCHED_PARAMS.split = "";
         }
         else
         {
            aHeaders[0][0] = g_aWeekDaysStringArray[SCHED_PARAMS.firstDay];
            aHeaders[0][1] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+1)%7];
            aHeaders[0][2] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+2)%7];
            aHeaders[0][3] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+3)%7];
            aHeaders[0][4] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+4)%7];
            aHeaders[0][5] = g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+5)%7] + "/" + g_aWeekDaysStringArray[(SCHED_PARAMS.firstDay+6)%7];
         }
         
         SCHED_PARAMS.headers = aHeaders;
         break;
      }
   }
}

function ModifyTable ()
{
   var aRowDef    = new Array();
   var aCellDef   = new Array();
   var bSplit     = false;
   var oRow;
   var oCell;
   var nWidth;
   var _a         = new Array();
   var _c         = 0;
   var sCell;
   var oSpan      = null;
   var bNeedCreateCache = false;
   var tdMain     = g_oTargetDocument.getElementById("tdMain")
   var bMonthly = false;   // ACR 435 Calendar Printing : In Monthly print only we want to change the HTML page Width
   

   _aHICGlobal["HIC_aCells"]        = new Array();
   _aHICGlobal["HIC_aCellDivs"]     = new Array();
   _aHICGlobal["HIC_aHeaderDivs"]   = new Array();
   _aHICGlobal["HIC_aDataDivs"]     = new Array();
   _aHICGlobal["HIC_aTopTables"]    = new Array();
   g_nRows         = SCHED_PARAMS.rows;
   g_nCols         = SCHED_PARAMS.cols;
   g_nCells        = 0;
   
   // Monthly
   if ((!g_bStretchCell) && 
       (SCHED_PARAMS.cols == 6) && 
       ((SCHED_PARAMS.dateRange.length == 28 && ((oSpan = g_oAppTopDocument.getElementById("HIC_MonthSpan28")) != null)) ||
       (SCHED_PARAMS.dateRange.length == 35 && ((oSpan = g_oAppTopDocument.getElementById("HIC_MonthSpan35")) != null)) ||
       (SCHED_PARAMS.dateRange.length == 42 && ((oSpan = g_oAppTopDocument.getElementById("HIC_MonthSpan42")) != null))))
   {
	   if ( isPrinting == true)
      {
		   bMonthly = true;
      }
      //ACR435 If Printing is not ON, then we want to load from Cache
      else if ((g_oTargetDocument.body.offsetHeight == oSpan.nBodyHeight) &&
          (g_oTargetDocument.body.offsetWidth == oSpan.nBodyWidth)) 
      {
         g_nCells = oSpan.nCells;
         LoadData ();
         return;
      }
   }
   else if ((!g_bStretchCell) && 
            (SCHED_PARAMS.cols == 7) && 
            ((SCHED_PARAMS.dateRange.length == 28 && ((oSpan = g_oAppTopDocument.getElementById("HIC_7ColMonthSpan28")) != null)) ||
            (SCHED_PARAMS.dateRange.length == 35 && ((oSpan = g_oAppTopDocument.getElementById("HIC_7ColMonthSpan35")) != null)) ||
            (SCHED_PARAMS.dateRange.length == 42 && ((oSpan = g_oAppTopDocument.getElementById("HIC_7ColMonthSpan42")) != null))))
   {
      //ACR435 If Printing is not ON, then we want to load from Cache
      if ((g_oTargetDocument.body.offsetHeight == oSpan.nBodyHeight) &&
          (g_oTargetDocument.body.offsetWidth == oSpan.nBodyWidth) && isPrinting == false) 
      {
         g_nCells = oSpan.nCells;
         LoadData ();
         return;
      }
   }
   // 7 Day Weekly
   else if ((!g_bStretchCell) &&
            SCHED_PARAMS.cols == 2 &&
            (oSpan = g_oAppTopDocument.getElementById("HIC_7DayWeekSpan")) != null)
   {
      //ACR435 If Printing is not ON, then we want to load from Cache
      if ((g_oTargetDocument.body.offsetHeight == oSpan.nBodyHeight) &&
          (g_oTargetDocument.body.offsetWidth == oSpan.nBodyWidth) && isPrinting == false )  
      {      
         g_nCells = oSpan.nCells;
         LoadData ();
         return;
      }
   }
   // Daily
   else if (SCHED_PARAMS.viewMode == 0 &&
            SCHED_PARAMS.cols == 1 &&
            (oSpan = g_oAppTopDocument.getElementById("HIC_TimeSlotSpan")) != null)
   {
      //ACR435 If Printing is not ON, then we want to load from Cache
      if ((g_oTargetDocument.body.offsetHeight == oSpan.nBodyHeight) &&
          (g_oTargetDocument.body.offsetWidth == oSpan.nBodyWidth) && isPrinting == false) 
      {      
         tdMain.innerHTML = oSpan.innerText;
         prepareDOMArrays (oSpan.nCells);
         g_nCells = oSpan.nCells;
         LoadData ();
         return;
      }
   }
   // 5 Day Weekly
   else if (SCHED_PARAMS.viewMode == 1 &&
            SCHED_PARAMS.cols == 1 &&
            (oSpan = g_oAppTopDocument.getElementById("HIC_5DayWeekSpan")) != null)
   {
      //ACR435 If Printing is not ON, then we want to load from Cache
      if ((g_oTargetDocument.body.offsetHeight == oSpan.nBodyHeight) &&
          (g_oTargetDocument.body.offsetWidth == oSpan.nBodyWidth) && isPrinting == false) 
      {
         tdMain.innerHTML = oSpan.innerText;
         prepareDOMArrays (oSpan.nCells);
         g_nCells = oSpan.nCells;
         LoadData ();
         return;
      }
   }
   
   // Cannot use the cached HTML, rebuild the HTML
   for (var i = 0; i < SCHED_PARAMS.rows; i++)
   {
      aCellDef[i] = new Array();

      if ((SCHED_PARAMS.headers == null) || (SCHED_PARAMS.headers == "") || (SCHED_PARAMS.headers[i] == null))
      {
         aRowDef[i] = 0;
            
         for (var j = 0; j < SCHED_PARAMS.cols; j++)
            aCellDef[i][j] = 0;
      }
      else
      {
         aRowDef[i] = -1;
            
         for (var j = 0; j < SCHED_PARAMS.cols; j++)
            aCellDef[i][j] = SCHED_PARAMS.headers[i][j];
      }
   }

   if ( (SCHED_PARAMS.split != "") && (SCHED_PARAMS.split != null) && (typeof(SCHED_PARAMS.split) != 'undefined'))
   {   
      var aSplitInfo = SCHED_PARAMS.split.split(",");
      for (var i in aSplitInfo)
      {
         var aTemp1   = aSplitInfo[i].split(":");
         var aTemp2   = aTemp1[1].split("|");
         var nCol   = Number(aTemp1[0]);
         var nRow;

         if (nCol < SCHED_PARAMS.cols)
         {
            if (aTemp2.length > 1)
            {
               for (var i in aTemp2)
               {
                  nRow = Number(aTemp2[i]);

                  if (nRow < SCHED_PARAMS.rows)
                  {                  
                     if (aRowDef[nRow] == 0)
                     {
                        aRowDef[nRow] = 1;
                        g_nRows++;
                     }
                           
                     if (aRowDef[nRow] == 1)
                        aCellDef[nRow][nCol] = 1;
                  }
               }
            }
            else
            {
               nRow = Number(aTemp2[0]);

               if (nRow == -1)
               {
                  for (var k in aRowDef)
                  {
                     if (aRowDef[k] == 0)
                     {
                        aRowDef[k] = 1;
                        g_nRows++;
                     }
                  }

                  for (var i = 0; i < SCHED_PARAMS.rows; i++)
                  {
                     if (aRowDef[i] == 1)
                        aCellDef[i][nCol] = 1;
                  }
               }
               else if (nRow < SCHED_PARAMS.rows)
               {
                  if (aRowDef[nRow] == 0)
                  {
                     aRowDef[nRow] = 1;
                     g_nRows++;
                  }

                  if (aRowDef[nRow] == 1)
                     aCellDef[nRow][nCol] = 1;
               }
            }
         }
      }
   }

   for (var i = SCHED_PARAMS.rows - 1; i > -1; i--)
   {
      if (aRowDef[i] == 1)
      {
         insertElement(aCellDef, i+1, true);
         insertElement(aRowDef, i+1, false);
               
         aRowDef[i+1] = 2;
      }
   }
   
   bSplit = (g_nRows != SCHED_PARAMS.rows);
   // Build the table for the tile views.
   // CELLSPACING=1 and BGCOLOR=gray create gray grid effect.
   _a[_c++] = "<table ID=tbMainH ALIGN=left CELLPADDING=0 CELLSPACING=1 BORDER=0 HEIGHT=100% WIDTH=100% BGCOLOR=gray>";
   
   // Calculate the width for each cell, absorb roundoff errors
   var aCellWidth = null;
   if (SCHED_PARAMS.cols > 0)
   {
      aCellWidth = new Array (SCHED_PARAMS.cols);
      // Adjust based on cellspacing
      //FR#12-1VR7CWB: Get the calendar width from thebody for below condition in Pharma calendar with Activity applet.
      if(g_oTargetDocument.getElementById("tbBar").offsetWidth > g_oTargetDocument.getElementById("theBody").offsetWidth)
      {
      var nTotalWidth = g_oTargetDocument.getElementById("theBody").offsetWidth - SCHED_PARAMS.cols - 1 - 16;
      }
      else
      {
      var nTotalWidth = g_oTargetDocument.getElementById("tbBar").offsetWidth - SCHED_PARAMS.cols - 1;
      }
      if ( g_printON == 1 && bMonthly == true) // // ACR 435 Calendar Printing  : Set this width only when first time UpdateData is called
      {
         nTotalWidth = 600;
      }
      var nAverWidth = Math.floor(nTotalWidth / SCHED_PARAMS.cols);
      var nRoundOff = nTotalWidth - nAverWidth * SCHED_PARAMS.cols;
      
      // Absorb roundoff errors in the first few columns
      for (var x = 0; x < nRoundOff; x++)
         aCellWidth[x] = nAverWidth + 1;
      for (var x = nRoundOff; x < SCHED_PARAMS.cols; x++)
         aCellWidth[x] = nAverWidth;
   }
   
   for (var r = 0; r < g_nRows; r++)
   {
      _a[_c++] = "<TR WIDTH='100%'> ";

      switch (aRowDef[r])
      {
         case -1:
         {
            // Header row for monthly calendar
            for (var c = 0; c < g_nCols; c++)
            {
               _a[_c++] = "<TD ALIGN='CENTER' HEIGHT=" + g_nHeaderLabelHeight + " STYLE='font-size:8pt;font-weight:bold;font-family:arial;padding:0;background-color:";
               _a[_c++] = SCHED_PARAMS.DayNameHeaderBgColor;
               _a[_c++] = ";color:";
               _a[_c++] = "black";
               _a[_c++] = "'><SPAN STYLE='width:";
               _a[_c++] = aCellWidth[c];
               _a[_c++] = ";overflow:hidden'>";
               _a[_c++] = aCellDef[r][c];
               _a[_c++] = "</SPAN></TD>";
            }
            break;
         }
         case 0:
         {
            for (var c = 0; c < g_nCols; c++)
            {
               sCell = "<TD ";
               if (SCHED_PARAMS.viewMode != 1)
                  _a[_c++] = setCellProperties(sCell, g_nCells++, bSplit, aCellWidth[c]);
               else
               {
                  _a[_c++] = setCellProperties(sCell, reOrderWeekView (g_nCells), bSplit, aCellWidth[c]);
                  g_nCells++;
               }  
            }
            break;
         }
         case 1:
         {
            for (var c = 0; c < g_nCols; c++)
            {
               if (aCellDef[r][c] == 1)
               {
                  sCell = "<TD ";
                  if (SCHED_PARAMS.viewMode != 1)
                     _a[_c++] = setCellProperties(sCell, g_nCells++, false, aCellWidth[c]);
                  else
                  {
                     _a[_c++] = setCellProperties(sCell, reOrderWeekView (g_nCells), false, aCellWidth[c]);
                     g_nCells++;
                  }
                  _aHICGlobal["HIC_aReserved"][c] = g_nCells++;
               }
               else
               {
                  sCell = "<TD ROWSPAN=2 ";
                  if (SCHED_PARAMS.viewMode != 1)
                     _a[_c++] = setCellProperties(sCell, g_nCells++, true, aCellWidth[c]);
                  else
                  {
                     _a[_c++] = setCellProperties(sCell, reOrderWeekView (g_nCells), true, aCellWidth[c]);
                     g_nCells++;
                  }
               }
            }
            break;
         }
         case 2:
         {
            for (var c = 0; c < g_nCols; c++)
            {
               if (aCellDef[r][c] == 1)
               {
                  sCell = "<TD ";
                  _a[_c++] = setCellProperties(sCell, _aHICGlobal["HIC_aReserved"][c], false, aCellWidth[c]);
               }
            }
            break;
         }
      }
      _a[_c++] = "</TR>";
   }
   _a[_c++] = "</TABLE>";
   

   // Cache the layout HTML string
   // Monthly
   if (SCHED_PARAMS.cols == 6)
   {
      if (g_bStretchCell)
      {
         if ((oSpan = g_oAppTopDocument.getElementById("HIC_SpanStretch")) == null)
         {      
            oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_SpanStretch></SPAN>");
            bNeedCreateCache = true;
         }
      }
      else if(SCHED_PARAMS.dateRange.length == 35)
      {   
         if ((oSpan = g_oAppTopDocument.getElementById("HIC_MonthSpan35")) == null)
         {
            oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_MonthSpan35></SPAN>");
            bNeedCreateCache = true;
         }
      }
      else if(SCHED_PARAMS.dateRange.length == 42)
      {   
         if ((oSpan = g_oAppTopDocument.getElementById("HIC_MonthSpan42")) == null)
         {
            oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_MonthSpan42></SPAN>");
            bNeedCreateCache = true;
         }
      }
      else if(SCHED_PARAMS.dateRange.length == 28)
      {   
         if ((oSpan = g_oAppTopDocument.getElementById("HIC_MonthSpan28")) == null)
         {   
            oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_MonthSpan28></SPAN>");
            bNeedCreateCache = true;
         }
      }
      oSpan.innerText = _a.join("");
   }
   else if (SCHED_PARAMS.cols == 7)
   {
      if (g_bStretchCell)
      {
         if ((oSpan = g_oAppTopDocument.getElementById("HIC_SpanStretch")) == null)
         {      
            oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_SpanStretch></SPAN>");
            bNeedCreateCache = true;
         }
      }
      else if(SCHED_PARAMS.dateRange.length == 35)
      {   
         if ((oSpan = g_oAppTopDocument.getElementById("HIC_7ColMonthSpan35")) == null)
         {
            oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_7ColMonthSpan35></SPAN>");
            bNeedCreateCache = true;
         }
      }
      else if(SCHED_PARAMS.dateRange.length == 42)
      {   
         if ((oSpan = g_oAppTopDocument.getElementById("HIC_7ColMonthSpan42")) == null)
         {
            oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_7ColMonthSpan42></SPAN>");
            bNeedCreateCache = true;
         }
      }
      else if(SCHED_PARAMS.dateRange.length == 28)
      {   
         if ((oSpan = g_oAppTopDocument.getElementById("HIC_7ColMonthSpan28")) == null)
         {   
            oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_7ColMonthSpan28></SPAN>");
            bNeedCreateCache = true;
         }
      }
      oSpan.innerText = _a.join("");
   }
   // 7 Day Weekly
   else if (SCHED_PARAMS.cols == 2)
   {
      if (!g_bStretchCell)
      {
         if ((oSpan = g_oAppTopDocument.getElementById("HIC_7DayWeekSpan")) == null)
         {   
            oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_7DayWeekSpan></SPAN>");
            bNeedCreateCache = true;
         }
      }
      else
      {   
         if ((oSpan = g_oAppTopDocument.getElementById("HIC_SpanStretch")) == null)
         {         
            oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_SpanStretch></SPAN>");
            bNeedCreateCache = true;
         }
      }
      oSpan.innerText = _a.join("");
   }
   // Daily
   else if (SCHED_PARAMS.cols == 1 && (SCHED_PARAMS.viewMode == 0))
   {
      if ((oSpan = g_oAppTopDocument.getElementById("HIC_TimeSlotSpan")) == null)
      {   
         oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_TimeSlotSpan></SPAN>");
         bNeedCreateCache = true;
      }
      oSpan.innerText = tdMain.innerHTML = _a.join("");
      prepareDOMArrays(g_nCells);
   }
   // 5 Day Weekly
   else if (SCHED_PARAMS.cols == 1 && (SCHED_PARAMS.viewMode == 1))
   {
      if ((oSpan = g_oAppTopDocument.getElementById("HIC_5DayWeekSpan")) == null)
      {   
         oSpan = g_oAppTopDocument.createElement("<SPAN ID=HIC_5DayWeekSpan></SPAN>");
         bNeedCreateCache = true;
      }
      oSpan.innerText = tdMain.innerHTML = _a.join("");
      prepareDOMArrays(g_nCells);
   }

   oSpan.nCells = g_nCells;
   oSpan.nBodyHeight = g_oTargetDocument.body.offsetHeight;
   oSpan.nBodyWidth = g_oTargetDocument.body.offsetWidth;
   
   if (bNeedCreateCache)
   {   
      g_oAppTopDocument.body.appendChild (oSpan);
   }
   
   LoadData ();
}

function prepareDOMArrays(nCells)
{
   for (var i = 0; i < nCells; i++)
   {
      _aHICGlobal["HIC_aCellDivs"][i]   = g_oTargetDocument.getElementById("dvData" + i);
      _aHICGlobal["HIC_aDataDivs"][i]   = g_oTargetDocument.getElementById("dvInfo" + i);

      if ( (_aHICGlobal["HIC_cMode"] == 1) || (SCHED_PARAMS.timeSlots > 1) || ((SCHED_PARAMS.timeSlots == 0) && (nCells > 1)) )
         _aHICGlobal["HIC_aHeaderDivs"][i] = g_oTargetDocument.getElementById("dvHeader" + i);
   }
}

function LoadData (data, eventstring)
{
   if (SCHED_PARAMS.timeSlots > 0)
   {
      g_oTargetDocument.getElementById ("dvInfo0").onscroll = onTimeSlotScroll;
      g_oTargetDocument.body.onscroll = onTimeSlotScroll;

      RenderDailyAnd5DayWeekly ();
   }
   else
   {
      g_oTargetDocument.body.onscroll = "";

      Render7DayWeeklyAndMonthly ();
   }
}

//-------------------------------------------------------------------------------------------------
// Build the timeslots html (with data)
//-------------------------------------------------------------------------------------------------
function LoadTimeSlots (data, bData)
{
   var oRow, oCell;
   var nHSlots, nVSlots, nRow, nRowSpan, nType;
   var sDate, sDataWidth;
   var sImgUp        = "";
   var sImgDown      = "";
   var stylePos      = -1;
   var nStartBusDay  = getStartBusDay();
   var nEndBusDay    = getEndBusDay();
   var sAMPMTimeFormat     = g_oLocale.GetProfile(LOCAL_TIME_NOSEC_FORMAT);
   var sNoAMPMTimeFormat   = sAMPMTimeFormat.replace(/p/g,"");
   var oTargetWindow       = g_oTargetDocument.parentWindow;
   
   _aHICGlobal["HIC_FirstTDtoScroll"]  = null;
   _aHICGlobal["HIC_FirstTDtoScroll"]  = new Array();
   _aHICGlobal["HIC_aTimeCells"]       = new Array();
   _aHICGlobal["HIC_aBlankCells"]      = new Array();
   _aHICGlobal["HIC_aAppointment"]     = new Array();

   if (g_bUse5DayCache && SCHED_PARAMS.timeSlots == 5 && _aHICGlobal["HIC_5DayBlankHTMLCache_master"] != "" && data[-1] == 0 )
   {
         if(!bData)
         {
            Replace5DayBlankCacheTimes();
            _aHICGlobal["HIC_CurrDvInfoHTML"] = _aHICGlobal["HIC_5DayBlankHTMLCache_current"];
            _aHICGlobal["HIC_aHeaderDivs"][0].innerHTML = Build5DayHeaderCache();
            _aHICGlobal["HIC_aBlankCells"] = copyArray(_aHICGlobal["HIC_5DayBlankHTMLCellPtrs"]);
         }   
         else  // we have data no conflicts on 5 day week and blank cache built
         {
            Replace5DayBlankCacheTimes();
            _aHICGlobal["HIC_aHeaderDivs"][0].innerHTML = Build5DayHeaderCache();
            CacheArrayCellContents();
            var oCal = g_oTargetDocument.getElementById("tbCal");
            var nCalOffSetWidth = oCal.offsetWidth;
            var nCalClientWidth = oCal.clientWidth;
            if ( g_printON == 1) // ACR 435 Calendar Printing : Change the width while printing
            {
               nCalOffSetWidth = 600;
               nCalClientWidth = 600;
            }
            var nTime         = new Date(1975, 1, 30, 0, 0);
            
            nHSlots = g_nMinutesInDay / SCHED_PARAMS.slotTimeInterval;
            for (nRow = 0; nRow < nHSlots; nRow++)
            {
               for (var c = 0; c < SCHED_PARAMS.timeSlots; c++)
               {
                  var count   = 0;
                  nVSlots      = data[c][-1];
                  _aHICGlobal["HIC_nSlotSize"]   = nVSlots;

                  for (var d = 0; d < nVSlots; d++)
                  {
                     celldata = data[c][nRow][d];
                     if ((celldata != null) && (celldata != "FILLED"))
                     {
                        if (celldata.data != null)
                        {
                           InsertToCache(c,d,nRow, celldata, nVSlots, nCalOffSetWidth, nCalClientWidth, nTime);
                           for (var j=nRow; j<nRow+celldata.nRowSpan; j++)
                           {
                              if (_aHICGlobal["HIC_aAppointment"][j] == null)
                                 _aHICGlobal["HIC_aAppointment"][j] = new Array();
   
                              if (_aHICGlobal["HIC_aAppointment"][j][c] == null)
                                 _aHICGlobal["HIC_aAppointment"][j][c] = new Array();

                              _aHICGlobal["HIC_aAppointment"][j][c][d] = (count++ == 0) ? 1 : 2;
                           }
                        }
                        else
                        {
                           if (_aHICGlobal["HIC_aBlankCells"][c] == null)
                              _aHICGlobal["HIC_aBlankCells"][c] = new Array();

                           if (_aHICGlobal["HIC_aBlankCells"][c][nRow] == null)
                              _aHICGlobal["HIC_aBlankCells"][c][nRow] = new Array();

                           _aHICGlobal["HIC_aBlankCells"][c][nRow][_aHICGlobal["HIC_aBlankCells"][c][nRow].length] = "td_" + c + "_" + nRow + "_" + d;
                        }
                     }
                  }
               }
               nTime.setMinutes(nTime.getMinutes() + SCHED_PARAMS.slotTimeInterval);
            }
            _aHICGlobal["HIC_CurrDvInfoHTML"] = _aHICGlobal["HIC_5DayArrayCell_current"].join("");
         }
   }
   else
   {
      // Build the slot view layout
      var oCal = g_oTargetDocument.getElementById("tbCal");
      var nCalOffSetWidth = oCal.offsetWidth;
      var nCalClientWidth = oCal.clientWidth;
      if ( g_printON == 1) // ACR 435 Calendar Printing : Change the width while printing
      {
         nCalOffSetWidth = 600;
         nCalClientWidth = 600;
      }
      
      for (var i = 0; i < g_nCells; i++)
      {
         var nTime      = new Date(1975, 1, 30, 0, 0);
         var aCarryOver = new Array();

         if (SCHED_PARAMS.timeSlots > 1)
         {
            _aHICGlobal["HIC_aHeaderDivs"][i].innerHTML = Build5DayHeaderCache ();
         }
         
         g_oTargetDocument.getElementById("dvInfo0").innerHTML = "";
         
         var __a = new Array();
         __a[__a.length] = "<TABLE ID=tbData";
         __a[__a.length] = i;
         __a[__a.length] = " CELLPADDING=0 HEIGHT=100% WIDTH=100% BGCOLOR=#FFFFFF CELLSPACING=1 CELLPADDING=0 STYLE=background-color:silver>";

         nHSlots = g_nMinutesInDay / SCHED_PARAMS.slotTimeInterval;

         for (nRow = 0; nRow < nHSlots; nRow++)
         {
            __a[__a.length] = "<%~~TR~~%><TR PRINTTR23DGD32GSD ";
            __a[__a.length] = " ID=";
            __a[__a.length] = "timeslot";
            __a[__a.length] = nRow;
            __a[__a.length] = " STYLE='PRINTTRH56SDEIG:0;PRINTDISPJUD52:af'>";
            __a[__a.length] = "<TD PRINTTD23DGD32GSD ALIGN=RIGHT HEIGHT=";
            __a[__a.length] = 18 * getRowPerTimeslot();
            __a[__a.length] = " NOWRAP=TRUE STYLE='PRINTBORDERT3E4G:1px solid gray;PRINTTDH56SDEIG:0;background-color:#9A9A9A'";
            __a[__a.length] = " WIDTH=";
            __a[__a.length] = g_nTimeSlotWidth;
            __a[__a.length] = ">";
            __a[__a.length] = "<SPAN ";
            __a[__a.length] = " rowNumber=";
            __a[__a.length] = nRow;
            
            stylePos = __a.length;
            __a[__a.length] = " STYLE='color:white;font:8pt Arial;padding-right:0;padding-left:0;padding-top:2;width:" + g_nTimeSlotWidth + ";height:100%;overflow:hidden"
            
            if (!_aHICGlobal["HIC_cDisabled"])
            {
               __a[stylePos] += ";cursor:hand";
               __a[__a.length] = " ONCLICK=onTimeSlot(this)";
               __a[__a.length] = " ONMOUSEOVER=onTimeCellMouseOver(this)";
            }
            
            var sInnerText;
            if (nRow == 0)
            {
               __a[stylePos] += ";padding-";
               if (g_bRTLWindow)
                  __a[stylePos] += (sAMPMTimeFormat == sNoAMPMTimeFormat) ? "left:21" : "left:2";
                 else
                  __a[stylePos] += (sAMPMTimeFormat == sNoAMPMTimeFormat) ? "right:21" : "right:2";
               
               if (typeof(g_aTimeSlotLabels[nRow]) == 'undefined')
               {
                  sInnerText = g_oLocale.getStringFromDateTime(nTime.toTimeString("h:mm tt"), g_sDispTimeFormat, sAMPMTimeFormat );
                  g_aTimeSlotLabels[nRow] = sInnerText;
               }
               else
                  sInnerText = g_aTimeSlotLabels[nRow];
 
               __a[__a.length] = " time="+ nTime.getHours() +":"+nTime.getMinutes() + ":" + nTime.getSeconds();
            }
            else if (nRow == nHSlots / 2)
            {
               __a[stylePos] += ";padding-";
               if (g_bRTLWindow)
                  __a[stylePos] += (sAMPMTimeFormat == sNoAMPMTimeFormat) ? "left:21" : "left:4";
               else
                  __a[stylePos] += (sAMPMTimeFormat == sNoAMPMTimeFormat) ? "right:21" : "right:4";
               
               if (typeof(g_aTimeSlotLabels[nRow]) == 'undefined')
               {
                  sInnerText = g_oLocale.getStringFromDateTime(nTime.toTimeString("h:mm tt"), g_sDispTimeFormat, sAMPMTimeFormat );
                  g_aTimeSlotLabels[nRow] = sInnerText;
               }            
               else
                  sInnerText = g_aTimeSlotLabels[nRow];
               
               __a[__a.length] = " time="+ nTime.getHours() +":"+nTime.getMinutes() + ":" + nTime.getSeconds();
            }
            else
            {
               __a[stylePos] += ";padding-";
               if (g_bRTLWindow)
                  __a[stylePos] += "left:21";
               else
                  __a[stylePos] += "right:21";

               if (typeof(g_aTimeSlotLabels[nRow]) == 'undefined')
               {
                  sInnerText = g_oLocale.getStringFromDateTime(nTime.toTimeString("h:mm tt"), g_sDispTimeFormat, sNoAMPMTimeFormat );
                  g_aTimeSlotLabels[nRow] = sInnerText
               }            
               else
                  sInnerText = g_aTimeSlotLabels[nRow]
               
               __a[__a.length] = " time="+ nTime.getHours() +":"+nTime.getMinutes() + ":" + nTime.getSeconds();
            }

            if (nRow == nStartBusDay * 60 / SCHED_PARAMS.slotTimeInterval)
            {
               sInnerText = "<A ID=StartWorkDay></A>" + sInnerText;
               _aHICGlobal["HIC_nStartBusDayRow"] = nRow;
            }
            __a[stylePos] += "'"
            _aHICGlobal["HIC_aTimeCells"][nRow] = "timeslot" + nRow;
            __a[__a.length] = ">";
            __a[__a.length] = sInnerText;
            __a[__a.length] = "</SPAN>";
            __a[__a.length] = "</TD>";
            
            // Build columns (1 or 5)
            for (var c = 0; c < SCHED_PARAMS.timeSlots; c++)
            {
               var count      = 0;
               var offsetTop  = 0;
               nVSlots        = data[c][-1];
               _aHICGlobal["HIC_nSlotSize"]   = nVSlots;

               for (var d = 0; d < nVSlots; d++)
               {
                  var celldata = data[c][nRow][d];

                  if ((celldata != null) && (celldata != "FILLED"))
                  {
                     __a[__a.length] = "<%~~BegTD~~%><TD PRINTTD23DGD32GSD ";
                     __a[__a.length] = " ID=";
                     __a[__a.length] = "td_" + c + "_" + nRow + "_" + d;
                     var sCellId = "td_" + c + "_" + nRow + "_" + d;
                     __a[__a.length] = " COLSPAN=";
                     __a[__a.length] = celldata.nColSpan;
                     __a[__a.length] = " ROWSPAN=";
                     __a[__a.length] = celldata.nRowSpan;
                     __a[__a.length] = " VALIGN=TOP";
                     __a[__a.length] = " WIDTH=";

                     if (SCHED_PARAMS.timeSlots == 1)                        
                        sDataWidth = Math.floor(((nCalClientWidth - (g_nTimeSlotWidth + 24) - (2*nVSlots))/nVSlots ) * celldata.nColSpan);
                     else
                        sDataWidth = Math.floor(((nCalOffSetWidth - (g_nTimeSlotWidth - 9) - (SCHED_PARAMS.timeSlots*6)) * (100 / SCHED_PARAMS.timeSlots/ nVSlots * celldata.nColSpan) / 100))- 3;

                     __a[__a.length] = sDataWidth;
                     
                     if ((c != 0) && (d == 0))
                     {
                        if ((aCarryOver[c] == null) || (aCarryOver[c] == 0))
                        {
                           if (celldata.length > 1)
                              aCarryOver[c] = celldata.nRowSpan;
                           else
                              aCarryOver[c] = 1;
                        }

                        aCarryOver[c]--;
                     }

                     sDate = new Date(SCHED_PARAMS.dateRange[c]);
                     sDate.setHours(nTime.getHours());
                     sDate.setMinutes(nTime.getMinutes());
                     sDate.setSeconds(nTime.getSeconds());

                     if (celldata.data != null)
                     {
                        _aHICGlobal["HIC_FirstTDtoScroll"][_aHICGlobal["HIC_FirstTDtoScroll"].length] = sCellId;
                        
                        __a[__a.length] = " timeSlot=";
                        __a[__a.length] = c;
                        __a[__a.length] = " vSlot=";
                        __a[__a.length] = d;
                        __a[__a.length] = " rowNumber=";
                        __a[__a.length] = nRow;
                        __a[__a.length] = " 8U-YGSDG7B-~- time=";
                        __a[__a.length] = sDate.valueOf();
                        __a[__a.length] = " IYU23G9ZM~*~ options=";
                        __a[__a.length] = celldata.sOptions;
                        __a[__a.length] = " ONMOUSEDOWN=_HIC_Calendar_onSchedMouseDownEx(this)";
                        __a[__a.length] = " ONMOUSEMOVE=_HIC_Calendar_onSchedMouseMoveEx(this)";
                        __a[__a.length] = " ONKEYPRESS=_HIC_Calendar_OnSlotKeyPress('Edit')";
                        __a[__a.length] = " ONDROP=_HIC_Calendar_onDropItem(this" + ",'" + c + "')";
                        __a[__a.length] = " ONDRAGENTER=_HIC_Calendar_CancelDef()";
                        __a[__a.length] = " ONDRAGOVER=_HIC_Calendar_CancelDef()";
                        //__a[__a.length] = " dragbgcolor=0 ONDRAGLEAVE=_HIC_Calendar_DragLeave()";
                        __a[__a.length] = " dragbgcolor=#E0E0E0 ONDRAGLEAVE=_HIC_Calendar_DragLeave()";
                                             
                        for (var j=nRow; j<nRow+celldata.nRowSpan; j++)
                        {
                           if (_aHICGlobal["HIC_aAppointment"][j] == null)
                              _aHICGlobal["HIC_aAppointment"][j] = new Array();
   
                           if (_aHICGlobal["HIC_aAppointment"][j][c] == null)
                              _aHICGlobal["HIC_aAppointment"][j][c] = new Array();

                           _aHICGlobal["HIC_aAppointment"][j][c][d] = (count++ == 0) ? 1 : 2;
                        }

                        if (celldata.sOptions.slice(3,4) == 1)
                        {
                           __a[__a.length] = " STYLE='`;PRINTBRDFILLED2D4g:2px solid gray;border:1px solid silver;background-color:white'"
                        }
                        else
                        {      
                           __a[__a.length] = " STYLE='border:solid silver;background-color:"
                           __a[__a.length] =  SCHED_PARAMS.backgroundColor;
                           __a[__a.length] =  "'";
                        }

                        nType = (celldata.sOptions.slice(5,6) == 0) ? 0 : 1;

                        nRowSpan = celldata.nRowSpan - 1;
                        nBottomPos = nRowSpan == 0 ? 18 : ((nRowSpan + 1) * 19);
						
                        // sImgUp = "<IMG TYPE=" + nType + " SRC=" + g_sPageBaseUrl + "images/spacer.gif ID=imgUp rowSpan=" + nRowSpan + " rowNumber= " + celldata.rowNumber   + " idStretch=" + celldata.sDocGUID + " ONMOUSEOVER=onCellMouseOver(this,'up') ONMOUSEUP=HIC_onBeginStrechMouseUp() ONMOUSEDOWN=HIC_onBeginStrechMouseDown(this" + ",'" + sCellId + "') STYLE='z-index:9;height:6;width:100%'>";  // Fix for FR 12-1SJ56UP & FR 12-1TXC2SO
                        // Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
                        sImgUp = "<IMG TYPE=" + nType + " SRC=" + g_sPageBaseUrl + "images/spacer.gif ID=imgUp rowSpan=" + nRowSpan + " rowNumber= " + celldata.rowNumber   + " idStretch=" + celldata.sDocGUID + " ONMOUSEOVER=onCellMouseOver(this,'up'" + ",'" + sCellId + "') STYLE='z-index:9;height:6;width:100%'>";  // Fix for FR 12-1SJ56UP & FR 12-1TXC2SO                     

                        if (nRow + celldata.nRowSpan < g_nMinutesInDay / SCHED_PARAMS.slotTimeInterval)
                        {
                           offsetTop = String( Number(celldata.nRowSpan)-1)*19 + 4;
                           // sImgDown = "<IMG TYPE=" + nType  + " SRC=" + g_sPageBaseUrl + "images/spacer.gif ID=imgDown rowSpan=" + nRowSpan + " rowNumber=" + String(Number(celldata.rowNumber) + Number(celldata.nRowSpan))   + " idStretch=" + celldata.sDocGUID + " ONMOUSEOVER=onCellMouseOver(this,'down')  ONMOUSEUP=HIC_onBeginStrechMouseUp(this) ONMOUSEDOWN=HIC_onBeginStrechMouseDown(this" + ",'" + sCellId + "') STYLE='z-index:2;position:relative;top:" +  offsetTop +  "px;height:6;width:100%'>"; // Fix for FR 12-1SJ56UP & FR 12-1TXC2SO                           
                           // Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
                           sImgDown = "<IMG TYPE=" + nType  + " SRC=" + g_sPageBaseUrl + "images/spacer.gif ID=imgDown rowSpan=" + nRowSpan + " rowNumber=" + String(Number(celldata.rowNumber) + Number(celldata.nRowSpan))   + " idStretch=" + celldata.sDocGUID + " ONMOUSEOVER=onCellMouseOver(this,'down'" + ",'" + sCellId + "') STYLE='z-index:2;position:relative;top:" +  offsetTop +  "px;height:6;width:100%'>"; // Fix for FR 12-1SJ56UP & FR 12-1TXC2SO
                        }
                        
                        if (SCHED_PARAMS.timeSlots == 1)                        
                        {
                           if (nVSlots == celldata.nColSpan)
                              sDataWidth += 2.13*nVSlots;
                        }
                        else
                        {
                           //if (nVSlots == celldata.nColSpan)
                           //   sDataWidth += 0.033*nVSlots                     
                        }   
                        
                        if (celldata.nRowSpan == 1)
                           offSetTop = 10;
                        else   
                           offSetTop = 8;

                        if (g_bRTLWindow)
                        {
                           __a[__a.length] = "><GS9SDIVPRINT><DIV  rowid=" + celldata.sDocGUID + " ID=DIV_TDCELL TYPE=" + nType + " ONDRAGEND=onItemEndDrag() ONDRAGSTART=HIC_onDragStart(this) ONDRAG=HIC_onDrag(this) ONBLUR=_HIC_Calendar_RemoveCellFocus() ONFOCUS=_HIC_Calendar_CellFocus()  STYLE='height:100%;width:" + sDataWidth + ";color:navy;font-family:arial;font-size:8pt;padding:0;overflow:hidden'><TABLE CELLPADDING=0 CELLSPACING=0 style='height:100%;width:100%'><TR><TD style='cursor:move;width:7px;overflow:hidden;background-color:silver'><IMG id='dragimg' style='height:100%;width:7px;filter:Alpha(opacity=0)' src='" + g_sPageBaseUrl + "images/blank.jpg'></TD><TD ONBLUR=_HIC_Calendar_RemoveCellFocus() ONFOCUS=_HIC_Calendar_CellFocus()   style='height:6px;' valign=top>" + sImgUp + sImgDown + "<SPAN style='padding-right:3px;position:relative;top:-" + offSetTop + "'  id=" + celldata.sDocGUID + ">" + celldata.data  + "</SPAN></TD></TR></TABLE></DIV></GS9SDIVPRINT>";
                           __a[__a.length] = "</GS9SDIVPRINT><DIV  STYLE='display:none;height:100%;width:" + sDataWidth + ";color:navy;font-family:arial;font-size:8pt;padding:0;overflow:hidden'><SPAN style='padding-right:3px;' id=" + celldata.sDocGUID + ">"  + celldata.data  + "</SPAN></DIV>";
                        }
                        else
                        {
                           __a[__a.length] = "><GS9SDIVPRINT><DIV  rowid=" + celldata.sDocGUID + " ID=DIV_TDCELL TYPE=" + nType + " ONDRAGEND=onItemEndDrag() ONDRAGSTART=HIC_onDragStart(this) ONDRAG=HIC_onDrag(this) ONBLUR=_HIC_Calendar_RemoveCellFocus() ONFOCUS=_HIC_Calendar_CellFocus()  STYLE='height:100%;width:" + sDataWidth + ";color:navy;font-family:arial;font-size:8pt;padding:0;overflow:hidden'><TABLE CELLPADDING=0 CELLSPACING=0 style='height:100%;width:100%'><TR><TD style='cursor:move;width:7px;overflow:hidden;background-color:silver'><IMG id='dragimg' style='height:100%;width:7px;filter:Alpha(opacity=0)' src='" + g_sPageBaseUrl + "images/blank.jpg'></TD><TD ONBLUR=_HIC_Calendar_RemoveCellFocus() ONFOCUS=_HIC_Calendar_CellFocus()   style='height:6px;' valign=top>" + sImgUp + sImgDown + "<SPAN style='padding-left:3px;position:relative;top:-" + offSetTop + "'  id=" + celldata.sDocGUID + ">" + celldata.data  + "</SPAN></TD></TR></TABLE></DIV></GS9SDIVPRINT>";
                           __a[__a.length] = "</GS9SDIVPRINT><DIV  STYLE='display:none;height:100%;width:" + sDataWidth + ";color:navy;font-family:arial;font-size:8pt;padding:0;overflow:hidden'><SPAN style='padding-left:3px;' id=" + celldata.sDocGUID + ">"  + celldata.data  + "</SPAN></DIV>";
                        }
                        __a[__a.length] ="</TD>";
                     }
                     else
                     {
                        if ((nRow >= nStartBusDay * 60 / SCHED_PARAMS.slotTimeInterval) && (nRow < nEndBusDay * 60 / SCHED_PARAMS.slotTimeInterval))
                        {
                           __a[__a.length] = " STYLE='PRINTNONBUSY46D345:1px solid #DCDCDC;padding:0;background-color:";
                           __a[__a.length] = SCHED_PARAMS.HUE_BUS_HRS;
                           __a[__a.length] = "'"
                           __a[__a.length] = " originalColor=";
                           __a[__a.length] = SCHED_PARAMS.HUE_BUS_HRS;
                        }
                        else
                        {
                           __a[__a.length] = " STYLE='PRINTNONBUSY46D345:1px solid #DCDCDC;padding:0;background-color:";
                           __a[__a.length] = SCHED_PARAMS.HUE_NON_BUS_HRS;
                           __a[__a.length] = "'";
                           __a[__a.length] = " originalColor=";
                           __a[__a.length] = SCHED_PARAMS.HUE_NON_BUS_HRS;
                        }
                        __a[__a.length] = " ONMOUSEDOWN=_HIC_Calendar_onSchedMouseDown(this)";
                        __a[__a.length] = " ONMOUSEMOVE=_HIC_Calendar_onSchedMouseMove(this)";
                        __a[__a.length] = " ONDROP=_HIC_Calendar_onDropItem(this" + ",'" + c + "')";
                        __a[__a.length] = " ONDRAGENTER=_HIC_Calendar_CancelDef()";
                        __a[__a.length] = " ONDRAGOVER=_HIC_Calendar_CancelDef()";
                        __a[__a.length] = " ONDRAGLEAVE=_HIC_Calendar_DragLeave()";
                        __a[__a.length] = " ONKEYPRESS=_HIC_Calendar_OnSlotKeyPress('Add')";
                        __a[__a.length] = " timeSlot=";
                        __a[__a.length] = c;
                        __a[__a.length] = " rowNumber=";
                        __a[__a.length] = nRow;
                        __a[__a.length] = " 8U-YGSDG7B-~- time=";
                        __a[__a.length] = sDate.valueOf();
                       // ACR 435 - Calendar Printing
                       // Put a DIV tag so that colspan and rowspan doesnot mess with the printing
                        __a[__a.length] = " IYU23G9ZM~*~ ><DIV STYLE='display:none;height:100%;width:";
                        __a[__a.length] = sDataWidth;
                        __a[__a.length] = "px'>  </DIV>&nbsp;</TD>";

                        if (_aHICGlobal["HIC_aBlankCells"][c] == null)
                           _aHICGlobal["HIC_aBlankCells"][c] = new Array();

                        if (_aHICGlobal["HIC_aBlankCells"][c][nRow] == null)
                           _aHICGlobal["HIC_aBlankCells"][c][nRow] = new Array();

                        _aHICGlobal["HIC_aBlankCells"][c][nRow][_aHICGlobal["HIC_aBlankCells"][c][nRow].length] = "td_" + c + "_" + nRow + "_" + d;
                     }                  
                  }
               }
            }
            __a[__a.length] = "</TR>";
            nTime.setMinutes(nTime.getMinutes() + SCHED_PARAMS.slotTimeInterval);
         }

         __a[__a.length] = "<TR>";
         __a[__a.length] ="<TD></TD>";
         
         _aHICGlobal["HIC_aSlotWidths"] = new Array();
         
         for (var c = 0; c < SCHED_PARAMS.timeSlots; c++)
         {
            __a[__a.length] ="<TD COLSPAN=";
            __a[__a.length] = data[c][-1];
            __a[__a.length] = " ID=_td_slwidth";
            __a[__a.length] = c;
            __a[__a.length] = "></TD>";
            //_aHICGlobal["HIC_aSlotWidths"][c] = "_td_slwidth" + c;
         }
         __a[__a.length] = "</TR>"; 
      }
      __a[__a.length] = "</TABLE>";
   
      _aHICGlobal["HIC_CurrDvInfoHTML"] = __a.join("");
      
      if (g_bUse5DayCache && !bData && SCHED_PARAMS.timeSlots == 5 && _aHICGlobal["HIC_5DayBlankHTMLCache_master"] == "")
      {
         _aHICGlobal["HIC_5DayBlankHTMLCache_master"] = _aHICGlobal["HIC_CurrDvInfoHTML"];
         _aHICGlobal["HIC_5DayBlankHTMLCellPtrs"] = copyArray(_aHICGlobal["HIC_aBlankCells"]);
      }
   }      

   if (g_oEarlyIndicator == null)
   {
      var elementEarlyIndicator = "<IMG ID=imgIndicator SRC=" + g_sPageBaseUrl + "images/arrow_up_sm.gif ONCLICK=onClickScrollUp() STYLE=cursor:hand;position:absolute;visibility:hidden>";
      var elementLateIndicator = "<IMG ID=imgIndicator SRC=" + g_sPageBaseUrl + "images/arrow_down_sm.gif ONCLICK=onClickScrollDown() STYLE=cursor:hand;position:absolute;visibility:hidden>";
      
      g_oEarlyIndicator  = g_oTargetDocument.createElement(elementEarlyIndicator);
      g_oLateIndicator   = g_oTargetDocument.createElement(elementLateIndicator);
      
      g_oEarlyIndicator.title = GetUserProp ("UISTR Early Indicator Tooltip");
      g_oLateIndicator.title = GetUserProp ("UISTR Late Indicator Tooltip");

      g_oTargetDocument.body.appendChild(g_oEarlyIndicator);
      g_oTargetDocument.body.appendChild(g_oLateIndicator);
   }
}

function insertElement (aTemp, index, copy)
{
   var nLength = aTemp.length;
      
   for (var i = nLength; i > index; i--)
      aTemp[i] = aTemp[i-1];
         
   aTemp[index] = copy ? aTemp[index-1] : null;
      
   return aTemp;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Set the properties of cell in tile mode
//
///////////////////////////////////////////////////////////////////////////////////////////////////
function setCellProperties (sCell, id, double, nCellWidth)
{
   var htmlArray = new Array();
   var nDivHeight, nHeight;
   var _a = new Array ();
   var _c = 0;
   
   // <TD 
   _a[_c++] = sCell;

   if (SCHED_PARAMS.viewMode != 0 && SCHED_PARAMS.duration > 5)   
   {
      _a[_c++] = "tag=";
      _a[_c++] = id;
      _a[_c++] = " ID=";
      _a[_c++] = "tileCell";
      _a[_c++] = id;
      _a[_c++] = " VALIGN=TOP double="
      _a[_c++] = double;
      _a[_c++] = " WIDTH=";
      _a[_c++] = nCellWidth;
      
      // Calculate height of data cell
      var nDataAreaHeight = g_oTargetDocument.body.clientHeight - g_oTargetDocument.getElementById("tbBar").offsetHeight - g_nScrollBarWidth;
      if (!g_bStretchCell)
      {
         // No stretch, even sized
         _a[_c++] = " HEIGHT=";
         if (SCHED_PARAMS.viewMode == 1)
         {    
            _a[_c] = Math.floor(nDataAreaHeight / (2 * SCHED_PARAMS.rows)) - 1;
         }
         else
         {
            // SCHED_PARAMS.rows = Number of data rows + header label row
            nDataAreaHeight = nDataAreaHeight - g_nHeaderLabelHeight;
            if (SCHED_PARAMS.cols == 7)
               _a[_c] = Math.floor(nDataAreaHeight / (SCHED_PARAMS.rows - 1)) - 1;
            else
               _a[_c] = Math.floor(nDataAreaHeight / (2 * (SCHED_PARAMS.rows - 1))) - 1;
         }
      }   
      else
      {
         if (SCHED_PARAMS.viewMode == 1)
         {    
            nHeight = Math.floor(nDataAreaHeight / (2 * SCHED_PARAMS.rows)) - 1;
         }
         else
         {
            nDataAreaHeight = nDataAreaHeight - g_nHeaderLabelHeight;
            nHeight = Math.floor(nDataAreaHeight /  (2 * (SCHED_PARAMS.rows - 1))) - 1;
         }
           
         nHeight = double ? nHeight * 2 : nHeight;
         nHeight -= g_nScrollBarWidth;
      }

      nDivHeight = double ? _a[_c] * 2 + 1 : _a[_c];
      _c++;
      
      // <TD> with white background
      _a[_c++] = " STYLE='background-color:white'";
      _a[_c++] = " ONCLICK=onCalClick(this)>";

      // The Cell Div for highlight
      sHTML = "<DIV ID=dvData" + id + " STYLE=width:" + nCellWidth + ";overflow:hidden";
      if (!g_bStretchCell)
         sHTML += ";height:" + nDivHeight;
      sHTML += ">";

      // The cell header
      sHTML += "<DIV tag="+id+" ID=dvHeader" + id + " ONMOUSEOVER=HIC_DayOnMouseOver(this) STYLE=background-color:" + SCHED_PARAMS.currentDayBgColor + ";width:100%;font-family:arial;font-size:8pt;color:" + SCHED_PARAMS.timeHeaderBgColorOn + ";height:" + g_nCellHeaderHeight + ";padding:0;text-align:right;cursor:hand;overflow:hidden;><TABLE WIDTH=100% STYLE=color:" + SCHED_PARAMS.timeHeaderBgColorOn + "><TR><TD><IMG onclick=onToggleStretch(" + id + ") style=visibility:~~7YB-0IEdvIndicator SRC=~~7YB-0IEdvImgInd></TD><TD>~~7YB-0IEdvSDMarker</TD><TD WIDTH=100%>~~7YB-0IEdvHeader</TD></TR></TABLE></DIV>";
      nDivHeight -= g_nCellHeaderHeight;
      
      // The cell data
      sHTML += "<DIV tag="+id+" ID=dvInfo" + id +  " STYLE=width:100%;overflow:hidden;";
      if (!g_bStretchCell)
         sHTML +="height:" + nDivHeight;
      else
         sHTML +="xvisiheight:" + nHeight;
        
      sHTML +=">~~G3U-6DBdvInfo</DIV></DIV>";
      _a[_c++] = sHTML;
   }
   else
   {
      _a[_c++] = "tag=";
      _a[_c++] = id;
      _a[_c++] = " ID=cell1";
      _a[_c++] = " NOWRAP=FALSE VALIGN=TOP double=";
      _a[_c++] = double;
      _a[_c++] = " HEIGHT=";
      if (SCHED_PARAMS.viewMode == 2)
         _a[_c] = 45;
      else
         _a[_c] = Math.floor(g_oTargetDocument.body.offsetHeight) - 90;
   
      var nDivHeight = double ? _a[_c] * 2 + 1: _a[_c];
      _c++;
      if ( (SCHED_PARAMS.timeSlots == 0) && (g_nRows > 1 || g_nCols > 1) )
      {
         _a[_c++] = " STYLE='background-color:white'>";
         _a[_c++] = " ONCLICK=onCalClick(this)>";
      }
      else
         _a[_c++] = ">";

      var nIdx = 0;
      htmlArray[nIdx++] = "<DIV ID=dvData";
      htmlArray[nIdx++] = id;
      if ( g_printON == 1) // ACR 435 Calendar Printing : Change the height while printing
      {
        //ACR 435 
        htmlArray[nIdx++] = " STYLE=width:100%;height:100%";
        htmlArray[nIdx++] = ";>";
      }
      else
      {
        htmlArray[nIdx++] = " STYLE=width:100%;height:";
        htmlArray[nIdx++] = nDivHeight;
        htmlArray[nIdx++] = ";overflow:hidden>";
      }
      

      // Slot header division
      if (SCHED_PARAMS.timeSlots > 1)
      {
         htmlArray[nIdx++] = "<DIV ID=dvHeader";
         htmlArray[nIdx++] = id;
         htmlArray[nIdx++] = " STYLE=background-color:white;width:100%;font-weight:bold;font-family:arial;font-size:8pt;color:";
         htmlArray[nIdx++] = SCHED_PARAMS.timeHeaderColorOff;
         htmlArray[nIdx++] = ";height:24;text-align:left></DIV>";
         nDivHeight -= g_nHeaderLabelHeight;
      }

      // Multi-day data division
      htmlArray[nIdx++] = "<DIV ID=dvTop";
      htmlArray[nIdx++] = id;
      
      if (g_bRTLWindow)
      {
         var rightPadding = g_nTimeSlotWidth + 1;
         htmlArray[nIdx++] = " STYLE=width:100%;padding-left:" + g_nScrollBarWidth + "px;padding-right:" + rightPadding + "px;overflow:auto;visibility:hidden><TABLE ID=tbTop CELLPADDING=0 CELLSPACING=0 WIDTH=100%></TABLE>";
      }
      else
      {
         var leftPadding = g_nTimeSlotWidth + 1;
         htmlArray[nIdx++] = " STYLE=width:100%;padding-left:" + leftPadding + "px;padding-right:" + g_nScrollBarWidth + "px;overflow:auto;visibility:hidden><TABLE ID=tbTop CELLPADDING=0 CELLSPACING=0 WIDTH=100%></TABLE>";
      }
     
      htmlArray[nIdx++] = "</DIV>";

      // Single-day data division (slot data)
      var of = (SCHED_PARAMS.timeSlots > 0) ? "auto" : "hidden";

      htmlArray[nIdx++] = "<DIV ID=dvInfo";
      htmlArray[nIdx++] = id;
      htmlArray[nIdx++] = " STYLE=height:";
      htmlArray[nIdx++] = nDivHeight;
      if ( g_printON == 1)
      {
        htmlArray[nIdx++] = ";width:100%;";  //ACR 435 If Printing is ON  , no overflow
      }
      else
      {
        htmlArray[nIdx++] = ";width:100%;overflow:";
        htmlArray[nIdx++] = of;
      }
     
      htmlArray[nIdx++] = "><TABLE ID=tbData";
      htmlArray[nIdx++] = id;
      htmlArray[nIdx++] = " CELLPADDING=0 HEIGHT=100% WIDTH=100% BGCOLOR=#afeee></TABLE></DIV></DIV>";
      
      _a[_c++] = htmlArray.join ("");
   }
   _a[_c++] = "</TD>";
   return _a.join("");
}


//
// Enable or disable the early/late indicator when scrolls vertically
//
function onTimeSlotScroll ()
{
   if (g_oTargetDocument.getElementById("dvInfo0") == null || _aHICGlobal["HIC_SkipTimeScroll"] == "1")
      return;
      
   var i, j, k;
   var oElement;
   var nDiff, nRow, nStartRow, nEndRow, nLeft, nTop, nHeader;
   var nScrollTop = g_oTargetDocument.getElementById("dvInfo0").scrollTop;
   var count      = 0;

   var bHadEarlyAppointment   = false;
   var bHadLateAppointment    = false;

   if (_aHICGlobal["HIC_nStartBusDayPos"] == null)
      _aHICGlobal["HIC_nStartBusDayPos"] = nScrollTop;

   nHeader = g_oTargetDocument.getElementById("dvTop0").offsetHeight + 4;
   if (SCHED_PARAMS.viewMode == 1)
      nHeader += _aHICGlobal["HIC_aHeaderDivs"][0].offsetHeight;

   nTop = g_oTargetDocument.getElementById("tbCal").offsetTop + nHeader;

   oElement = g_oTargetDocument.getElementById("tbCal").parentElement;
   while (oElement != null)
   {
      nTop      += oElement.offsetTop;
      oElement   = oElement.parentElement;
   }

   nLeft      = _aHICGlobal["HIC_aTimeCells"][0].offsetLeft;
   oElement   = _aHICGlobal["HIC_aTimeCells"][0].parentElement;

   while (oElement != null)
   {
      nLeft      += oElement.offsetLeft;
      oElement   = oElement.parentElement;
   }

   if (g_oTargetDocument.body.scrollTop >= nTop)
      nScrollTop += g_oTargetDocument.body.scrollTop - nTop;

   nRow        = g_nMinutesInDay / SCHED_PARAMS.slotTimeInterval;
   nDiff       = (_aHICGlobal["HIC_nStartBusDayPos"] - nScrollTop) / 19;
   nStartRow   = (nDiff < 0) ? _aHICGlobal["HIC_nStartBusDayRow"] + Math.floor(Math.abs(nDiff)) : _aHICGlobal["HIC_nStartBusDayRow"] - Math.floor(nDiff) - 1;
   nEndRow     = nStartRow + Math.floor((g_oTargetDocument.getElementById("tbMainH").offsetHeight - g_oTargetDocument.getElementById("dvTop0").offsetHeight - ((SCHED_PARAMS.timeSlots > 1) ? g_oTargetDocument.getElementById("dvHeader0").offsetHeight : 0)) / 19);

   _aHICGlobal["HIC_nTopClientCo"]     = nTop + 8 - g_oTargetDocument.body.scrollTop
   _aHICGlobal["HIC_nBottomClientCo"]  = nTop + g_oTargetDocument.getElementById("tbCal").offsetHeight - nHeader - g_oTargetDocument.body.scrollTop;

   if (nStartRow >= nEndRow)
      return;

   if (_aHICGlobal["HIC_aAppointment"][nStartRow] == null)   // current appointment doesn't count
      count++;

Early:
   for (i=nStartRow; i>=0; i--)
   {
      for (j=0; j<SCHED_PARAMS.timeSlots; j++)
      {
         for (k=0; k<=_aHICGlobal["HIC_nSlotSize"]; k++)
         {
            if (_aHICGlobal["HIC_aAppointment"][i] != null)
            {
               if (_aHICGlobal["HIC_aAppointment"][i][j] != null)
               {
                  if (_aHICGlobal["HIC_aAppointment"][i][j][k] == 1)
                  {
                     if (count++ > 0)
                     {
                        bHadEarlyAppointment = true;
                        break Early;
                     }
                  }
               }
            }
         }
      }
   }

   count = 1;
   if (_aHICGlobal["HIC_aAppointment"][nEndRow] == null)
      count++;

Late:
   for (i=nEndRow+1; i<=nRow; i++)
   {
      for (j=0; j<SCHED_PARAMS.timeSlots; j++)
      {
         for (k=0; k<_aHICGlobal["HIC_nSlotSize"]; k++)
         {
            if (_aHICGlobal["HIC_aAppointment"][i] != null)
            {
               if (_aHICGlobal["HIC_aAppointment"][i][j] != null)
               {
                  if (_aHICGlobal["HIC_aAppointment"][i][j][k] == 1)
                  {
                     if (count++ > 0)
                     {
                        bHadLateAppointment = true;
                        break Late;
                     }
                  }
               }
            }
         }
      }
   }
   
   if (bHadEarlyAppointment)
   {
      if (g_oEarlyIndicator.style.visibility = "hidden")
      {
         g_oEarlyIndicator.style.top          = nTop - 3;
         g_oEarlyIndicator.style.left         = nLeft + _aHICGlobal["HIC_aTimeCells"][0].offsetWidth - 16;
         g_oEarlyIndicator.style.width        = 12;
         g_oEarlyIndicator.style.pixelHeight  = 11;
         g_oEarlyIndicator.style.visibility   = "visible";
      }
   }
   else
      g_oEarlyIndicator.style.visibility = "hidden";

   if (bHadLateAppointment)
   {
      if (g_oLateIndicator.style.visibility = "hidden")
      {
         g_oLateIndicator.style.top           = nTop + g_oTargetDocument.getElementById("tbCal").offsetHeight - nHeader - 11;
         g_oLateIndicator.style.left          = nLeft + _aHICGlobal["HIC_aTimeCells"][0].offsetWidth - 16;
         g_oLateIndicator.style.width         = 12;
         g_oLateIndicator.style.pixelHeight   = 11;
         g_oLateIndicator.style.visibility    = "visible";
      }
   }
   else
      g_oLateIndicator.style.visibility = "hidden";
}

function ReplaceDayMonthNames ()
{
   // This method is used to replace the Day/Month Names in the 7 day weekly calendar to effect localization changes.
   var dayInWeekCounter;
   
   for (dayInWeekCounter = 0; dayInWeekCounter < 7; dayInWeekCounter++)
   {
      // InnerHTML here: g_oTargetDocument.getElementById("dvData" + x).childNodes[0].innerHTML
      // contains HTML formatting for the dates.
      // We need to preserve the HTML formatting. Hence we save up the HTML part.
      var tempInnerHTML = g_oTargetDocument.getElementById("dvData" + dayInWeekCounter).childNodes[0].innerHTML;
      // FR 12-1Y6L40F: In other format than ENU, the month name will be shown as the last 3 letters of the month name.
      // FR 12-1Y6L40F: Start modification
      tempInnerHTML = tempInnerHTML.replace("Sunday",g_aWeekDaysStringArray[0]);
      tempInnerHTML = tempInnerHTML.replace("Monday",g_aWeekDaysStringArray[1]);
      tempInnerHTML = tempInnerHTML.replace("Tuesday",g_aWeekDaysStringArray[2]);
      tempInnerHTML = tempInnerHTML.replace("Wednesday",g_aWeekDaysStringArray[3]);
      tempInnerHTML = tempInnerHTML.replace("Thursday",g_aWeekDaysStringArray[4]);
      tempInnerHTML = tempInnerHTML.replace("Friday",g_aWeekDaysStringArray[5]);
      tempInnerHTML = tempInnerHTML.replace("Saturday",g_aWeekDaysStringArray[6]);
      tempInnerHTML = tempInnerHTML.replace("January",g_aMonthStringArray[0]);
      tempInnerHTML = tempInnerHTML.replace("February",g_aMonthStringArray[1]);
      tempInnerHTML = tempInnerHTML.replace("March",g_aMonthStringArray[2]);
      tempInnerHTML = tempInnerHTML.replace("April",g_aMonthStringArray[3]);
      tempInnerHTML = tempInnerHTML.replace("May",g_aMonthStringArray[4]);
      tempInnerHTML = tempInnerHTML.replace("June",g_aMonthStringArray[5]);
      tempInnerHTML = tempInnerHTML.replace("July",g_aMonthStringArray[6]);
      tempInnerHTML = tempInnerHTML.replace("August",g_aMonthStringArray[7]);
      tempInnerHTML = tempInnerHTML.replace("September",g_aMonthStringArray[8]);
      tempInnerHTML = tempInnerHTML.replace("October",g_aMonthStringArray[9]);
      tempInnerHTML = tempInnerHTML.replace("November",g_aMonthStringArray[10]);
      tempInnerHTML = tempInnerHTML.replace("December",g_aMonthStringArray[11]);
      g_oTargetDocument.getElementById("dvData" + dayInWeekCounter).childNodes[0].innerHTML = tempInnerHTML
      // FR 12-1Y6L40F: End modification      
   }
}



function highlightDay (id)
{
   if (id < 0)
      return;
  
   if (SCHED_PARAMS.viewMode == 1 && SCHED_PARAMS.duration == 5)
      highlightHeader (id, true);
   else
   { 
      var dayHeader                    = g_oTargetDocument.getElementById("dvHeader" + id);
      var dayHeaderText                = dayHeader.childNodes[0];
     
      dayHeader.style.backgroundColor  = "#6666cc";
      dayHeaderText.style.color        = "white";

      var dayData                      = g_oTargetDocument.getElementById("dvData" + id);
      
      if (g_bStretchCell)
         dayData.style.pixelHeight = dayData.parentElement.offsetHeight;

      dayData.style.borderLeft         = "1px solid #6666cc";
      dayData.style.borderRight        = "1px solid #6666cc";
      dayData.style.borderBottom       = "1px solid #6666cc";
   }
}


function unhighlightDay (id)
{
   if (id < 0)
      return;
      
   if (SCHED_PARAMS.viewMode == 1 && SCHED_PARAMS.duration == 5)
      highlightHeader (id, false);
   else
   { 
      var dayHeader                    = g_oTargetDocument.getElementById("dvHeader" + id);
      var dayHeaderText                = g_oTargetDocument.getElementById("dvHeader" + id).childNodes[0];
      
      dayHeader.style.backgroundColor  = SCHED_PARAMS.currentDayBgColor;
      dayHeaderText.style.color        = SCHED_PARAMS.timeHeaderBgColorOn;
      
      var dayData                      = g_oTargetDocument.getElementById("dvData" + id);
      dayData.style.borderLeft         = "";
      dayData.style.borderRight        = "";
      dayData.style.borderBottom       = "";
   }
}


function onCalClick (obj)
{
   if (SCHED_PARAMS.dateRange[obj.tag] != null)
      SCHED_PARAMS.selectedDay = SCHED_PARAMS.dateRange[obj.tag];
   
   setDatePickerDisplay(SCHED_PARAMS.selectedDay);
    
   var id = parseInt(obj.tag);
   
   if (g_nSelectedDay != id)
   {
      unhighlightDay (g_nSelectedDay);
      highlightDay (id);
   
      g_nSelectedDay = id;
   }
}


function onItemMouseOver (param)
{
   var obj, sTemp, nTemp;

   if (param == null)
   {
      obj     = this;
      sTemp   = this.innerHTML;
   }
   else
   {
      if (typeof(param) == "object")
      {
         obj     = param;
         sTemp   = param.innerHTML;
      }
      else
      {
         obj     = _aHICGlobal["HIC_aHeaderDivs"][param];
      }
   }
}

//
// Pack record data for daily and 5 day weekly views
//    - Each element of the array contains records for a column
//
function createDataArray (data)
{
   var nNumTimeSlots = g_nMinutesInDay / SCHED_PARAMS.slotTimeInterval;
   var aData = data;
   
   aData[-1] = 0;
   
   // Loop through the columns
   for (var i = 0; i < SCHED_PARAMS.timeSlots; i++)
   {
      var aTemp   = aData[i];
      var aDocs   = new Array();
      var aRows   = new Array();
         
      aData[i] = new Array();

      aData[i][-1] = 1;

      for (var d = 0; d < aTemp.length; d = d + 6)
         aDocs[aDocs.length] = new docInfo(aTemp[d], aTemp[d+1], aTemp[d+2], aTemp[d+3], aTemp[d+4], aTemp[d+5]);

      aDocs.sort (new Function("a","b","return (a.nStart-b.nStart)"));
      
      for (var r = 0; r < nNumTimeSlots; r++)
         aRows[r] = 0;
         
      for (var doc in aDocs)
      {
         for (var nSlot = aDocs[doc].nStart; nSlot < aDocs[doc].nEnd; nSlot++)
            aRows[nSlot]++;
      }
         
      for (var r in aRows)
      {
         if ((aData[i][-1] == null) || (aData[i][-1] < aRows[r]))
            aData[i][-1] = aRows[r];
      }
      
      //FR12-1NKJK3F
      if (g_bUse5DayCache && SCHED_PARAMS.timeSlots == 5 && aData[-1] == 0 )
      {
         if (aData[i][-1] > 1)
         {
            aData[-1] = 1;
         }
      }

      for (var r = 0; r < nNumTimeSlots; r++)
         aData[i][r] = new Array();
         
      for (var d = 0; d < aDocs.length; d++)
      {
         var vslot;

         for (vslot = 0; vslot < aData[i][-1]; vslot++)
         {
            var bFits = true;

            for (var nSlot = aDocs[d].nStart; nSlot < aDocs[d].nEnd; nSlot++)
            {
               if (aData[i][nSlot][vslot] != null)
               {
                  bFits = false;
                  break;
               }
            }
            
            if (bFits) break;
         }

         aDocs[d].vSlot = vslot;
         aData[i][aDocs[d].nStart][vslot] = new slotInfo(1, aDocs[d].nSpan, aDocs[d].sConGUID, aDocs[d].sDocGUID, aDocs[d].sOptions, aDocs[d].sData);

         for (var nHSlot = aDocs[d].nStart + 1; nHSlot < aDocs[d].nEnd; nHSlot++)
            aData[i][nHSlot][vslot] = "FILLED";
      }

      for (var d = 0; d < aDocs.length; d++)
      {
         for (var v = aDocs[d].vSlot + 1; v < aData[i][-1]; v++)
         {
            var bFits = true;

            for (var m = aDocs[d].nStart; m < aDocs[d].nStart + aDocs[d].nSpan; m++)
            {
               if (aData[i][m][v] != null)
               {
                  bFits = false;
                  break;
               }
            }

            if (!bFits)
               break;

            aData[i][aDocs[d].nStart][aDocs[d].vSlot].nColSpan++;

            for (var m = aDocs[d].nStart; m < aDocs[d].nStart + aDocs[d].nSpan; m++)
               aData[i][m][v] = "FILLED";
         }
      }

      for (var r = 0; r < nNumTimeSlots; r++)
      {
         for (var s = 0; s < aData[i][-1]; s++)
         {
            if (aData[i][r][s] == null)
            {
               var colspan = 1;
                  
               for (var t = s + 1; t < aData[i][-1]; t++)
               {
                  if (aData[i][r][t] != null)
                     break;
                  
                  data[-1] = 1;
                  colspan++;
               }

               aData[i][r][s] = new slotInfo(colspan, 1);
                  
               s += colspan - 1;
            }
         }
      }
   }
   
   return aData;
}


function getRowNumber (eventObj, sourceObj)
{
   var row    = 0;
   var temp   = 0;
   row = Math.floor(eventObj.offsetY/18);
   row += Number(sourceObj.rowNumber);
   
   if (row < 0)
   {
		// Force row value to '0' if we encounter a negative row value.
		row = 0;
   }
   // FR 12-1GRVZMV
   // Daily Mode is selected.
   if ( SCHED_PARAMS.viewMode == 0 )
   {
		// If the user clicks outside the client area the 'Y offset' value is garbled that results in 
		// a wrong row value.
		if ( row > g_nMinutesInDay / SCHED_PARAMS.slotTimeInterval )
			row = Number(sourceObj.rowNumber);
   }
   return row;
}

function onSchedMouseDown (forceslot, forcerow, flag, event, sourceObj)
{
   // Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
   if (_aHICGlobal["HIC_DraggingActivityBoundary"])
      return;

   if (g_bNoInsert || g_bNoUpdate)
      return;

   if (!ActivateApplet ())
      return;
      
   if (typeof(event.srcElement) != 'undefined')
      if (event.srcElement.id == 'dragimg')   
         return;

   g_oTargetDocument.selection.empty();

   if (event.button == 1)
   {
      var row  = Number((forcerow == null) ? sourceObj.rowNumber : forcerow);
      var slot = (forceslot == null) ? sourceObj.timeSlot : forceslot;

      if (_aHICGlobal["HIC_aUsers"].length == 1)
      {
         clearAllBlanks ();

         _aHICGlobal["HIC_aHighlight"] = new Array();

         _aHICGlobal["HIC_aTimeCells"][row].style.backgroundColor = "#6666cc"
         _aHICGlobal["HIC_aTimeCells"][row].style.color = "white"

         if (SCHED_PARAMS.viewMode == 1 && SCHED_PARAMS.duration == 5)
            _aHICGlobal["HIC_b5DayTimeSlot_Click"] = true;

         highlightHeader (slot, true);
         highlightRow (slot, row, true);

         _aHICGlobal["HIC_SchedDrag"]           = true;
         _aHICGlobal["HIC_SchedSelection"]      = true;
         _aHICGlobal["HIC_SchedDragStartRow"]   = row;
         _aHICGlobal["HIC_SchedDragStartSlot"]  = slot;
         _aHICGlobal["HIC_SchedDragLastRow"]    = _aHICGlobal["HIC_SchedDragStartRow"];
         _aHICGlobal["HIC_SchedDragLastSlot"]   = _aHICGlobal["HIC_SchedDragStartSlot"];
      }
      else if (slot != _aHICGlobal["HIC_SchedDragStartSlot"])
      {
         _aHICGlobal["HIC_SchedSelection"] = false;
         updateHighlight (slot);
      }
   }
   
   if ((_aHICGlobal["HIC_nDoResize"] == 0) && (SCHED_PARAMS.viewMode == 1) && (g_nWeeklyMode == 1))
      onResize ();
}

function onSchedMouseDownEx (eventObj, sourceObj)
{
   // Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
   if (_aHICGlobal["HIC_DraggingActivityBoundary"])
      return;
      
   if (g_bNoInsert || g_bNoUpdate)
      return;

   if (eventObj.button == 1)
   {
      var row = getRowNumber (eventObj,sourceObj);
      onSchedMouseDown (null, row, true, eventObj, sourceObj);
   }
}

function onSchedMouseMove (forceslot, forcerow, event, sourceObj)
{
   var currRow    = Number((forcerow == null) ? sourceObj.rowNumber : forcerow);
   var currSlot   = (forceslot == null) ? sourceObj.timeSlot : forceslot;
   // Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
   if (_aHICGlobal["HIC_DraggingActivityBoundary"])
      return;   
   if (g_oTargetDocument.activeElement    == null ||
       g_oTargetDocument.activeElement    == 'undefined' ||
       g_oTargetDocument.activeElement.id != 'inputInPlace')
   {
      g_oTargetDocument.selection.empty();
   }
   
   if (_aHICGlobal["HIC_SchedDrag"])
   {
      if (_aHICGlobal["HIC_aUsers"].length == 1)
         currSlot = _aHICGlobal["HIC_SchedDragStartSlot"];

      if (currRow != _aHICGlobal["HIC_SchedDragLastRow"])
      {
         if (currRow > _aHICGlobal["HIC_SchedDragStartRow"])
         {
            clearAllBlanks("T");
               
            if (currRow > _aHICGlobal["HIC_SchedDragLastRow"])
            {
               for (var row = _aHICGlobal["HIC_SchedDragLastRow"] + 1; row <= currRow; row++)
               {
                  if (currSlot > _aHICGlobal["HIC_SchedDragStartSlot"])
                  {
                     for (var slot = _aHICGlobal["HIC_SchedDragStartSlot"]; slot <= currSlot; slot++)
                        highlightRow(slot, row, true);
                  }
                  else
                  {
                     for (var slot = _aHICGlobal["HIC_SchedDragStartSlot"]; slot >= currSlot; slot--)
                        highlightRow(slot, row, true);
                  }

                  _aHICGlobal["HIC_aTimeCells"][row].style.backgroundColor = "#6666cc"
                  _aHICGlobal["HIC_aTimeCells"][row].style.color = "white"
               }
            }
            else
            {
               for (var row = _aHICGlobal["HIC_SchedDragLastRow"]; row > currRow; row--)
               {
                  if (currSlot > _aHICGlobal["HIC_SchedDragStartSlot"])
                  {
                     for (var slot = _aHICGlobal["HIC_SchedDragStartSlot"]; slot <= currSlot; slot++)
                        highlightRow(slot, row, false);
                  }
                  else
                  {
                     for (var slot = _aHICGlobal["HIC_SchedDragStartSlot"]; slot >= currSlot; slot--)
                        highlightRow(slot, row, false);
                  }

                  _aHICGlobal["HIC_aTimeCells"][row].style.backgroundColor = "#9A9A9A"
                  _aHICGlobal["HIC_aTimeCells"][row].style.color = "#EEEEEE"
               }
            }
         }
         else if (currRow < _aHICGlobal["HIC_SchedDragStartRow"])
         {
            clearAllBlanks("B");
               
            if (currRow < _aHICGlobal["HIC_SchedDragLastRow"])
            {
               for (var row = _aHICGlobal["HIC_SchedDragLastRow"] - 1; row >= currRow; row--)
               {
                  if (currSlot > _aHICGlobal["HIC_SchedDragStartSlot"])
                  {
                     for (var slot = _aHICGlobal["HIC_SchedDragStartSlot"]; slot <= currSlot; slot++)
                        highlightRow(slot, row, true);
                  }
                  else
                  {
                     for (var slot = _aHICGlobal["HIC_SchedDragStartSlot"]; slot >= currSlot; slot--)
                        highlightRow(slot, row, true);
                  }

                  _aHICGlobal["HIC_aTimeCells"][row].style.backgroundColor = "#6666cc"
                  _aHICGlobal["HIC_aTimeCells"][row].style.color = "white"
               }
            }
            else
            {
               for (var row = _aHICGlobal["HIC_SchedDragLastRow"]; row < currRow; row++)
               {
                  if (currSlot > _aHICGlobal["HIC_SchedDragStartSlot"])
                  {
                     for (var slot = _aHICGlobal["HIC_SchedDragStartSlot"]; slot <= currSlot; slot++)
                        highlightRow(slot, row, false);
                  }
                  else
                  {
                     for (var slot = _aHICGlobal["HIC_SchedDragStartSlot"]; slot >= currSlot; slot--)
                        highlightRow(slot, row, false);
                  }

                  _aHICGlobal["HIC_aTimeCells"][row].style.backgroundColor = "#9A9A9A"
                  _aHICGlobal["HIC_aTimeCells"][row].style.color = "#EEEEEE"
               }
            }
         }
         else 
         {
            if (currSlot > _aHICGlobal["HIC_SchedDragStartSlot"])
            {
               for (var slot = _aHICGlobal["HIC_SchedDragStartSlot"]; slot <= currSlot; slot++)
                  highlightRow(slot, _aHICGlobal["HIC_SchedDragLastRow"], false);
            }
            else
            {
               for (var slot = _aHICGlobal["HIC_SchedDragStartSlot"]; slot >= currSlot; slot--)
                  highlightRow(slot, _aHICGlobal["HIC_SchedDragLastRow"], false);
            }

            _aHICGlobal["HIC_aTimeCells"][_aHICGlobal["HIC_SchedDragLastRow"]].style.backgroundColor = "#9A9A9A"
            _aHICGlobal["HIC_aTimeCells"][_aHICGlobal["HIC_SchedDragLastRow"]].style.color = "#EEEEEE"
         }

         _aHICGlobal["HIC_SchedSelection"] = false;
      }
      
      if ((currSlot != _aHICGlobal["HIC_SchedDragLastSlot"]) && (_aHICGlobal["HIC_aUsers"].length > 1))
      {
         if (currSlot > _aHICGlobal["HIC_SchedDragStartSlot"])
         {
            clearAllBlanks("L");
               
            if (currSlot > _aHICGlobal["HIC_SchedDragLastSlot"])
            {
               for (var slot = _aHICGlobal["HIC_SchedDragLastSlot"] + 1; slot <= currSlot; slot++)
               {
                  if (currRow >= _aHICGlobal["HIC_SchedDragStartRow"])
                  {
                     for (var row = _aHICGlobal["HIC_SchedDragStartRow"]; row <= currRow; row++)
                     {
                        highlightHeader(slot, true);
                        highlightRow(slot, row, true);
                     }
                  }
                  else
                  {
                     for (var row = _aHICGlobal["HIC_SchedDragStartRow"]; row >= currRow; row--)
                     {
                        highlightHeader(slot, true);
                        highlightRow(slot, row, true);
                     }
                  }
               }
            }
            else
            {
               for (var slot = _aHICGlobal["HIC_SchedDragLastSlot"]; slot > currSlot; slot--)
               {
                  if (currRow >= _aHICGlobal["HIC_SchedDragStartRow"])
                  {
                     for (var row = _aHICGlobal["HIC_SchedDragStartRow"]; row <= currRow; row++)
                     {
                        highlightHeader(slot, false);
                        highlightRow(slot, row, false);
                     }
                  }
                  else
                  {
                     for (var row = _aHICGlobal["HIC_SchedDragStartRow"]; row >= currRow; row--)
                     {
                        highlightHeader(slot, false);
                        highlightRow(slot, row, false);
                     }
                  }
               }
            }
         }
         else if (currSlot < _aHICGlobal["HIC_SchedDragStartSlot"])
         {
            clearAllBlanks("R");
               
            if (currSlot < _aHICGlobal["HIC_SchedDragLastSlot"])
            {
               for (var slot = _aHICGlobal["HIC_SchedDragLastSlot"] - 1; slot >= currSlot; slot--)
               {
                  if (currRow >= _aHICGlobal["HIC_SchedDragStartRow"])
                  {
                     for (var row = _aHICGlobal["HIC_SchedDragStartRow"]; row <= currRow; row++)
                     {
                        highlightHeader(slot, true);
                        highlightRow(slot, row, true);
                     }
                  }
                  else
                  {
                     for (var row = _aHICGlobal["HIC_SchedDragStartRow"]; row >= currRow; row--)
                     {
                        highlightHeader(slot, true);
                        highlightRow(slot, row, true);
                     }
                  }
               }
            }
            else if (currSlot > _aHICGlobal["HIC_SchedDragLastSlot"])
            {
               for (var slot = _aHICGlobal["HIC_SchedDragLastSlot"]; slot < currSlot; slot++)
               {
                  if (currRow >= _aHICGlobal["HIC_SchedDragStartRow"])
                  {
                     for (var row = _aHICGlobal["HIC_SchedDragStartRow"]; row <= currRow; row++)
                     {
                        highlightHeader(slot, false);
                        highlightRow(slot, row, false);
                     }
                  }
                  else
                  {
                     for (var row = _aHICGlobal["HIC_SchedDragStartRow"]; row >= currRow; row--)
                     {
                        highlightHeader(slot, false);
                        highlightRow(slot, row, false);
                     }
                  }
               }
            }
         }
         else 
         {
            if (currRow >= _aHICGlobal["HIC_SchedDragStartRow"])
            {
               for (var row = _aHICGlobal["HIC_SchedDragStartRow"]; row <= currRow; row++)
               {
                  highlightHeader(_aHICGlobal["HIC_SchedDragLastSlot"], false);
                  highlightRow(_aHICGlobal["HIC_SchedDragLastSlot"], row, false);
               }
            }
            else
            {
               for (var row = _aHICGlobal["HIC_SchedDragStartRow"]; row >= currRow; row--)
               {
                  highlightHeader(_aHICGlobal["HIC_SchedDragLastSlot"], false);
                  highlightRow(_aHICGlobal["HIC_SchedDragLastSlot"], row, false);
               }
            }
         }

         _aHICGlobal["HIC_SchedSelection"] = false;
      }
      
      _aHICGlobal["HIC_SchedDragLastRow"] = currRow;
      _aHICGlobal["HIC_SchedDragLastSlot"]= currSlot;
   }
}

function onSchedMouseMoveEx (eventObj, sourceObj)
{
   // Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
   if (_aHICGlobal["HIC_DraggingActivityBoundary"])
      return;
      
   if (_aHICGlobal["HIC_SchedDrag"])
   {
      var row = getRowNumber (eventObj,sourceObj);
      onSchedMouseMove (null, row, eventObj, sourceObj);
   }

   if (eventObj.button == 1)
   {
      if( _aHICGlobal["HIC_DraggingStretchItemDown"] && eventObj.clientY < _aHICGlobal["HIC_nBottomClientCo"])
      {
         var height = _aHICGlobal["HIC_StartStretchCellHeight"] + Math.floor((Number(eventObj.clientY) - _aHICGlobal["HIC_StartStretchY"])*19)/19
         if (height > 0)
            _aHICGlobal["HIC_oIndicator"].style.pixelHeight = height
      }

      if( _aHICGlobal["HIC_DraggingStretchItemUp"] && eventObj.clientY < _aHICGlobal["HIC_MaxStretchY"] && eventObj.clientY > _aHICGlobal["HIC_nTopClientCo"])
      {
         var oldPixelTop = _aHICGlobal["HIC_oIndicator"].style.pixelTop 
         _aHICGlobal["HIC_oIndicator"].style.pixelTop = _aHICGlobal["HIC_StartStretchY"] + Math.floor((Number(eventObj.clientY) + g_oTargetDocument.body.scrollTop - _aHICGlobal["HIC_StartStretchY"])/19)*19 - 2 
         _aHICGlobal["HIC_oIndicator"].style.pixelHeight = _aHICGlobal["HIC_oIndicator"].style.pixelHeight + oldPixelTop - _aHICGlobal["HIC_oIndicator"].style.pixelTop
      }
   }
}

function onSchedMouseUp ()
{
   g_oTargetDocument.selection.empty();

   if (_aHICGlobal["HIC_SchedDrag"])
   {
      setHighlightInfo ();
      _aHICGlobal["HIC_SchedDrag"] = null;
   }
   if (_aHICGlobal["HIC_DraggingStretchItemUp"] || _aHICGlobal["HIC_DraggingStretchItemDown"])
   {
      EndStretchRelease ();
      _aHICGlobal["HIC_DraggingStretchItemUp"] = false;
      _aHICGlobal["HIC_DraggingStretchItemDown"] = false;
   }
}

function highlightHeader (timeslot, flag)
{
   if (SCHED_PARAMS.timeSlots > 1)
   {
      var dvHeader = g_oTargetDocument.getElementById("dvSlot" + timeslot);

      dvHeader.style.backgroundColor   = flag ? "#6666cc" : GetUserProp ("Background Color");
      dvHeader.style.color             = flag ? "white" : "black";

      if (flag)
      {
         SCHED_PARAMS.selectedDay = SCHED_PARAMS.dateRange[timeslot];
         g_nSelectedDay = timeslot;
      }
   }
}

function highlightRow (timeslot, row, flag)
{
   if ((_aHICGlobal["HIC_aBlankCells"][timeslot] != null) && (_aHICGlobal["HIC_aBlankCells"][timeslot][row] != null))
   {
      for (var k in _aHICGlobal["HIC_aBlankCells"][timeslot][row])
         HIC_DataTable.rows[row].cells[_aHICGlobal["HIC_aBlankCells"][timeslot][row][k]].style.backgroundColor = flag ? "#6666cc" : HIC_DataTable.rows[row].cells[_aHICGlobal["HIC_aBlankCells"][timeslot][row][k]].originalColor;
   }

   if (_aHICGlobal["HIC_aHighlight"][row] == null)
      _aHICGlobal["HIC_aHighlight"][row] = new Array();

   _aHICGlobal["HIC_aHighlight"][row][timeslot] = flag ? 1 : null;
}

function updateHighlight (timeslot)
{
   for (var row in _aHICGlobal["HIC_aHighlight"])
   {
      if (_aHICGlobal["HIC_aHighlight"][row][_aHICGlobal["HIC_SchedDragStartSlot"]] != null)
      {
         highlightHeader(timeslot, (_aHICGlobal["HIC_aHighlight"][row][timeslot] == null));
         highlightRow(timeslot, row, (_aHICGlobal["HIC_aHighlight"][row][timeslot] == null));
      }
   }
   
   setHighlightInfo ();
}

function clearAllBlanks (flag, excludeheaders)
{
   for (var i in _aHICGlobal["HIC_aBlankCells"])
   {
      if ( (flag == null) || (flag == "T") || (flag == "B") || ((flag == "L") && (i < _aHICGlobal["HIC_SchedDragStartSlot"])) || ((flag == "R") && (i > _aHICGlobal["HIC_SchedDragStartSlot"])) )
      {
         for (var j in _aHICGlobal["HIC_aBlankCells"][i])
         {
            if ( (flag == null) || (flag == "R") || (flag == "L") || ((flag == "T") && (j < _aHICGlobal["HIC_SchedDragStartRow"])) || ((flag == "B") && (j > _aHICGlobal["HIC_SchedDragStartRow"])) )
            {
               for (var k in _aHICGlobal["HIC_aBlankCells"][i][j])
                  HIC_DataTable.rows[j].cells[_aHICGlobal["HIC_aBlankCells"][i][j][k]].style.backgroundColor = HIC_DataTable.rows[j].cells[_aHICGlobal["HIC_aBlankCells"][i][j][k]].originalColor;
            }
         }
      }
   }

   for (var h = 0; h < SCHED_PARAMS.timeSlots; h++)
   {
      if (excludeheaders != true)
      {
         if ( (flag == null) || ((flag == "L") && (h < _aHICGlobal["HIC_SchedDragStartSlot"])) || ((flag == "R") && (h > _aHICGlobal["HIC_SchedDragStartSlot"])) )
            highlightHeader(h, false);
      }
   }

   if (typeof(_aHICGlobal["HIC_aTimeCells"]) == "object")
   {
      for (var r = 0; r < g_nMinutesInDay / SCHED_PARAMS.slotTimeInterval; r++)
      {
         if ( (flag == null) || ((flag == "T") && (r < _aHICGlobal["HIC_SchedDragStartRow"])) || ((flag == "B") && (r > _aHICGlobal["HIC_SchedDragStartRow"])) )
         {
            _aHICGlobal["HIC_aTimeCells"][r].style.backgroundColor = "#9A9A9A"
            _aHICGlobal["HIC_aTimeCells"][r].style.color = "#EEEEEE"
         }
      }
   }
}

function setHighlightInfo ()
{
   var startrow, endrow;
   var startslot, endslot;
   var bFound;
   var sUsers;

   for (var row in _aHICGlobal["HIC_aHighlight"])
   {
      row = Number(row);
      bFound = false;
      
      for (var slot in _aHICGlobal["HIC_aHighlight"][row])
      {
         if ((_aHICGlobal["HIC_aHighlight"][row][slot] != null) && (_aHICGlobal["HIC_aTimeCells"][row].style.backgroundColor == "#6666cc"))
         {
            bFound = true;
            break;
         }
      }
      
      if (bFound)
      {
         if ((startrow == null) || (row < startrow))
            startrow = row;

         if ((endrow == null) || (row > endrow))
            endrow = row;
      }
   }
   
   endrow++;

   if (_aHICGlobal["HIC_aUsers"].length > 1)
   {
      _aHICGlobal["HIC_dtStart"] = new Date(SCHED_PARAMS.dateRange[0].getFullYear(), SCHED_PARAMS.dateRange[0].getMonth(), SCHED_PARAMS.dateRange[0].getDate());
      _aHICGlobal["HIC_dtEnd"]   = new Date(SCHED_PARAMS.dateRange[0].getFullYear(), SCHED_PARAMS.dateRange[0].getMonth(), SCHED_PARAMS.dateRange[0].getDate());
      sUsers = "";
      
      for (var slot in _aHICGlobal["HIC_aHighlight"][startrow])
      {
         sUsers += (sUsers == "") ? "" : ",";
         sUsers += _aHICGlobal["HIC_aUsers"][slot].sUserGUID;
      }
   }
   else
   {
      for (var slot in _aHICGlobal["HIC_aHighlight"][startrow])
      {
         if ((startslot == null) || (slot < startslot))
            startslot = slot;

         if ((endslot == null) || (slot > endslot))
            endslot = slot;
      }
      
      //Bug#13463009: If startslot, endslot has null or undefined value, we set them to 0 
      //sometimes it does not go into the above 'for' loop and hence we need this if block outside the 'for' loop as well.
	  if ((startslot == null) || (slot < startslot) || (startslot == 'undefined'))
         startslot = slot;

      if ((endslot == null) || (slot > endslot) || (endslot == 'undefined') )
         endslot = slot;
         
      _aHICGlobal["HIC_dtStart"] = new Date(SCHED_PARAMS.dateRange[startslot].getFullYear(), SCHED_PARAMS.dateRange[startslot].getMonth(), SCHED_PARAMS.dateRange[startslot].getDate());
      _aHICGlobal["HIC_dtEnd"]   = new Date(SCHED_PARAMS.dateRange[startslot].getFullYear(), SCHED_PARAMS.dateRange[startslot].getMonth(), SCHED_PARAMS.dateRange[startslot].getDate());
      sUsers = _aHICGlobal["HIC_aUsers"][0].sUserGUID;
   }
   
   _aHICGlobal["HIC_dtStart"].setMinutes(_aHICGlobal["HIC_dtStart"].getMinutes() + startrow * SCHED_PARAMS.slotTimeInterval);
   _aHICGlobal["HIC_dtEnd"].setMinutes(_aHICGlobal["HIC_dtEnd"].getMinutes() + endrow * SCHED_PARAMS.slotTimeInterval);
}

function onTimeSlot (obj)
{
   if (g_bNoInsert)
      return;
      
   if (!ActivateApplet ())
      return;
   
   if (obj.style.backgroundColor != "#6666cc")
   {
      if (SCHED_PARAMS.dateRange.length > 1 && !_aHICGlobal["HIC_b5DayTimeSlot_Click"])
         return;

      var slotNumber, dateRangeNumber;
      var row = obj.rowNumber;
      var duration = GetUserProp ("Preferred Duration");

      duration = (duration == "") ? 30 : parseInt(duration,10);
      
      if (SCHED_PARAMS.dateRange.length > 1)
      {
         for (slotNumber = 0; slotNumber < 5; slotNumber++)
         {
            if (g_oTargetDocument.getElementById("dvSlot" + slotNumber).currentStyle.backgroundColor == "#6666cc")
               break;
         }
      }
      
      clearAllBlanks ();
      
      _aHICGlobal["HIC_aHighlight"] = new Array ();
      
      _aHICGlobal["HIC_aTimeCells"][row].style.backgroundColor = "#6666cc"
      _aHICGlobal["HIC_aTimeCells"][row].style.color = "white"
      
      if (SCHED_PARAMS.dateRange.length > 1)
      {
         highlightHeader(slotNumber, true);
         highlightRow(slotNumber, row, true);
         dateRangeNumber = slotNumber;
      }
      else
      {
         for (var slot = 0; slot < SCHED_PARAMS.timeSlots; slot++)
         {
            highlightHeader(slot, true);
            highlightRow(slot, row, true);
            dateRangeNumber = 0;
         }
      }
      
      _aHICGlobal["HIC_dtStart"]   = new Date(SCHED_PARAMS.dateRange[dateRangeNumber].getFullYear(), SCHED_PARAMS.dateRange[dateRangeNumber].getMonth(), SCHED_PARAMS.dateRange[dateRangeNumber].getDate());
      _aHICGlobal["HIC_dtEnd"]   = new Date(SCHED_PARAMS.dateRange[dateRangeNumber].getFullYear(), SCHED_PARAMS.dateRange[dateRangeNumber].getMonth(), SCHED_PARAMS.dateRange[dateRangeNumber].getDate());
      
      _aHICGlobal["HIC_dtStart"].setMinutes(_aHICGlobal["HIC_dtStart"].getMinutes() + row * SCHED_PARAMS.slotTimeInterval);
      _aHICGlobal["HIC_dtEnd"].setMinutes(_aHICGlobal["HIC_dtEnd"].getMinutes() + duration + row * SCHED_PARAMS.slotTimeInterval);
   }

   AddRecord (_aHICGlobal["HIC_dtStart"].HICtoDateString("MM/DD/YYYY HH:MM:SS"), _aHICGlobal["HIC_dtEnd"].HICtoDateString("MM/DD/YYYY HH:MM:SS"));
}

function addDates (dates)
{
   var count = SCHED_PARAMS.dateRange.length;

   for (var temp1 in dates)
   {
      var bFound   = false;
      var sDate   = dates[temp1].HICtoDateString("mm/dd/yyyy");
         
      for (var temp2 in SCHED_PARAMS.dateRange)
      {
         if (sDate == SCHED_PARAMS.dateRange[temp2].HICtoDateString("mm/dd/yyyy"))
         {
            bFound = true;
            break;
         }
      }
         
      if (!bFound)
         SCHED_PARAMS.dateRange[count++] = new Date(dates[temp1].getFullYear(), dates[temp1].getMonth(), dates[temp1].getDate());
   }

   SCHED_PARAMS.dateRange.sort(sortCriteria);
}

function sortCriteria (param1, param2)
{
   var data1 = new Date(param1);
   var data2 = new Date(param2);

   if (data1 < data2)
      return -1;
   else if (data1 > data2)
      return 1;
   else
      return 0;
}

function getDisplayDate ()
{
   if (SCHED_PARAMS.viewMode == 2)
      var sString = SCHED_PARAMS.dateRange[7].HICtoDateString("MMMM yyyy");
   else if (SCHED_PARAMS.viewMode == 1)
      var sString = SCHED_PARAMS.dateRange[0].HICtoDateString("MMMM dd") + " - " + SCHED_PARAMS.dateRange[6].HICtoDateString("MMMM dd");   
   else if (SCHED_PARAMS.viewMode == 0)
      var sString = SCHED_PARAMS.startDate.HICtoDateString("dddd, MMMM dd, yyyy");
   else
      var sString = "Multiple Dates";

   return sString;
}

function onPrevious ()
{
   if (!ActivateApplet ())
      return;
   
   switch (SCHED_PARAMS.viewMode)
   {
      case 0:
      {
         SCHED_PARAMS.selectedDay.decreaseDay ();
         break;      
      }
      case 1:
      {
         SCHED_PARAMS.selectedDay.decreaseDay(7);
         break;
      }
      case 2:
      {
         SCHED_PARAMS.selectedDay.decreaseMonth ();
         break;
      }
   }

   // CR# 12-1THO6TP: Specific workaround fix for countries that set their DST changes at 12:00AM
   // If selected day has 23:00, push it to next day.   
   var tempDateString = new String(SCHED_PARAMS.selectedDay);
   
   if (tempDateString.indexOf('23:00:00') != -1 
       && (tempDateString.indexOf('UTC-200') != -1 || tempDateString.indexOf('UTC-0200') != -1 ||                             // Only Brazil UTC -2/-3 as of now
           tempDateString.indexOf('UTC-300') != -1 || tempDateString.indexOf('UTC-0300') != -1))
   {
      SCHED_PARAMS.selectedDay = new Date(SCHED_PARAMS.selectedDay.getFullYear(), SCHED_PARAMS.selectedDay.getMonth(), SCHED_PARAMS.selectedDay.getDate() + 1);    // Make the required adjustments
      SCHED_PARAMS.selectedDay.setTime(SCHED_PARAMS.selectedDay.getTime() + 3600000);
   }   
   
   GetDateRange ();

   DoPopulate ();
}
   
function onNext ()
{
   if (!ActivateApplet ())
      return;

   switch (SCHED_PARAMS.viewMode)
   {
      case 0:
      {
         SCHED_PARAMS.selectedDay.increaseDay ();
         break;      
      }
      case 1:
      {
         SCHED_PARAMS.selectedDay.increaseDay(7);
         break;
      }
      case 2:
      {
         SCHED_PARAMS.selectedDay.increaseMonth (); 
         break;
      }
   }
   
   // CR# 12-1THO6TP: Specific workaround fix for countries that set their DST changes at 12:00AM
   // If selected day has 23:00, push it to next day.   
   var tempDateString = new String(SCHED_PARAMS.selectedDay);
   
   if (tempDateString.indexOf('23:00:00') != -1 
       && (tempDateString.indexOf('UTC-200') != -1 || tempDateString.indexOf('UTC-0200') != -1 ||                             // Only Brazil UTC -2/-3 as of now
           tempDateString.indexOf('UTC-300') != -1 || tempDateString.indexOf('UTC-0300') != -1))
   {
      SCHED_PARAMS.selectedDay = new Date(SCHED_PARAMS.selectedDay.getFullYear(), SCHED_PARAMS.selectedDay.getMonth(), SCHED_PARAMS.selectedDay.getDate() + 1);    // Make the required adjustments
      SCHED_PARAMS.selectedDay.setTime(SCHED_PARAMS.selectedDay.getTime() + 3600000);
   }   

   GetDateRange ();

   DoPopulate ();
}

function GetDateRangeFromBookmark (startDate, endDate)
{
   var dtLowBound = new Date(startDate);
   var dtHighBound = new Date(endDate);

   SCHED_PARAMS.startDate.copy(dtLowBound);
   SCHED_PARAMS.endDate.copy(dtHighBound);

   //get DateRange
   var count = 0;
   SCHED_PARAMS.dateRange = new Array ();

   while (dtLowBound < dtHighBound)
   {
      SCHED_PARAMS.dateRange[count++] = new Date(dtLowBound.getFullYear(), dtLowBound.getMonth(), dtLowBound.getDate());
      dtLowBound.increaseDay ();
   }
   
   //need duration
   SCHED_PARAMS.duration = count;

   //set SelectedDay
   g_nSelectedDay = -1;
      
   if (SCHED_PARAMS.viewMode != 0 && SCHED_PARAMS.duration >= 5)
   {
      var selectedDay = new Date (SCHED_PARAMS.selectedDay.getFullYear (),
                                  SCHED_PARAMS.selectedDay.getMonth (),
                                  SCHED_PARAMS.selectedDay.getDate ()).valueOf ();
         
      for (var i = 0; i < SCHED_PARAMS.dateRange.length; ++i)
      {
         if (SCHED_PARAMS.dateRange[i].valueOf () == selectedDay)
         {
            g_nSelectedDay = i;
            break;   
         }
      }
   }
}

//-------------------------------------------------------------------------------------------------
// Get date range based on the view mode and selected day
//-------------------------------------------------------------------------------------------------
function GetDateRange ()
{
   var dtLowBound = new Date(SCHED_PARAMS.selectedDay);
   var dtHighBound = new Date(SCHED_PARAMS.selectedDay);
   SCHED_PARAMS.duration = 1;
   SCHED_PARAMS.dateRange = new Array ();
   
   if (SCHED_PARAMS.viewMode > 0)
   {

      // CR# 12-1THO6TP: Specific workaround fix for countries that set their DST changes at 12:00AM
      // If selected day has 01:00 (this may come from one of the changes made in onnext, on previous or gotoday), and
      // they remain for other days, then we push them back here to 12:00
      var tempSelectedDay = new String(SCHED_PARAMS.selectedDay);
      if ((tempSelectedDay.indexOf('01:00:00') != -1)
          && (tempSelectedDay.indexOf('UTC-200') != -1 || tempSelectedDay.indexOf('UTC-0200') != -1 ||                             // Only Brazil UTC -2/-3 as of now
              tempSelectedDay.indexOf('UTC-300') != -1 || tempSelectedDay.indexOf('UTC-0300') != -1))
      {
         SCHED_PARAMS.selectedDay.setTime(SCHED_PARAMS.selectedDay.getTime() - 3600000);
         var tempSelectedDay2 = new String(SCHED_PARAMS.selectedDay);
         if (tempSelectedDay2.indexOf('23:00:00') != -1)
         {
            SCHED_PARAMS.selectedDay.setTime(SCHED_PARAMS.selectedDay.getTime() + 3600000);
         }
      }   

      while (dtLowBound.getDay() != SCHED_PARAMS.firstDay)
         dtLowBound.decreaseDay ();

      dtHighBound.copy(dtLowBound);
   
      if (SCHED_PARAMS.viewMode == 1)
      {
         if (g_nWeeklyMode == 0)
         {
            dtHighBound.increaseDay(6);
            SCHED_PARAMS.duration = 7;
         }
         else
         {
            dtHighBound.increaseDay(4);
            SCHED_PARAMS.duration = 5;
         }

         // for the case when selected day is not in the date range
         if (SCHED_PARAMS.selectedDay > dtHighBound)
            SCHED_PARAMS.selectedDay.copy(dtLowBound);

         // CR# 12-1THO6TP: We dont really care for the time in the date boundaries. Let's lose it! This helps us with Brazil DST. 
         var tempDate1 = new Date(dtLowBound.getFullYear(), dtLowBound.getMonth(), dtLowBound.getDate());
         dtLowBound = tempDate1;

      }

      if (SCHED_PARAMS.viewMode == 2)
      {
         dtHighBound.increaseDay(6);
         SCHED_PARAMS.duration = 7;

         var dtTemp = new Date(dtLowBound.getFullYear(), dtLowBound.getMonth(), dtLowBound.getDate() + 7);
            
         while ((dtTemp.getDate() != 1) && (dtHighBound.getMonth() == SCHED_PARAMS.selectedDay.getMonth()))
         {
            dtHighBound.increaseDay(7);
            dtTemp.increaseDay(7);
            SCHED_PARAMS.duration += 7;
         }

         while ((dtLowBound.getDate() != 1) && (dtLowBound.getMonth() == SCHED_PARAMS.selectedDay.getMonth()))
         {
            dtLowBound.decreaseDay(7);
            SCHED_PARAMS.duration += 7;
         }
         // CR# 12-1THO6TP: We dont really care for the time in the date boundaries. Let's lose it! This helps us with Brazil DST.
         var tempDate1 = new Date(dtLowBound.getFullYear(), dtLowBound.getMonth(), dtLowBound.getDate());
         dtLowBound = tempDate1;
      }
   }

   SCHED_PARAMS.startDate.copy(dtLowBound);
   SCHED_PARAMS.endDate.copy(dtHighBound);
   SCHED_PARAMS.endDate.increaseDay ();

   var count = 0;

   while (dtLowBound <= dtHighBound)
   {
      // CR# 12-1THO6TP: Specific workaround fix for countries that set their DST changes at 12:00AM
      // Really a Javascript API problem, which even on increasing the day, returns with the previous date after DST change.
      // Search if date x + 1 = date x + 23hours (eg: date Oct 17 00:00 + 1 day has resulted in Oct 17 23:00 instead of Oct 18 00:00)
      var tempDateString = new String(dtLowBound);
      
      if (tempDateString.indexOf('23:00:00') != -1                            
          && (tempDateString.indexOf('UTC-200') != -1 || tempDateString.indexOf('UTC-0200') != -1 ||                             // Only Brazil UTC -2/-3 as of now
              tempDateString.indexOf('UTC-300') != -1 || tempDateString.indexOf('UTC-0300') != -1 ||
	      tempDateString.indexOf('UTC') != -1 ||						                     		 // BUG 13082392: Also Casablanca UTC 0/+1
	      tempDateString.indexOf('UTC+100') != -1 || tempDateString.indexOf('UTC+0100') != -1))
      {
         SCHED_PARAMS.dateRange[count] = new Date(dtLowBound.getFullYear(), dtLowBound.getMonth(), dtLowBound.getDate() + 1);    // Make the required adjustments
         SCHED_PARAMS.dateRange[count].setTime(SCHED_PARAMS.dateRange[count].getTime() + 3600000);
      }   
      else
      {
         SCHED_PARAMS.dateRange[count] = new Date(dtLowBound.getFullYear(), dtLowBound.getMonth(), dtLowBound.getDate());
      }
      
      count++;
      dtLowBound.increaseDay();           
   }

   g_nSelectedDay = -1;
   
   if (SCHED_PARAMS.viewMode != 0 && SCHED_PARAMS.duration >= 5)
   {
      var selectedDay = new Date (SCHED_PARAMS.selectedDay.getFullYear (),
                                  SCHED_PARAMS.selectedDay.getMonth (),
                                  SCHED_PARAMS.selectedDay.getDate ()).valueOf ();
      
      for (var i = 0; i < SCHED_PARAMS.dateRange.length; ++i)
      {
         if (SCHED_PARAMS.dateRange[i].valueOf () == selectedDay)
         {
            g_nSelectedDay = i;
            break;   
         }
      }
   }
}

// day is either a date object, a date string, or null
function gotoDay (day)
{
   if (!ActivateApplet ())
      return;
      
   if (!g_bEnableDailyTab)
      return;
      
   g_nSelectedDay = -1;
   
   if (day != null)
   {
      SCHED_PARAMS.selectedDay = new Date(day);
      ChangeCalendarTab (0);
   }
   else if (SCHED_PARAMS.selectedDay != null)
   {
      ChangeCalendarTab (0);
   }
   else
   {   
      SCHED_PARAMS.selectedDay = new Date ();
      ChangeCalendarTab (3);
   }
      
   SCHED_PARAMS.viewMode = 0;
   SCHED_PARAMS.headers = null;
   _aHICGlobal["HIC_nStartBusDayPos"] = null;

   if (g_oEarlyIndicator   != null)
      g_oEarlyIndicator.style.visibility = "hidden";

   if (g_oLateIndicator != null)
      g_oLateIndicator.style.visibility = "hidden";

   // CR# 12-1THO6TP: Specific workaround fix for countries that set their DST changes at 12:00AM
   // If selected day has 23:00, push it to next day.
   var tempDateString = new String(SCHED_PARAMS.selectedDay);
   
   if (tempDateString.indexOf('23:00:00') != -1 
       && (tempDateString.indexOf('UTC-200') != -1 || tempDateString.indexOf('UTC-0200') != -1 ||                             // Only Brazil UTC -2/-3 as of now
           tempDateString.indexOf('UTC-300') != -1 || tempDateString.indexOf('UTC-0300') != -1))
   {
      SCHED_PARAMS.selectedDay = new Date(SCHED_PARAMS.selectedDay.getFullYear(), SCHED_PARAMS.selectedDay.getMonth(), SCHED_PARAMS.selectedDay.getDate() + 1);    // Make the required adjustments
      SCHED_PARAMS.selectedDay.setTime(SCHED_PARAMS.selectedDay.getTime() + 3600000);
   }   

   GetDateRange ();
   SCHED_PARAMS.duration = 1;

   DoPopulate ();
}

// day is either a date object, a date string, or null
function gotoWeek (day)
{
   if (!ActivateApplet ())
      return;
   
   g_nSelectedDay = -1;
   
   if (day != null)
      SCHED_PARAMS.selectedDay = new Date(day);

   ChangeCalendarTab (1);

   SCHED_PARAMS.viewMode = 1;
   SCHED_PARAMS.headers = null;
   _aHICGlobal["HIC_nStartBusDayPos"] = null;

   if (g_oEarlyIndicator   != null)
      g_oEarlyIndicator.style.visibility = "hidden";

   if (g_oLateIndicator != null)
      g_oLateIndicator.style.visibility = "hidden";

   GetDateRange ();
   
   DoPopulate ();
}

// day is either a date object, a date string, or null
function gotoMonth (day)
{
   if (!ActivateApplet ())
      return;
     
   g_nSelectedDay = -1;
   ChangeCalendarTab (2)

   SCHED_PARAMS.viewMode = 2;
   _aHICGlobal["HIC_nStartBusDayPos"] = null;

   if (g_oEarlyIndicator != null)
      g_oEarlyIndicator.style.visibility = "hidden";

   if (g_oLateIndicator != null)
      g_oLateIndicator.style.visibility = "hidden";

   GetDateRange ();
   
   DoPopulate ();
}

function onDrillDown (data)
{
   var propSet = NewPropertySet ();
   propSet.SetProperty ("Data", data);
   propSet.SetProperty ("CurrentDate", SCHED_PARAMS.selectedDay.HICtoDateString("mm/dd/yyyy"));
   propSet.SetProperty ("SelectedDate", SCHED_PARAMS.selectedDay.valueOf ());
   
   InvokeMethod ("DrillDown", propSet);
}

function onCallback (type, param)
{
   switch (type)
   {
      case 1:
      {
         var newSDate = new Date(param.year, param.month, param.day);
         SCHED_PARAMS.selectedDay.copy(newSDate);
         break;
      }
      case 2:
      {
         if (param > 0)
         {
            nStartMonth = nStartMonth + param;

            if (nStartMonth > 11)
            {
               nStartYear += Math.floor(nStartMonth / 12);
               nStartMonth = nStartMonth % 12;
            }
         }
         else
         {
            param *= (-1);
               
            var temp = param % 12;

            if (nStartMonth < temp)
            {
               nStartMonth = nStartMonth + 12 - temp;
               nStartYear--;
            }
            else
               nStartMonth = nStartMonth - temp;

            nStartYear -= Math.floor(param / 12);
         }

         nTempMonth  = nStartMonth;
         nTempYear   = nStartYear;
            
         for (i = 0; i < nCount; i++)
         {
            month = nTempMonth++ % 12;
               
            aCals[i].reset(month, nTempYear);

            if (month == 11)
               nTempYear++;
         }
         break;
      }
      case 3:
      {
         addDates(param);
         break;
      }
   }
}


function RenderMultiDayRecord (oDoc, sDate, eDate)
{
   var sBorder       = "1px solid black";
   var oHeaderDiv    = g_oTargetDocument.getElementById("dvTop0");
   var oCell, oRow;
   var i, j, cellLen, insertPos;
   var bFilled       = true;
   var oDate         = SCHED_PARAMS.dateRange[0];
   var nBarWidth     = g_oTargetDocument.getElementById("tbBar").clientWidth - 2;
   var nHeaderWidth  = nBarWidth - g_nTimeSlotWidth - g_nScrollBarWidth;
   var nWidth        = Math.floor(nHeaderWidth / SCHED_PARAMS.duration);
   var startDate     = new Date(sDate.getFullYear(), sDate.getMonth (), sDate.getDate ());
   var endDate       = new Date(eDate.getFullYear (), eDate.getMonth (), eDate.getDate ());
   var dataLen       = (SCHED_PARAMS.viewMode == 0) ? 0 : DayDiff(startDate, endDate);
   var dataPos       = (SCHED_PARAMS.viewMode == 0) ? 0 : DayDiff(oDate, startDate);

   if (dataPos > SCHED_PARAMS.duration)
      return;

   // handle the case when start date is earlier than the current date range
   if (dataPos < 0)
   {
      dataLen += dataPos;
      dataPos = 0;
   }
   
   // There is a special case where the record ends exactly at 12:00AM.
   // It should be considered one day less.
   var nAdjustment = 0;
   if (dataLen > 0 &&
       eDate.getHours() == eDate.getMinutes() == eDate.getSeconds() == 0)
   {
       nAdjustment = -1;
   }
   
   var regExp1 = new RegExp("PRINT_APPOINTMENT_TIME", "g");   // ACR 435 Calendar Printing: Replace this string with time
                                                              // if the meeting does not fit in the interval   
   var nColSpan = ((dataPos + dataLen) < SCHED_PARAMS.duration) ? dataLen + 1 + nAdjustment: SCHED_PARAMS.duration - dataPos;
   var sModifiedHTML = oDoc.GetProperty("HTML").replace(regExpSetClientPageURL, g_sPageBaseUrl);
   sModifiedHTML = sModifiedHTML.replace(regExp1, "&nbsp;");   
   var sHTML = "<DIV ID=" + oDoc.GetProperty(g_aFieldName2Index["Id"]) + " ALIGN=center STYLE=width:" + ((nWidth * nColSpan) - 10) + ";overflow:hidden>" + sModifiedHTML + "</DIV>";

   for (i=0; i<g_nMultiDayRows; i++)
   {
      if ( g_oTargetDocument.getElementById("tbTop" + i).rows(0) == 'undefined' )
      break;
      
      oRow = g_oTargetDocument.getElementById("tbTop" + i).rows(0);

      if (oRow != null)
      {
         cellLen     = oRow.cells.length;
         insertPos   = dataPos - (SCHED_PARAMS.duration - cellLen);

         // make sure the insert position is within the display range
         if (insertPos < 0 || insertPos+nColSpan-1 >= cellLen)
            continue;

         // check whether the inserting position is filled.
         bFilled   = false;
         for (j=insertPos; j<insertPos+nColSpan; j++)
         {
            oCell = oRow.cells[j];

            if (oCell.filled == 1)
            {
               bFilled = true;
               break;
            }
         }
         
         if (!bFilled)
         {
            dataPos = insertPos;
            break;
         }
      }
      else
         break;
   }

   if (bFilled)
   {
      oHeaderDiv.innerHTML += "<TABLE ID=tbTop" + g_nMultiDayRows + " CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR></TR></TABLE>";
      oRow = g_oTargetDocument.getElementById("tbTop" + g_nMultiDayRows).rows(0);
      g_nMultiDayRows++;

      // initialize all the cells
      for (j=0; j<SCHED_PARAMS.duration; j++)
      {
         oCell = oRow.insertCell ();
         oCell.filled      = 0;
         oCell.width       = "" + (100/SCHED_PARAMS.duration) + "%";
         oCell.innerHTML   = "&nbsp;"
         //oCell.style.borderLeft = sBorder;
         //oCell.style.borderTop  = sBorder;
      }
   }

   // set target cell properties
   oCell                  = oRow.cells[dataPos];
   oCell.filled           = 1;
   oCell.colSpan          = nColSpan;
   oCell.align            = "center";
   oCell.width            = "" + nColSpan*(100/SCHED_PARAMS.duration) + "%";
   oCell.style.backgroundColor = "silver";
   oCell.innerHTML        = sHTML;

   // colSpan may span more than one column, remove extra column from the end
   for (j=0; j<nColSpan-1; j++)
      oRow.deleteCell ();

   if (SCHED_PARAMS.viewMode == 0)
   {
      if (SCHED_PARAMS.selectedDay.HICtoDateString("mm/dd/yyyy") == startDate.HICtoDateString("mm/dd/yyyy"))
         oCell.style.borderLeft = sBorder;

      if (SCHED_PARAMS.selectedDay.HICtoDateString("mm/dd/yyyy") == endDate.HICtoDateString("mm/dd/yyyy"))
         oCell.style.borderRight = sBorder;

      oCell.style.borderTop      = sBorder;
      oCell.style.borderBottom   = sBorder;
   }
   else
   {
      oCell.style.borderTop      = sBorder;
      oCell.style.borderLeft     = sBorder;
      //oCell.style.borderRight    = sBorder;
      //oCell.style.borderBottom   = sBorder;
   }

   if (g_oTargetDocument.getElementById("dvTop0").style.visibility == "hidden")
      g_oTargetDocument.getElementById("dvTop0").style.visibility = "visible";
}


//-------------------------------------------------------------------------------------------------
// Generate the HTML for the daily and 5 day weekly calendar
//    - If a record span across 1 or more midnight, it is considered a "multi-day" record and 
// will be displayed on the top.
//
// TODO: enhance it to display a record on top only if it crosses 2 or more midnight lines.
// This requires more work in the case of 5 day weekly.
//-------------------------------------------------------------------------------------------------
function RenderDailyAnd5DayWeekly ()
{
   var stDate, edDate, startDate, endDate;
   var oRecord;
   var oFirstColumnDate;
   var nRecordDaySpan;
   var aArray        = new Array();
   var nArrayIndex   = 0;
   var bHasData      = false;
   var data;
   var sAMPMTimeFormat     = g_oLocale.GetProfile(LOCAL_TIME_NOSEC_FORMAT);
   var regExp1 = new RegExp("PRINT_APPOINTMENT_TIME", "g");

   g_aId2UpdateField = new Array ();
   oFirstColumnDate = SCHED_PARAMS.dateRange[0];
   oFirstColumnDate = new Date(oFirstColumnDate.getFullYear (), oFirstColumnDate.getMonth (), oFirstColumnDate.getDate ());

   if (SCHED_PARAMS.viewMode == 1)
   {
      // Get day summery tooltips for 5 day weekly calendar
      SCHED_PARAMS.dateData = new Array ();
      for (var x = 0; x < SCHED_PARAMS.dateRange.length; x++)
      {   
         var sTempDate = SCHED_PARAMS.dateRange[x].HICtoDateString("mm/dd/yyyy");
         SCHED_PARAMS.dateData[x] = g_oPropset.GetProperty (sTempDate);
      }
   }
   
   // Put all the records into an array
   // aArray[0] contains records in column 0
   // aArray[1] contains records in column 1,
   // ...
   // Initialize the array
   for (var x = 0; x < SCHED_PARAMS.duration; x++)
      aArray[x] = "";

   var nRecordCount = g_oPropset.GetChildCount ();
   for (var x = 0; x < nRecordCount; x++)
   {
      oRecord = g_oPropset.GetChild (x);
      
      if (oRecord == null)
         continue;
      
      var bMultiDays    = false;
      
      stDate      = new Date(oRecord.GetProperty(g_aFieldName2Index["Start Date"]));
      edDate      = new Date(oRecord.GetProperty(g_aFieldName2Index["End Date"]));
      startDate   = new Date(stDate.getFullYear (), stDate.getMonth (), stDate.getDate ());
      endDate     = new Date(edDate.getFullYear (), edDate.getMonth (), edDate.getDate ());

      RenderActivityItem (oRecord);

      nRecordDaySpan = DayDiff(startDate, endDate);
      
      // 12:30 AM 6/5/2004 to 12:00 AM 6/6/2004 is considered a single day
      // 12:00 AM 6/5/2004 to 12:00 AM 6/6/2004 is considered a multi day for better display
      // This is particularly true if the date field is of type CSSDate
      if (nRecordDaySpan > 0 &&
          (edDate.getHours() == edDate.getMinutes() == edDate.getSeconds() == 0) &&
          (!(stDate.getHours() == stDate.getMinutes() == stDate.getSeconds() == 0)))
      {
         nRecordDaySpan -= 1;
         bMultiDays = true;         
      }
      
      if (nRecordDaySpan < 0)
         continue;
         
      if (nRecordDaySpan > 0 && g_printON == 1)
         continue;
         
      if (nRecordDaySpan > 0 && g_printON == 0)   // ACR 435 Calendar Printing : Render Multiday Record only when it's not printing
      {
         // For multi-day record (meaning the start date and end date are not in the same day)
         RenderMultiDayRecord (oRecord, stDate, edDate);
      }
      else
      {
         // For single day record, it belongs to one and only one column determined by its start date
         // ACR 435 Calendar Printing : if the start or end time does not fall on the exact interval, display the timings
         var showTime = false;
         if ( stDate.getMinutes()!= 0)
         {
            if ((stDate.getMinutes() % SCHED_PARAMS.slotTimeInterval) != 0)
               showTime = true;
         }
         if (edDate.getMinutes()!= 0)
         {
            if ((edDate.getMinutes() % SCHED_PARAMS.slotTimeInterval) != 0)
               showTime = true;
         }
         
         nArrayIndex = DayDiff(oFirstColumnDate, startDate);

         // CR# 12-1THO6TP - Here we make some adjustments so as to not let the 23:00 hours return a fractional nArrayIndex
         if (nArrayIndex < 0)
            nArrayIndex = 0;
         if (nArrayIndex % 1 > 0)
            nArrayIndex = nArrayIndex - (nArrayIndex % 1) + 1;
         while (nArrayIndex >= SCHED_PARAMS.duration && nArrayIndex > 0)
            nArrayIndex--;     
         
         if (aArray[nArrayIndex] == "")
            aArray[nArrayIndex] = new Array ();
         
         aArray[nArrayIndex][aArray[nArrayIndex].length] = GetStartInterval (stDate);
         aArray[nArrayIndex][aArray[nArrayIndex].length] = GetEndInterval (edDate, bMultiDays);
         aArray[nArrayIndex][aArray[nArrayIndex].length] = "";
         aArray[nArrayIndex][aArray[nArrayIndex].length] = oRecord.GetProperty(g_aFieldName2Index["Id"]);
         aArray[nArrayIndex][aArray[nArrayIndex].length] = oRecord.GetProperty("OPTIONS");
         var sModifiedHTML = oRecord.GetProperty("HTML").replace(regExpSetClientPageURL, g_sPageBaseUrl);
         // ACR 435 Calendar Printing : Show the timings
         if ( showTime )
         {
            var sTime = g_oLocale.getStringFromDateTime(stDate.toTimeString("h:mm tt"), g_sDispTimeFormat, sAMPMTimeFormat);
            var eTime = g_oLocale.getStringFromDateTime(edDate.toTimeString("h:mm tt"), g_sDispTimeFormat, sAMPMTimeFormat);
            var sTime = "<SPAN style='FONT-SIZE: 8pt'>" + sTime +  " - " + eTime + "</SPAN>&nbsp;";
            sModifiedHTML = sModifiedHTML.replace(regExp1, sTime);
         }
         else
         {
            sModifiedHTML = sModifiedHTML.replace(regExp1, "&nbsp;");
         }
		 
         aArray[nArrayIndex][aArray[nArrayIndex].length] = "<SPAN ID=" + oRecord.GetProperty(g_aFieldName2Index["Id"]) + ">" + sModifiedHTML + "</SPAN>";

         
         g_aId2UpdateField[oRecord.GetProperty(g_aFieldName2Index["Id"])] = oRecord.GetProperty(g_aFieldName2Index["Update Field"]);
      }
   }

   // Determine if there is any record
   for (var x = 0; x < aArray.length; x++)
   {
      if (aArray[x] != "")
         bHasData = true;
   }   

   // Pack the record data into a data structure for LoadTimeSlots
   data = createDataArray (aArray);

   if (g_bUse5DayCache &&
       SCHED_PARAMS.viewMode == 1 &&
       SCHED_PARAMS.timeSlots == 5 &&
       _aHICGlobal["HIC_5DayBlankHTMLCache_master"] == "")
   {
      if (!bHasData)
      {
         LoadTimeSlots (data, bHasData);
         return;
      }   
      else
      {
         var aBlank = new Array ("","","","","");
         LoadTimeSlots (createDataArray(aBlank), false);
      }
   }

   LoadTimeSlots (data, bHasData);
   
   var divMultipleDay = g_oTargetDocument.getElementById("dvTop0");
   if (divMultipleDay.offsetHeight != 0)
   {
      var divMiltDayHeight = g_nMultiDayDisplayRows * 19;
   
      if (divMultipleDay.offsetHeight > divMiltDayHeight)
      {
         divMultipleDay.style.height      = divMiltDayHeight - 9;
         divMultipleDay.style.overflowY   = 'auto';
         if (g_bRTLWindow)
            divMultipleDay.style.paddingLeft  = '2px';
         else
            divMultipleDay.style.paddingRight = '2px';
      }

      g_oTargetDocument.getElementById("dvInfo0").style.pixelHeight -= divMultipleDay.offsetHeight;
   }
}


//-------------------------------------------------------------------------------------------------
// Generate the HTML for 7 day week or monthly calendar using the cached template generated in
// ModifyTable ().
// Update g_oTargetDocument.getElementById("tdMain").innerHTML
//-------------------------------------------------------------------------------------------------
function Render7DayWeeklyAndMonthly ()
{
   var sHTMLCache;
   var date;
   var sTileTitle;
   var nLength      = SCHED_PARAMS.dateRange.length;
   var sHTMLCacheId;
   
   // Intialize g_aDateCellMap  for tooltip
   g_aDateCellMap = new Array ();
   for (var x = 0; x < nLength; x++)
   {   
      var sTempDate = SCHED_PARAMS.dateRange[x].HICtoDateString("mm/dd/yyyy");
      g_aDateCellMap[x] = sTempDate;
   }

   // Get the cached HTML template
   if (SCHED_PARAMS.viewMode == 2)
   {
      // Monthly view  
      if (g_bStretchCell)
         sHTMLCacheId = "HIC_SpanStretch";
      else if (SCHED_PARAMS.dateRange.length == 28)
         sHTMLCacheId = (SCHED_PARAMS.cols == 6) ? "HIC_MonthSpan28" : "HIC_7ColMonthSpan28";
      else if (SCHED_PARAMS.dateRange.length == 35)
         sHTMLCacheId = (SCHED_PARAMS.cols == 6) ? "HIC_MonthSpan35" : "HIC_7ColMonthSpan35";
      else if (SCHED_PARAMS.dateRange.length == 42)
         sHTMLCacheId = (SCHED_PARAMS.cols == 6) ? "HIC_MonthSpan42" : "HIC_7ColMonthSpan42";
   }
   else
   {
      // 7 day week view
      if (g_bStretchCell)
         sHTMLCacheId = "HIC_SpanStretch";
      else
         sHTMLCacheId = "HIC_7DayWeekSpan";   
   }
   if (sHTMLCacheId != "")
      sHTMLCache = g_oAppTopDocument.getElementById (sHTMLCacheId).innerText;
   
   if (true)
   {
      var sHTMLCacheArray = new Array ();
      var aStringHTML     = new Array ();
      var dvInfo;
      var Info, dvItem, dvItem1;
      var nCellCount      = 0;
      var nCellVisible    = 0;
      var aDivHeight      = new Array ();

      // The html string looks like:
      // ...<DIV ...><TABLE ...><TR>
      //      <TD><IMG ... style=visibility:~~7YB-0IEdvIndicator SRC=~~7YB-0IEdvImgInd></TD>
      //      <TD>~~7YB-0IEdvSDMarker</TD> 
      //      <TD>~~7YB-0IEdvHeader</TD>
      // </TR></TABLE></DIV>...<DIV ...>~~G3U-6DBdvInfo</DIV>...
      // ...<DIV ...><TABLE ...><TR>
      //      <TD><IMG ... style=visibility:~~7YB-0IEdvIndicator SRC=~~7YB-0IEdvImgInd></TD>
      //      <TD>~~7YB-0IEdvSDMarker</TD> 
      //      <TD>~~7YB-0IEdvHeader</TD>
      // </TR></TABLE></DIV>...<DIV ...>~~G3U-6DBdvInfo</DIV>...
      // and the header will be displayed as:
      // Strech Icon (left aligned), Special date markers (left aligned), Date (right aligned)
      //
      sHTMLCacheArray = sHTMLCache.split("~~7YB-0IEdvIndicator");
   
      for (var xx=1; xx < sHTMLCacheArray.length; xx++)
      {
         dvItem = sHTMLCacheArray[xx].split("~~7YB-0IEdvImgInd");
         dvItem1 = dvItem[1].split("~~7YB-0IEdvSDMarker");
         dvItem2 = dvItem1[1].split("~~7YB-0IEdvHeader");
         dvInfo = dvItem2[1].split("~~G3U-6DBdvInfo");
         
         if (SCHED_PARAMS.viewMode == 1)
         {
            date       = SCHED_PARAMS.dateRange[reOrderWeekDateArray(xx - 1)].HICtoDateString("mm/dd/yyyy");
            sTileTitle = g_oLocale.GetStringFromDateTime(date, "M/D/YYYY", g_oLocale.GetProfile(LOCAL_LONG_DATE_FORMAT));
         }
         else
         {
            date       = SCHED_PARAMS.dateRange[xx - 1].HICtoDateString("mm/dd/yyyy");
            sTileTitle = SCHED_PARAMS.dateRange[xx - 1].HICtoDateString("d");
         }

         // Data
         Info = g_oPropset.GetProperty (date+"Cell");
         if (Info == null)
         {
            Info = "";
            nCellCount = 0;
         }
         else
         {
            nCellCount = g_oPropset.GetProperty (date+"CellCount");
         }
          
         if (xx == 1)
            aStringHTML[aStringHTML.length] = sHTMLCacheArray[0];
                  
         // Show stretch icon (up or down) for the tile
         if (!g_bStretchCell)
         {
            aDivHeight = dvInfo[0].split("height:");
            nCellVisible = Math.ceil(Number(aDivHeight[1].substring(0,aDivHeight[1].length -1))/14);
            if (nCellCount >= nCellVisible)
              aStringHTML[aStringHTML.length] = "visible ";
            else
              aStringHTML[aStringHTML.length] = "hidden";
         }
         else
         {
            aDivHeight = dvInfo[0].split("xvisiheight:");
            nCellVisible = Math.ceil(Number(aDivHeight[1].substring(0,aDivHeight[1].length -1))/14);
            if (nCellCount >= nCellVisible)
               aStringHTML[aStringHTML.length] = "visible ";
            else
               aStringHTML[aStringHTML.length] = "hidden";
         }
         aStringHTML[aStringHTML.length] = dvItem[0];      
         
         if (g_bStretchCell)
         {
            aStringHTML[aStringHTML.length] = g_sPageBaseUrl + "images/arrow_up_sm.gif";
            aStringHTML[aStringHTML.length] = " TITLE='" + GetUserProp ("UISTR Less Icon Tooltip") + "'";
         }
         else
         {
            aStringHTML[aStringHTML.length] = g_sPageBaseUrl + "images/arrow_down_sm.gif";
            aStringHTML[aStringHTML.length] = " TITLE='" + GetUserProp ("UISTR More Icon Tooltip") + "'";
         }
         aStringHTML[aStringHTML.length] = dvItem1[0];
         
         // Special date marker (e.g., <SPAN TITLE=...>H</SPAN>)
         var sSpecialDateMarker = g_oPropset.GetProperty (date+"Marker");
         if (typeof(sSpecialDateMarker) == 'undefined' || sSpecialDateMarker == null)
            sSpecialDateMarker = "";
         
         if (g_bRTLWindow)         
            aStringHTML[aStringHTML.length] = "<DIV STYLE=PADDING-LEFT:2px;PADDING-RIGHT:2px;VERTICAL-ALIGN:middle;FONT-WEIGHT:bold;OVERFLOW:hidden;TEXT-ALIGN:right>";
         else
            aStringHTML[aStringHTML.length] = "<DIV STYLE=PADDING-LEFT:2px;PADDING-RIGHT:2px;VERTICAL-ALIGN:middle;FONT-WEIGHT:bold;OVERFLOW:hidden;TEXT-ALIGN:left>";
         aStringHTML[aStringHTML.length] = sSpecialDateMarker;
         aStringHTML[aStringHTML.length] = "</DIV>";
         aStringHTML[aStringHTML.length] = dvItem2[0];
         
         // Header title (e.g., Friday, April 23 2004)
         if (g_bRTLWindow)
            aStringHTML[aStringHTML.length] = "<SPAN STYLE=cursor:hand;width:100%;font-weight:bold;text-align:left;vertical-align:middle;overflow:hidden ONCLICK='gotoDay(\"" + date + "\")'>";
         else
            aStringHTML[aStringHTML.length] = "<SPAN STYLE=cursor:hand;width:100%;font-weight:bold;text-align:right;vertical-align:middle;overflow:hidden ONCLICK='gotoDay(\"" + date + "\")'>";
         aStringHTML[aStringHTML.length] = sTileTitle;
         aStringHTML[aStringHTML.length] = "</SPAN>";
         aStringHTML[aStringHTML.length] = dvInfo[0];
         aStringHTML[aStringHTML.length] = Info;
         aStringHTML[aStringHTML.length] = dvInfo[1];
      }
      
      sHTMLCache = aStringHTML.join("");
      sHTMLCache = sHTMLCache.replace(regExpSetClientPageURL, g_sPageBaseUrl);
      g_oTargetDocument.getElementById("tdMain").innerHTML = sHTMLCache;
   }
}


function getStartBusDay ()
{
   var nLeft, nRight;
   var start = GetUserProp("Preferred Business Day Start Time");

   if (start == "")
      return 8;

   var aTime   = start.split(":");
   var nHour   = parseInt(aTime[0], 10);
   var nMin    = parseInt(aTime[1], 10);

   if (aTime.length == 1)
   {
      start = nHour;
   }
   else
   {
      nLeft    = Math.floor(nMin / SCHED_PARAMS.slotTimeInterval);
      nRight   = nMin % SCHED_PARAMS.slotTimeInterval;

      if (nRight != 0)
         nMin = SCHED_PARAMS.slotTimeInterval * nLeft;

      start = nHour + (nMin / 60);
   }

   return start;
}

function getEndBusDay ()
{
   var nLeft, nRight;
   var end   = GetUserProp("Preferred Business Day End Time");

   if (end == "")
      return 17;

   var aTime   = end.split(":");
   var nHour   = parseInt(aTime[0], 10);
   var nMin    = parseInt(aTime[1], 10);

   if (aTime.length == 1)
   {
      end = nHour;
   }
   else
   {
      nLeft    = Math.floor(nMin / SCHED_PARAMS.slotTimeInterval);
      nRight   = nMin % SCHED_PARAMS.slotTimeInterval;

      if (nRight != 0)
         nMin = SCHED_PARAMS.slotTimeInterval * (nLeft + 1);

      end = nHour + (nMin / 60);
   }

   return end;
}

function getRowPerTimeslot ()
{
   return 1
}

function DayDiff (startDate, endDate)
{
   var dayInMilliseconds;

   dayInMilliseconds = Date.parse(endDate) - Date.parse(startDate);

   return (dayInMilliseconds / 86400000)   // convert back to number of day
}

function onResize ()
{
   var i, j, k, c;
   var oCell;
   var nSpan;

   _aHICGlobal["HIC_nDoResize"] = 1;
   
   //for (c = 0; c < SCHED_PARAMS.timeSlots; c++)
   //{
   //   var Element = g_oTargetDocument.getElementById("dvSlot" + c)
   //   if (Element != null)
   //      Element.style.pixelWidth = _aHICGlobal["HIC_aSlotWidths"][c].offsetWidth;
   //}

   if (SCHED_PARAMS.viewMode == 1)
   {
      //var nPos;
      var nWidth = Math.floor((g_oTargetDocument.getElementById("tbBar").offsetWidth - g_nTimeSlotWidth - g_nScrollBarWidth)/SCHED_PARAMS.duration) - 1;

      for (i = 0; i < g_nMultiDayRows; i++)
      {
         //nPos   = 0;
         oCell   = g_oTargetDocument.getElementById("tbTop" + i).rows(0).cells;

         for (j = 0; j < oCell.length; j++)
         {
            nSpan = oCell[j].colSpan;
            oCell[j].width = nWidth * nSpan;
            //for (k=nPos; k<nPos+nSpan; k++)
            //   oCell[j].style.pixelWidth += _aHICGlobal["HIC_aSlotWidths"][k].offsetWidth;

            //nPos += nSpan;
         }
      }
   }
}

function Resize ()
{
   try
   {
      g_nMultiDayRows = 0;
      UpdateData (1);
      ResizeControlBar ();
   }
   catch (e)
   {
   }
}

// TODO: Need better calculation
// Resize all the Genna controls
function ResizeControlBar ()
{
   if ((!g_bEnableDatePicker) &&
       (!g_bEnableAccessList) &&
       (!g_bEnableTimeZone)   &&
       (!g_bEnableFilterPicker))
   {
       return;
   }
       
   var margin              = 70; // Spaces and margins
   var doc                 = g_oTargetDocument;
   var newButtonWidth      = g_bEnableNewButton ? doc.getElementById("newButton").clientWidth : 0;
   var todayButtonWidth    = g_bEnableTodayButton ? doc.getElementById("todayButton").clientWidth : 0;
   var printButtonWidth    = g_bEnablePrintButton ? doc.getElementById("printButton").clientWidth : 0;
   var divider1Width       = doc.getElementById("spacerImg1").clientWidth;
   var divider2Width       = doc.getElementById("spacerImg2").clientWidth;
   var leftNavWidth        = g_bEnableDatePicker ? doc.getElementById("navigateBack").clientWidth : 0;
   var rightNavWidth       = g_bEnableDatePicker ?doc.getElementById("navigateForward").clientWidth : 0;
   var accessLabelWidth    = g_bEnableAccessList ? doc.getElementById("AccessLabel").clientWidth : 0;
   var timezoneLabelWidth  = g_bEnableTimeZone ? doc.getElementById("TimeZoneLabel").clientWidth : 0;
   var filterLabelWidth    = g_bEnableFilterPicker ? doc.getElementById("FilterLabel").clientWidth : 0;
   var datePickerWidth     = 0;
   var ownerPickerWidth    = 0;
   var timezonePikerWidth  = 0;
   var filterPickerWidth   = 0;
   var nCount              = 0;
   var nCtrlsWidth         = doc.getElementById("tbCal").clientWidth;
   
   nCtrlsWidth = nCtrlsWidth - newButtonWidth
                             - todayButtonWidth
                             - printButtonWidth
                             - divider1Width
                             - divider2Width
                             - leftNavWidth
                             - rightNavWidth
                             - accessLabelWidth
                             - timezoneLabelWidth
                             - filterLabelWidth
                             - margin;
   
   if (nCtrlsWidth < 50)
      nCtrlsWidth = 50;
      
   if (g_bEnableDatePicker)
      nCount += 1;
      
   if (g_bEnableAccessList)
      nCount += 1;
      
   if (g_bEnableTimeZone)
      nCount += 2;
      
   if (g_bEnableFilterPicker)
      nCount += 1;
   
   // Never happens
   if (nCount == 0)
      return;
   
   if (g_bEnableDatePicker)
   {
      var width = Math.floor(nCtrlsWidth / nCount);
      if (width > 200)
         width = 200;
      g_oDatePicker.SetAttribute (JGC_ATTR_PICKONLY, true);
      g_oDatePicker.SetAttribute (JGC_ATTR_MAXLENGTH, width);
      g_oTargetDocument.getElementById("displayDate").children(0).style.width = width;
   }
   
   if (g_bEnableTimeZone)
   {
      var width = Math.floor(nCtrlsWidth * 2 / nCount);
      if (width > 300)
         width = 300;
      g_oTimeZonePicker.SetAttribute (JGC_ATTR_MAXLENGTH, width);
      g_oTargetDocument.getElementById("timezonePicker").children(0).style.width = width;
   }
         
   if (g_bEnableAccessList)
   {
      var width = Math.floor(nCtrlsWidth / nCount);
      if (width > 200)
         width = 200;
      g_oAccessListObject.SetAttribute (JGC_ATTR_MAXLENGTH, width);
      g_oTargetDocument.getElementById("accessContainer").children(0).style.width = width;
   }
   
   if (g_bEnableFilterPicker)
   {
      var width = Math.floor(nCtrlsWidth / nCount);
      if (width > 200)
         width = 200;
      g_oFilterPicker.SetAttribute (JGC_ATTR_MAXLENGTH, width);
      g_oTargetDocument.getElementById("filterPicker").children(0).style.width = width;
   }
}

//========================================================================================================
// date prototype extentions

Date.prototype.increaseDay    = dt_IncreaseDay;
Date.prototype.decreaseDay    = dt_DecreaseDay;
Date.prototype.increaseMonth  = dt_IncreaseMonth;
Date.prototype.decreaseMonth  = dt_DecreaseMonth;
Date.prototype.HICtoDateString= dt_HICToDateString
Date.prototype.toDateString   = dt_ToDateString;
Date.prototype.toTimeString   = dt_ToTimeString;
Date.prototype.copy           = dt_CopyDate;
Date.prototype.compare        = dt_Compare;

function dt_IncreaseDay (x)
{
   var nDays = (x == null)? 1 : x;
   this.setDate (this.getDate () + nDays);
   return this;
}

function dt_DecreaseDay (x)
{
   var nDays = (x == null)? 1 : x;
   this.setDate (this.getDate () - nDays);
   return this;
}

function dt_IncreaseMonth (x)
{
   // FR# 12-1UMN7BM: The JavaScript SetMonth is quite buggy, we'll need to do some overriding - in effect, rewrite this method.
   var nMonths = (x == null)? 1 : x;  
   if (1 == nMonths)
   {
      var tempDate = new Date(this); 
      var oldMonth = tempDate.getMonth();
      tempDate.setMonth (tempDate.getMonth() + 1);
      var newMonth = tempDate.getMonth();
      if (newMonth - oldMonth > 1)                      // This is where Javascript screwed up ;-)
      {
         if (0 == oldMonth)                             // Special coding for January, as it's followed by Feb, which may have 28 or 29 days
         {
            if (tempDate.getYear() % 400 == 0 || (tempDate.getYear() % 100 != 0 && tempDate.getYear() % 4 == 0))        // Is leap year?
            {
               this.setDate (this.getDate () + 29);
            }
            else
            {
               this.setDate (this.getDate () + 28);
            }
         }
         else if ((2 == oldMonth) || (4 == oldMonth) || (7 == oldMonth) || (9 == oldMonth))                             // Months which are followed by months with 30 days.
         {
            this.setDate (this.getDate () + 30);
         }
      }
      else 
      {
         this.setMonth (this.getMonth () + 1);
      }
   }
   else
   {
      this.setMonth (this.getMonth () + nMonths);
   }
   return this;
}

function dt_DecreaseMonth (x)
{
   // FR# 12-1UMN7BM: The JavaScript SetMonth is quite buggy, we'll need to do some overriding - in effect, rewrite this method.
   var nMonths = (x == null)? 1 : x;
   if (1 == nMonths)
   {
      var tempDate = new Date(this); 
      var oldMonth = tempDate.getMonth();
      tempDate.setMonth (tempDate.getMonth() - 1);
      var newMonth = tempDate.getMonth();
      if ((newMonth - oldMonth > -1) && (oldMonth != 0))              // This is where Javascript screwed up ;-) Besides, January will never cause a problem. Hence the escape clause.
      {
         if ((2 == oldMonth) ||(4 == oldMonth) || (6 == oldMonth) || (9 == oldMonth) || (11 == oldMonth))       // Months which are preceded by months with less than 31 days.
         {
            this.setDate (this.getDate () - 31);
         }
      }
      else 
      {
         this.setMonth (this.getMonth () - 1);
      }
   }
   else
   {        
      this.setMonth (this.getMonth () - nMonths);
   }
   return this;
}

function dt_CopyDate (x)
{
   this.setFullYear (x.getFullYear ());
   this.setMonth (x.getMonth ());
   this.setDate (x.getDate ());

   // for case when copy 6/1 to 5/31
   if (this.getMonth () != x.getMonth ())
      this.setMonth (x.getMonth ());
   
   return this;   
}

function dt_Compare (d)
{
   var nYear   = this.getFullYear ();
   var nYear1  = d.getFullYear ();
   
   if (nYear < nYear1)
      return -1;
   if (nYear > nYear1)
      return 1;
      
   var nMonth  = this.getMonth ();
   var nMonth1 = d.getMonth ();
   
   if (nMonth < nMonth1)
      return -1;
   if (nMonth > nMonth1)
      return 1;
      
   var nDay = this.getDate ();
   var nDay1= d.getDate ();
   
   if (nDay < nDay1)
      return -1;
   if (nDay > nDay1)
      return 1;
      
   return 0;
}

function dt_HICToDateString (format)
{
   var fDate = ""
   
   switch (format.toUpperCase ())
   {
      case "MM/DD/YYYY":
      {
         var month = this.getMonth () + 1;
         var date = this.getDate ();
         var year = this.getFullYear ();
         if( month < 10)
            month = "0" + month;
         if(date < 10)
            date = "0" + date;
         fDate = month+"/"+date+"/"+year;
         break;
      }
      case "DDDD, MMMM DD":
      {
         var date = g_aWeekDaysStringArray[this.getDay ()];
         var month = g_aMonthStringArray[this.getMonth ()];
         
         fDate = date + ", " + month + " " + this.getDate ();
         break;
      }
      case "DDD":
      {      
         fDate = g_aWeekDaysStringArray[this.getDay ()];
         break;
      }
      case "MMMM":
      {      
         fDate = g_aMonthStringArray[this.getMonth ()];
         break;
      }
      case "D":
      {
         fDate = this.getDate ();
         break;
      }
      case "YYYY":
      {      
         fDate = this.getFullYear ();
         break;
      }
      case "MMMM YYYY":
      {
         fDate = g_aMonthStringArray[this.getMonth ()] + " " + this.getFullYear ();
         break;
      }
      case "MM/DD/YYYY HH:MM:SS":
      {
         var month = this.getMonth () + 1;
         var date = this.getDate ();
         var year = this.getFullYear ();
         
         if( month < 10)
            month = "0" + month;
         if(date < 10)
            date = "0" + date;
         fDate = month+"/"+date+"/"+year;
         var hours = this.getHours ();
         if( hours < 10)
            hours = "0" + hours;
         var minutes = this.getMinutes ();
         if( minutes < 10)
            minutes = "0" + minutes;
         var seconds = this.getSeconds ();
         if( seconds < 10)
            seconds = "0" + seconds;
         fDate += " " +hours+":"+minutes+":"+seconds;
         break;
      }
      case "MM DD":
      {
         var month = g_aMonthStringArray[this.getMonth ()];
         fDate = month + " " + this.getDate ();
         break;
      }
      case "DDDD, MMMM DD, YYYY":
      {
         var date = g_aWeekDaysStringArray[this.getDay ()];
         var month = g_aMonthStringArray[this.getMonth ()];

         fDate = date + ", " + month + " " + this.getDate () + ", " + this.getFullYear ();
         break;
      }
      case "MMMM DD, YYYY":
      {
         var month = g_aMonthStringArray[this.getMonth ()];

         fDate = month + " " + this.getDate () + ", " + this.getFullYear ();
         break;
      }
   }
   return fDate;
}

function dt_ToDateString (format)
{
   var fDate      = ""
   var tmpPattern   = ""
   var cPattern   = ""
   var pPattern   = ""
   var sPattern   = ""
   
   for (var i=0; i<(format.length); i++)
   {
      cPattern = format.charAt(i).toUpperCase ();

	  // Add literal support in format string
      if (cPattern == "'") 
      {
         // literal string found
         cPattern = "";
         for (var j=i+1; j<(format.length); j++)
         {
            sPattern = format.charAt(j);
            // check end
            if (sPattern != "'")
            {
               // check escaped quote char
               if (sPattern == "\\")
               {
                  if ((j+1 < format.length) && (format.charAt(j+1) == "'"))
                  {
                     // escaped
                     sPattern = "'";
                     j++;
                  }
               }
            }
            else
            {
               // string ended
               break;
            }
            cPattern += sPattern;
         }
         i = j;
         if (j == format.length)
         { 
            cPattern = "Invalid daily format string in LOV type CAL_PRINTHEADER_FORMAT ";
         }
      }

      if ((cPattern != "M") && (cPattern != "D") && (cPattern != "Y"))
      {
         if (tmpPattern == "")
            fDate += cPattern;
         else
         {
            fDate += getDateString(this, tmpPattern) + cPattern;
            tmpPattern = "";
         }
      }
      else
      {
         if (tmpPattern == "")
            pPattern = tmpPattern = cPattern;
         else
         {
            if ((cPattern == pPattern) && ((tmpPattern.length) < 4))
               tmpPattern += cPattern;

            if (cPattern != pPattern)
            {
               fDate += getDateString(this, tmpPattern);
               tmpPattern = cPattern;
            }

            pPattern = cPattern;
         }
         
         if (i == (format.length) - 1)
            fDate += getDateString(this, tmpPattern);
      }
   }
   
   return fDate;
}

// Convert to a 12 hour time DISPLAY string with AM/PM (e.g., 6:30 AM in American-English)
// It is always called with format = "h:mm tt" with one exception.
function dt_ToTimeString (format)
{
   var sTime = "";
   
   var nHour = this.getHours ();

   if (nHour == 0)
      nHour = 12;

   if (nHour > 12)
      sTime += (nHour - 12);
   else
      sTime += nHour;
   
   if (g_sDispTimeSeparator == null)
   {
       g_sDispTimeSeparator = g_oLocale.GetDispTimeSeparator ();
       if (g_sDispTimeSeparator == null || g_sDispTimeSeparator == "")
          g_sDispTimeSeparator = ":";
   }
   sTime += g_sDispTimeSeparator;
   
   var nMin = this.getMinutes ();
         
   if (nMin < 10)
      sTime += "0" + nMin;
   else
      sTime += nMin;
   
   if (format == "h:mm tt")
   {
      if (this.getHours () >= 12)
      {
         if (g_sDispTimePM == null)
         {
            g_sDispTimePM = g_oLocale.GetDispTimePM  ();
            if (g_sDispTimePM == null || g_sDispTimePM == "")
               g_sDispTimePM = "PM";
         }
         sTime += " ";
         sTime += g_sDispTimePM;
      }
      else
      {
         if (g_sDispTimeAM == null)
         {
            g_sDispTimeAM = g_oLocale.GetDispTimeAM ();
            if (g_sDispTimeAM == null || g_sDispTimeAM == "")
               g_sDispTimeAM = "AM";
         }
         sTime += " ";
         sTime += g_sDispTimeAM;
      }   
   }
   
   return sTime;
}

function getDateString (date, pattern)
{
   var sDate = "";

   switch (pattern)
   {
      case "M":
      {
         sDate += (date.getMonth () + 1);
         break;
      }
      case "MM":
      {
         if (date.getMonth () < 9)
            sDate += "0" + (date.getMonth () + 1);
         else
            sDate += (date.getMonth () + 1);
         break;
      }
      case "MMM":
      {
         sDate += g_aMonthStringArray[date.getMonth ()];
         break;
      }
      case "MMMM":
      {
         sDate += g_aMonthStringArray[date.getMonth ()];
         break;
      }
      case "D":
      {
         sDate += date.getDate ();
         break;
      }
      case "DD":
      {
         if (date.getDate () < 10)
            sDate += "0" + date.getDate ();
         else
            sDate += date.getDate ();
         break;
      }
      case "DDD":
      {
         sDate += g_aWeekDaysStringArray[date.getDay ()];
         break;
      }
      case "DDDD":
      {
         sDate += g_aWeekDaysStringArray[date.getDay ()];
         break;
      }
      case "YYYY":
      {
         sDate += date.getFullYear ();
         break;
      }
      case "YY":
      {
         sDate += String(date.getFullYear ()).slice (2);
         break;
      }
   }

   return sDate;
}


function setEndDate (dtStBusyDate, nMonth)
{
   var tempDate = new Date(dtStBusyDate.getFullYear (), dtStBusyDate.getMonth (),1);
   tempDate.setMonth((tempDate.getMonth ()-1) + nMonth );
   var endday  = DaysInMonth(tempDate.getMonth ()+1, tempDate.getFullYear ());
   var rt = new Date(tempDate.getFullYear (), tempDate.getMonth (), endday); 
   return rt;
}

function DaysInMonth (month, year)
{
   if (month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12)  
      return 31;
   else if (month==4 || month==6 || month==9 || month==11) 
      return 30;
   else if (month==2)  
      return (IsLeapYear(year)? 29 : 28);
}

function IsLeapYear (Year)
{
   return (((Year % 4)==0) && ((Year % 100)!=0) || ((Year % 400)==0));
}

function AddRecord (sDate, eDate)
{
   var inputSet = NewPropertySet ();
   inputSet.SetProperty ("StartDate", sDate);
   inputSet.SetProperty ("EndDate", eDate);
   inputSet.SetProperty ("CurrentDate", SCHED_PARAMS.selectedDay.HICtoDateString("mm/dd/yyyy"));
   inputSet.SetProperty ("SelectedDate", SCHED_PARAMS.selectedDay.valueOf ());
   
   g_bNeedReload = false;
   InvokeMethod ("NewRecord", inputSet);
   g_bNeedReload = true;
}

function AddRecordInPlace (sDate, eDate, desc)
{
   if (desc == null || desc == "")
      return;
      
   var inputSet = NewPropertySet ();
   inputSet.SetProperty ("StartDate", sDate);
   inputSet.SetProperty ("EndDate", eDate);
   inputSet.SetProperty ("Description", desc);
   
   SaveScroll ();
   InvokeMethod ("NewRecord", inputSet);
}


function onItemDragStart (sourceObj, eventObj)
{
   if (g_bNoUpdate || _aHICGlobal["HIC_DraggingStretchItemUp"] || _aHICGlobal["HIC_DraggingStretchItemDown"] )
      return;

   var oDiv = sourceObj;
   var oCell = sourceObj.parentElement;
   var nRow = oCell.rowNumber;

   if (g_aPrivateItems[sourceObj.rowid] != null)
      return;
      
   _aHICGlobal["HIC_SchedDrag"]   = false;   
   _aHICGlobal["HIC_DraggingItem"] = true;
   eventObj.cancelBubble = true;
   clearAllBlanks ();
   
   g_nItemType = sourceObj.TYPE;
   eventObj.dataTransfer.setData ("Text", sourceObj.rowid);
   eventObj.dataTransfer.effectAllowed = "move";
   
   _aHICGlobal["HIC_oDragIndicator"].innerHTML = sourceObj.innerHTML;
   _aHICGlobal["HIC_oDragIndicator"].all("dragimg").filters.alpha.opacity=100 ;
   _aHICGlobal["HIC_oDragIndicator"].style.visibility = "visible";
   g_sOldInnerHTML = oCell.innerHTML;
   _aHICGlobal["HIC_DraggedStartItem"] = oCell;
   _aHICGlobal["HIC_nMaxDragY"] = g_oTargetDocument.body.scrollHeight;

   onItemDrag (sourceObj,eventObj);
    
   oCell.style.border = "1px dashed navy";
    
   var oOuterSpanForRelTable = "<SPAN style='filter:Alpha(opacity=60);overflow:hidden;height:100%;padding:0;position:relative;width:100%;top:-" + Number(Number(oCell.rowSpan)*19 - 1)  + "px;' ></SPAN>";
   var oSpan =g_oTargetDocument.createElement (oOuterSpanForRelTable);
   oSpan.innerHTML = CreateBackTableForDrag (nRow, oCell.rowSpan, "none", oCell.timeSlot, oCell.time, oCell.id);
   oCell.appendChild (oSpan);
}

function onItemDrag (sourceObj, eventObj)
{
   if (g_bNoUpdate)
      return;
   
   if (_aHICGlobal["HIC_DraggingItem"])
   {
      _aHICGlobal["HIC_oDragIndicator"].style.backgroundColor =  "white";
      _aHICGlobal["HIC_oDragIndicator"].style.pixelHeight = sourceObj.parentElement.clientHeight - 18;
      _aHICGlobal["HIC_oDragIndicator"].style.pixelWidth = sourceObj.parentElement.clientWidth;
      if (SCHED_PARAMS.viewMode == 1)
      {
          if (g_bRTLWindow)
          {
            _aHICGlobal["HIC_oDragIndicator"].style.pixelRight = g_oTargetDocument.body.clientWidth - eventObj.clientX - 10;
          }
          else
          {
            _aHICGlobal["HIC_oDragIndicator"].style.pixelLeft = eventObj.clientX + 10;
          } 
      }
      else
      {
         if (g_bRTLWindow)
         {
            _aHICGlobal["HIC_oDragIndicator"].style.pixelRight = g_oTargetDocument.body.clientWidth - eventObj.clientX + eventObj.offsetX + 7 ;
         }
         else
         {
            _aHICGlobal["HIC_oDragIndicator"].style.pixelLeft = eventObj.clientX - eventObj.offsetX - 7;
         }     
      }        
      
      var nDragY = eventObj.clientY + g_oTargetDocument.body.scrollTop + 10;
      if (nDragY > _aHICGlobal["HIC_nMaxDragY"])
         nDragY = _aHICGlobal["HIC_nMaxDragY"];

      _aHICGlobal["HIC_oDragIndicator"].style.pixelTop = nDragY;
   }
}

function onItemDrop (eventObj, sourceObj, data)
{
   if (g_bNoUpdate)
      return;

   if (_aHICGlobal["HIC_DraggingItem"] || g_bIsDragItemFromSWE)
   {
      var bt         = true;
      var sDate      = new Date(Number(sourceObj.time));
      var inputSet   = NewPropertySet ();

      sDate = sDate.HICtoDateString("MM/DD/YYYY HH:MM:SS");
      eventObj.cancelBubble = true;

      if (typeof(eventObj.srcElement) != 'undefined')
      {   
         _aHICGlobal["HIC_LastCellDrop"] = eventObj.srcElement;
         
         // HSAPUTRA: lets determine if this is from SWE
         // If it is from SWE drag and rop then callback "DragAndDrop" in server
         // with format:  [Applet Name]|[Selected record Row Id (s)][,]...
         if (g_bIsDragItemFromSWE )
         {
            inputSet.SetProperty ("StartDate", sDate);
            inputSet.SetProperty ("Data", g_sSWEAppletName + "|" + g_sSWERowIds);
            InvokeMethod ("DragAndDrop", inputSet);
         }
         else if (eventObj.srcElement.id != _aHICGlobal["HIC_DraggedStartItem"].id)
         {
            inputSet.SetProperty ("NewStartDate", sDate);
            inputSet.SetProperty ("RowId", eventObj.dataTransfer.getData("Text"));

            SaveScroll ();
            EditRecord (inputSet);
         }
         else
         {
            RemoveDragIndicator ();
            RestoreBeforeDrag ();
            ClearDragStretch ();
            eventObj.srcElement.style.border = "none";
            clearAllBlanks ();
         }
      }      
      _aHICGlobal["HIC_DraggingItem"] = false;
      
      //HSAPUTRA: for drag and drop from SWE
      g_bIsDragItemFromSWE = false;
   }
}


function cancelDefDrag (eventObj)
{
   //HSAPUTRA: check if this drag event come from SWE or not
   if (checkIfFromSWE (eventObj.dataTransfer.getData("Text")))
   {
      if (g_bNoInsert)
         return;
         
      g_bIsDragItemFromSWE = true;
   }
   else
   {
      if (g_bNoUpdate)
         return;
   }

   eventObj.cancelBubble = true;
   eventObj.returnValue = false;
   
   if (g_bIsDragItemFromSWE == true)
      eventObj.dataTransfer.dropEffect ="copy";
   else
      eventObj.dataTransfer.dropEffect ="move";   

   HighlightCell (eventObj);
}

function RestoreBeforeDrag ()
{
   if (_aHICGlobal["HIC_DraggedStartItem"] != null)
   {
      _aHICGlobal["HIC_DraggedStartItem"].innerHTML = g_sOldInnerHTML;
      _aHICGlobal["HIC_DraggedStartItem"].style.border = "1px solid silver";
      _aHICGlobal["HIC_DraggedStartItem"].style.backgroundColor = 'white';
      _aHICGlobal["HIC_DraggedStartItem"].focus ();

      highlightDay (g_nSelectedDay);
   }
}

function onItemEndDrag ()
{
   if (g_bIsDragItemFromSWE)
   {
      if (g_bNoInsert)
         return;
   } 
   else
   {
      if (g_bNoUpdate)
         return;
   }

   //must do this popup dialog on cal calls EndDrag after Drag is done
   //HSAPUTRA: Add to support drag and drop from SWE
   if (_aHICGlobal["HIC_DraggingItem"] || g_bIsDragItemFromSWE)
   {
      _aHICGlobal["HIC_oDragIndicator"].style.visibility = "hidden";
      RestoreBeforeDrag ();  
      _aHICGlobal["HIC_DraggingItem"] = false;
   }
}

function onCellCancelEvent (sourceObj, eventObj)
{
   eventObj.cancelBubble = true;
   eventObj.returnValue = false;
}

function onCellMouseOver (sourceObj, type, td_id)
{
   if (type == "up")
      sourceObj.style.cursor = "N-resize";
   else
      sourceObj.style.cursor = "S-resize";
   // Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
   DragHandler.attach(sourceObj, type, td_id);
}

function onBeginStrechMouseDown (sourceObj, eventObj, td_id)
{
   if (g_bNoUpdate || _aHICGlobal["HIC_DraggingStretchItemUp"] || _aHICGlobal["HIC_DraggingStretchItemDown"] || _aHICGlobal["HIC_DraggingItem"] )
      return;

   if (!ActivateApplet ())
      return;
      
   if (g_aPrivateItems[sourceObj.idStretch] != null)
   {
      eventObj.cancelBubble = true;
      return;   
   }
   var oStartCell = GetElement(eventObj.srcElement, td_id);
   
   //FR # 12-1PZO52G - script error on dragging a contact outside calendar.
   if (oStartCell == null)
   {
      eventObj.cancelBubble = true;
      return;   
   }
   
   var StartCellHTML = oStartCell.innerHTML;
   _aHICGlobal["HIC_SchedDrag"] = false;
   RemoveDragIndicator ();
   
   if (sourceObj.id == 'imgUp')
   {
      _aHICGlobal["HIC_oIndicator"].style.pixelTop = eventObj.clientY - eventObj.offsetY  +  g_oTargetDocument.body.scrollTop - 1;
      _aHICGlobal["HIC_oIndicator"].style.pixelWidth =  GetElement(eventObj.srcElement, td_id).clientWidth + 2;
      _aHICGlobal["HIC_oIndicator"].style.pixelLeft = eventObj.clientX - eventObj.offsetX + g_oTargetDocument.body.scrollLeft - 8;
      _aHICGlobal["HIC_oIndicator"].style.pixelHeight = (Number(sourceObj.rowSpan) + 1)*19;

      _aHICGlobal["HIC_StartStretchCellHeight"] = Number(_aHICGlobal["HIC_oIndicator"].style.pixelHeight);
      _aHICGlobal["HIC_StartStretchY"] = _aHICGlobal["HIC_oIndicator"].style.pixelTop;
      _aHICGlobal["HIC_MaxStretchY"] = _aHICGlobal["HIC_oIndicator"].style.pixelTop + 19*(Number(sourceObj.rowSpan)+1) - g_oTargetDocument.body.scrollTop;
      _aHICGlobal["HIC_DraggingStretchItemUp"] = true;
      _aHICGlobal["HIC_idStretchStart"] = sourceObj.idStretch;
   }
   else if (sourceObj.id == 'imgDown')
   {
      _aHICGlobal["HIC_oIndicator"].style.pixelTop = eventObj.clientY - eventObj.offsetY + 4 +  g_oTargetDocument.body.scrollTop - (Number(sourceObj.rowSpan) + 1)*19 + 3;
      _aHICGlobal["HIC_oIndicator"].style.pixelWidth =  GetElement(eventObj.srcElement, td_id).clientWidth + 2;
      _aHICGlobal["HIC_oIndicator"].style.pixelLeft = eventObj.clientX - eventObj.offsetX + g_oTargetDocument.body.scrollLeft - 8;
      _aHICGlobal["HIC_oIndicator"].style.pixelHeight = (Number(sourceObj.rowSpan) + 1)*19;

      _aHICGlobal["HIC_StartStretchCellHeight"] = Number(_aHICGlobal["HIC_oIndicator"].style.pixelHeight);
      _aHICGlobal["HIC_StartStretchY"] = eventObj.clientY - 2;
      _aHICGlobal["HIC_DraggingStretchItemDown"] = true;
      _aHICGlobal["HIC_idStretchStart"] = sourceObj.idStretch;
   }

   _aHICGlobal["HIC_oTableBack"].innerHTML = CreateTableAbs(Number(oStartCell.rowNumber),Number(oStartCell.rowSpan), sourceObj.id);
   _aHICGlobal["HIC_oTableBack"].style.pixelTop = _aHICGlobal["HIC_oIndicator"].style.pixelTop;
   _aHICGlobal["HIC_oTableBack"].style.pixelWidth = _aHICGlobal["HIC_oIndicator"].style.pixelWidth;
   _aHICGlobal["HIC_oTableBack"].style.pixelHeight = _aHICGlobal["HIC_oIndicator"].style.pixelHeight;
   _aHICGlobal["HIC_oTableBack"].style.pixelLeft = _aHICGlobal["HIC_oIndicator"].style.pixelLeft;
   _aHICGlobal["HIC_oTableBack"].style.visibility = "visible";
   _aHICGlobal["HIC_oIndicator"].innerHTML = StartCellHTML;
   _aHICGlobal["HIC_oIndicator"].all("dragimg").filters.alpha.opacity=100;
   _aHICGlobal["HIC_oIndicator"].style.display = "block";

   eventObj.cancelBubble = true;

   g_nItemType = eventObj.srcElement.TYPE;
   _aHICGlobal["HIC_nRowStart"]        = Number(oStartCell.rowNumber);
   _aHICGlobal["HIC_nRowEnd"]          =  Number(oStartCell.rowNumber) + Number(oStartCell.rowSpan);
   _aHICGlobal["HIC_nTimeSlotStretch"] = oStartCell.timeSlot;
}

function onBeginStrechMouseUp (sourceObj, eventObj)
{
   if (_aHICGlobal["HIC_DraggingStretchItemUp"] || _aHICGlobal["HIC_DraggingStretchItemDown"])
   {
   }
}

function EndStretchRelease ()
{
   var newPixelHeight = _aHICGlobal["HIC_oIndicator"].style.pixelHeight;

   var sDate      = "";
   var eDate      = "";
   var inputSet   = NewPropertySet ();
   var aStartTime, aEndTime;
   var data      = _aHICGlobal["HIC_nTimeSlotStretch"];
 
   if (_aHICGlobal["HIC_DraggingStretchItemDown"])
   {
      nRow = _aHICGlobal["HIC_nRowStart"] + Math.ceil(newPixelHeight/19);
      if (nRow == _aHICGlobal["HIC_nRowEnd"])
      {
         ClearDragStretch ();
         return;
      }
      aStartTime   = (_aHICGlobal["HIC_aTimeCells"][_aHICGlobal["HIC_nRowStart"]].children[0].time).split(":");
      
      if (nRow == (_aHICGlobal["HIC_aTimeCells"].length - 1))
         aEndTime   = (_aHICGlobal["HIC_aTimeCells"][0].children[0].time).split(":");
      else
         aEndTime   = (_aHICGlobal["HIC_aTimeCells"][nRow].children[0].time).split(":");
   }   
   else
   {
      nRow = _aHICGlobal["HIC_nRowEnd"] - Math.floor(newPixelHeight/19);
      if (nRow == _aHICGlobal["HIC_nRowStart"])
      {
         ClearDragStretch ();
         return;
      }
      aStartTime = (_aHICGlobal["HIC_aTimeCells"][nRow].children[0].time).split(":");      
      
      if (_aHICGlobal["HIC_nRowEnd"] == (_aHICGlobal["HIC_aTimeCells"].length - 1))
         aEndTime   = (_aHICGlobal["HIC_aTimeCells"][0].children[0].time).split(":");
      else
         aEndTime   = (_aHICGlobal["HIC_aTimeCells"][_aHICGlobal["HIC_nRowEnd"]].children[0].time).split(":");
   }
   
   sDate = new Date(SCHED_PARAMS.dateRange[data]);
   sDate.setHours(aStartTime[0], aStartTime[1], aStartTime[2]);
   sDate = sDate.HICtoDateString("MM/DD/YYYY HH:MM:SS");
   
   if (nRow == (_aHICGlobal["HIC_aTimeCells"].length - 1)
      || _aHICGlobal["HIC_nRowEnd"] == (_aHICGlobal["HIC_aTimeCells"].length - 1))
   {
      eDate = new Date(SCHED_PARAMS.dateRange[data].increaseDay ());
      eDate.setHours(aEndTime[0], aEndTime[1], aEndTime[2]);
      eDate = eDate.HICtoDateString("MM/DD/YYYY HH:MM:SS");
   }
   else
   {
      eDate = new Date(SCHED_PARAMS.dateRange[data]);
      eDate.setHours(aEndTime[0], aEndTime[1], aEndTime[2]);
      eDate = eDate.HICtoDateString("MM/DD/YYYY HH:MM:SS");
   }
   
   inputSet.SetProperty ("NewStartDate", sDate);
   inputSet.SetProperty ("NewEndDate", eDate);
   inputSet.SetProperty ("RowId", _aHICGlobal["HIC_idStretchStart"]);
   
   SaveScroll ();
   EditRecord (inputSet);
}


function onSlotKeyPress (eventObj, type)
{
   // checkif the calendar is in No Insert or No Update mode
   if (g_bNoInsert || g_bNoUpdate)
      return;

   if (!IsAppletActive ())
      return;
   
   var sText = eventObj.srcElement.innerText;
   var oDivCell;
   
   if (eventObj.srcElement.id == 'inputInPlace')
   {
      eventObj.cancelBubble = true;
   }
   else 
   {
      if (type == 'Add')
      {
         sInput = "<TEXTAREA ID=inputInPlace STYLE='height:100%;width:100%;overflow:hidden;'  ONMOUSEDOWN='event.cancelBubble=true;this.focus();' ONBLUR=HIC_Calendar_OnBlur(this" + ",'" + type + "') ONMOUSEUP='event.cancelBubble=true;this.focus();' ONCLICK='event.cancelBubble=true;this.focus();' ONKEYPRESS=HIC_Calendar_TextAreaKeyPress(this" + ",'" + type + "') ONPASTE='HIC_Calendar_TextAreaPaste(this)'></TEXTAREA>"
         //g_sOldInnerText = eventObj.srcElement.innerText;
         g_sOldInnerHTML = eventObj.srcElement.innerHTML;
         eventObj.srcElement.innerHTML = sInput;
      }
      else   
      {
         oDivCell = GetParentElementByTagandId(eventObj.srcElement, "DIV", "DIV_TDCELL");
         
         // If the event happens on the <TD> that contains the DIV (can happen if the slot is highlighted but the cell
         // doesn't), oDivCell will be null.
         if (oDivCell == null)
            return;
            
         // No action if it is private item
         if (g_aPrivateItems[oDivCell.rowid] != null)
            return;
         
         // Get the text to be edited
         sText = g_aId2UpdateField[oDivCell.rowid];
         
         sInput = "<TEXTAREA  rowid=" + oDivCell.rowid + " ID=inputInPlace STYLE='padding:3px;height:100%;width:100%;overflow:hidden;' ONMOUSEDOWN='event.cancelBubble=true;this.focus()' ONBLUR=HIC_Calendar_OnBlur(this" + ",'" + type + "') ONMOUSEUP='event.cancelBubble=true;this.focus()' ONCLICK='event.cancelBubble=true;this.focus()' ONKEYPRESS=HIC_Calendar_TextAreaKeyPress(this" + ",'" + type + "') ONPASTE='HIC_Calendar_TextAreaPaste(this)'></TEXTAREA>"
         //g_sOldInnerText = eventObj.srcElement.innerText;
         g_sOldInnerHTML = oDivCell.innerHTML;
         
         oDivCell.parentElement.style.border = "none";
         oDivCell.parentElement.style.padding = "0px";
         oDivCell.style.border = "none";
         oDivCell.innerHTML = sInput;
         _aHICGlobal["HIC_OldInnerDivWidth"] = oDivCell.style.width;
         oDivCell.style.width = oDivCell.parentElement.offsetWidth-2;
      }      

      g_oInput = g_oTargetDocument.getElementById('inputInPlace');
      g_oInput.focus ();
      g_oInput.select ();
      
      if ((nIndex = sText.indexOf("\n")) != -1)
         sText = sText.substr(nIndex+1);

      g_sOldInnerText = sText;
      
      if (type == 'Add' || eventObj.keyCode == 27 || eventObj.keyCode == 13)
         g_oInput.value = TrimLeft(sText);
      else 
         g_oInput.value = TrimLeft(sText)+ String.fromCharCode(eventObj.keyCode);      
   }      
}

function onInputBlur (sourceObj,eventObj,type)
{
   var nIndex;
   var sDesc = sourceObj.value;

   if((nIndex = g_sOldInnerText.indexOf("\n")) != -1)
      g_sOldInnerText = g_sOldInnerText.substr(nIndex+1);

   if (type == "Add")
   {
      if (TrimBlank(sDesc) != "")
         AddRecordInPlace (_aHICGlobal["HIC_dtStart"].HICtoDateString("MM/DD/YYYY HH:MM:SS"), _aHICGlobal["HIC_dtEnd"].HICtoDateString("MM/DD/YYYY HH:MM:SS"),sDesc);
      else
         RestoreInput ();
   }
   else if (type == "Edit")
   {
      if (TrimLeft(g_sOldInnerText) == TrimLeft(sDesc))
      {
         if (sourceObj.parentElement)
         {
            sourceObj.parentElement.style.width = _aHICGlobal["HIC_OldInnerDivWidth"]
            sourceObj.parentElement.innerHTML = g_sOldInnerHTML;
            g_oInput = null;
         }
      }
      else
      {
         var inputSet = NewPropertySet ();
         g_nItemType = sourceObj.parentElement.TYPE;

         inputSet.SetProperty ("NewDescription", sDesc);
         inputSet.SetProperty ("RowId", eventObj.srcElement.rowid);
         EditRecord (inputSet);
      }
   }
   _aHICGlobal["HIC_SchedDrag"] = false;
}


//-------------------------------------------------------------------------------------------------
//
// Call back function for Siebel controls
//
//-------------------------------------------------------------------------------------------------
function dateCallback (event, date)
{
   switch (event)
   {
      case "onMenuDrop":
      {
         if (ActivateApplet ())
            g_oDatePicker.ShowPopup ();
         
         g_oDatePicker.SetFocus (false);
         break;
      }

      case "onDate":
      {
         var dtNewDate = new Date (date);
         
         if (dtNewDate.compare (SCHED_PARAMS.selectedDay) != 0)
         {
            if (SCHED_PARAMS.viewMode == 0)   
            {   
               SCHED_PARAMS.selectedDay = new Date (date);
               gotoDay (date);
            }
            else if (SCHED_PARAMS.viewMode == 1)
            {
               // TODO: if the date in is in the current week, no action
               SCHED_PARAMS.selectedDay = new Date (date);
               gotoWeek (date);
            }
            else if (SCHED_PARAMS.viewMode == 2)
            {
               // TODO: If the date is in the current month, no action
               SCHED_PARAMS.selectedDay = new Date (date);
               gotoMonth (date);
            }
         }
         
         g_oDatePicker.blur ();
         break;
      }
      case "onFocus":
      {   
         if (id.bDrop == false || id.bDrop == 'undefined')
            id.blur ();
      }      
   }
}

function accessListCallback (event)
{
   switch (event)
   {
      case "onMenuDrop":
      {
         if (ActivateApplet ())
            g_oAccessListObject.ShowPopup ();
         g_oAccessListObject.SetFocus (false);
         break;
      }
      
      case "onMenuSelect":
      {
         if (g_oAccessListObject.Value == g_sSelectedUser)
            return;
         else if (g_oAccessListObject.Value == "ALLEMPLOYEES")
         {
            var inputSet = NewPropertySet ();
            InvokeMethod ("GoToEmployeeCalView", inputSet);
            return;
         }
         else
         {
            g_sSelectedUser = g_oAccessListObject.Value;
         }
         
         //also check if the user is the same as login name and come from External calendar
         if (g_sSelectedUser == g_sLoginUserLoginName) 
         {   
            if (window.external.GetAppletUserProp ("FromExternalCalendar") == "Y")
            {
               g_oAccessListObject.SetFocus (false);
               var inputSet = window.external.CreateCOMPropertySet();
               inputSet.SetProperty ("SelectedUser", g_sSelectedUser);
               InvokeMethod("GoToExternalCalView", inputSet);
               return;
            }
         } 

         CheckUserPermission (g_sSelectedUser);
         
         g_oAccessListObject.SetFocus (false);
         DoPopulate ();

         break;
      }
   }
}

function timeZoneCallback (event)
{
   switch (event)
   {
      case "onMenuDrop":
      {
         if (ActivateApplet ())
            g_oTimeZonePicker.ShowPopup ();
            
         g_oTimeZonePicker.SetFocus(false);
         break;
      }

      case "onMenuSelect":
      {
         var tempTimeZone = g_oTimeZonePicker.Value; // 12551879
         if (g_sSelectedTimeZone != tempTimeZone) 
         {
            g_sSelectedTimeZone = tempTimeZone;
            g_oTimeZonePicker.SetFocus (false);
            DoPopulate ();
         }

         break;
      }
   }
}

function filterCallback (event)
{
   switch (event)
   {
      case "onMenuDrop":
      {
         if (ActivateApplet ())
            g_oFilterPicker.ShowPopup ();
         g_oFilterPicker.SetFocus (false);
         break;
      }
      
      case "onMenuSelect":
      {
         if (g_oFilterPicker.Value == g_sSelectedFilter)
            return;
         else
         {
            g_sSelectedFilter = g_oFilterPicker.Value;
         }

         g_oFilterPicker.SetFocus (false);
         DoPopulate ();

         break;
      }
   }
}

function onPrintButton ()
{
   if (!ActivateApplet ())
      return;
   
   var bHasReports = false;
   var accessDBName = "";
   
   switch (SCHED_PARAMS.viewMode)
   {      
      case 0:
      {
         bHasReports = (GetUserProp ("Has Daily Report") == "Y");
         accessDBName = GetUserProp ("Daily Report Access Base DB Name");
         break;
      }
      case 1:
      {
         bHasReports = (GetUserProp ("Has Weekly Report") == "Y");
         accessDBName = GetUserProp ("Weekly Report Access Base DB Name");
         break;
      }
      case 2:
      {
         bHasReports = (GetUserProp ("Has Monthly Report") == "Y");
         accessDBName = GetUserProp ("Monthly Report Access Base DB Name");
         break;
      }
   }
   
   if (bHasReports == true)
   {
      var height=200, width=500;
      var inputPopupSet = NewPropertySet ();

      inputPopupSet.SetProperty ("SWETA", "HIC Select Print Format Popup Applet");
      inputPopupSet.SetProperty ("SWEM", "Edit");
      inputPopupSet.SetProperty ("SWESP", "true");
      inputPopupSet.SetProperty ("SWEH", height);
      inputPopupSet.SetProperty ("SWEW", width);
      inputPopupSet.SetProperty ("ViewMode", SCHED_PARAMS.viewMode);
      inputPopupSet.SetProperty ("CalSelectedUser", g_sSelectedUser);
      inputPopupSet.SetProperty ("CalSelectedUserName", g_aAccessListLogin2Display[g_sSelectedUser]);
      inputPopupSet.SetProperty ("CalStartDate", SCHED_PARAMS.startDate.HICtoDateString("mm/dd/yyyy"));
      inputPopupSet.SetProperty ("CalEndDate", SCHED_PARAMS.endDate.HICtoDateString("mm/dd/yyyy"));
      inputPopupSet.SetProperty ("CalSelectedDate", SCHED_PARAMS.selectedDay.HICtoDateString("mm/dd/yyyy"))
      inputPopupSet.SetProperty ("PrivateLabel", g_sPrivateLabel);   
      inputPopupSet.SetProperty ("Report Access Base DB Name", accessDBName);
      InvokeMethod ("ShowPopup", inputPopupSet);
   }
   else
   {
      PrintHICCalGrid ();
   }
}

function onTodayButton ()
{
   var currentDate = new Date ();
   
   // If current date is today, no action
   if (currentDate.compare (SCHED_PARAMS.selectedDay) == 0)
      return;
      
   switch (SCHED_PARAMS.viewMode)
   {      
      case 0:
      {
         gotoDay (currentDate);
         break;
      }
      case 1:
      {
         gotoWeek (currentDate);   
         break;
      }
      case 2:
      {
         SCHED_PARAMS.selectedDay = new Date (currentDate);
         gotoMonth (currentDate);
         break;
      }
   }
}

function onNewButton ()
{
   if (g_bNoInsert)
      return;

   if (!ActivateApplet ())
      return;

   var  dtCurrDay = new Date ();
   var  dtCurrStart, EndDuration, dtCurrEnd, nMinutes, nMinTonextTimeInterval,dtCurHour;
      
   dtCurrStart =  new Date(SCHED_PARAMS.selectedDay);
   dtCurrStart.setHours(dtCurrDay.getHours ());
   dtCurrStart.setSeconds(0);
   
   dtCurHour = dtCurrDay.getHours ();
   nMinutes = dtCurrDay.getMinutes ();
   if(23 == dtCurHour && nMinutes > 29)
   {
      dtCurrStart.setMinutes(0);
   }
   else
   {
      
      nMinTonextTimeInterval = ((Math.floor(nMinutes/SCHED_PARAMS.slotTimeInterval) + 1) * SCHED_PARAMS.slotTimeInterval) - nMinutes; 
      dtCurrStart.setMinutes(nMinutes + nMinTonextTimeInterval);
   }
   
   EndDuration = GetUserProp ("Preferred Duration");
   EndDuration = (EndDuration == "") ? 30 : parseInt(EndDuration,10);
       
   dtCurrEnd = new Date(dtCurrStart);   
   dtCurrEnd.setMinutes(dtCurrEnd.getMinutes () + EndDuration);
   dtCurrEnd.setSeconds(0);
 
   if(_aHICGlobal["HIC_dtStart"] != null && _aHICGlobal["HIC_dtEnd"] != null)
      AddRecord (_aHICGlobal["HIC_dtStart"].HICtoDateString("MM/DD/YYYY HH:MM:SS"), _aHICGlobal["HIC_dtEnd"].HICtoDateString("MM/DD/YYYY HH:MM:SS"));
   else
      AddRecord (dtCurrStart.HICtoDateString("MM/DD/YYYY HH:MM:SS"), dtCurrEnd.HICtoDateString("MM/DD/YYYY HH:MM:SS"));    
   
}

function PrintHICCalGridEx (printWin, sDvinnerHTML)
{
   var oTheDoc = printWin.document;
   var start = getStartBusDay ();
   var end = getEndBusDay ();
   var nHoursDiff      = end - start; //11; //8:00 am to 7:00 pm
   var nDispRows      = (nHoursDiff * 60) / SCHED_PARAMS.slotTimeInterval + 1;
   var nDispRowHeight   =  41; //Math.floor(610 / nDispRows);    //ACR 435
         
   if (SCHED_PARAMS.viewMode != 0)
      nDispRowHeight -= 1;
            
   var nStartRow = start * 60 / SCHED_PARAMS.slotTimeInterval;
   var nEndRow = end * 60 / SCHED_PARAMS.slotTimeInterval;
   var nDvHeader0Height = 0;

   var regExp1 = new RegExp("<GS9SDIVPRINT>.*</GS9SDIVPRINT>", "g");
   var regExp2 = new RegExp("DISPLAY:.*none", "g");
   var regExp3 = new RegExp("PRINTBORDERT3E4G", "g");
   var regExp4 = new RegExp("PRINTNONBUSY46D345", "g");
   var regExp5 = new RegExp("PRINTBRDFILLED2D4g", "g");
   var regExp6 = new RegExp("PRINTTRH56SDEIG:.{1}0", "g");  //FR#12-1SJ56TJ: Replace only the first occurence.
   var regExp7 = new RegExp("PRINTTDH56SDEIG:.*0", "g");
   var regExp8 = new RegExp("PRINTDISPJUD52:.*af", "g");
      
   var a_row = sDvinnerHTML.split("PRINTTR23DGD32GSD");

   for (var cx = 1; cx < a_row.length; cx++)
   {
      a_row[cx] = a_row[cx].replace(regExp6, "HEIGHT:"+nDispRowHeight);
       
      if (cx == a_row.length - 1)
      {
        var last = a_row[cx].split("</TD></TR>");
        a_row[cx] = ">" + last[1];
        continue;
      }
      else if (cx > (nEndRow + 1)) 
      {
        a_row[cx] = "";
        continue;
      }
                
      a_td =a_row[cx].split("PRINTTD23DGD32GSD");

      for (var cx1 = 0;cx1 < a_td.length; cx1++)
      {
         if (cx1 == 0)
         {
            a_td[cx1] = a_td[cx1].replace(regExp3, "BORDER");
            a_td[cx1] = a_td[cx1].replace(regExp7, "HEIGHT:"+nDispRowHeight);
            a_td[cx1] = a_td[cx1].replace("#9a9a9a", "#FFFFFF");  //ACR 435
            a_td[cx1] = a_td[cx1].replace("#9A9A9A", "#FFFFFF");  //ACR 435
         }
         else
         {
            a_td[cx1] = a_td[cx1].replace(regExp4, "BORDER");
            a_td[cx1] = a_td[cx1].replace(regExp1, "");
            a_td[cx1] = a_td[cx1].replace(regExp2, "display:block");
            a_td[cx1] = a_td[cx1].replace(regExp5, "BORDER");
            a_td[cx1] = a_td[cx1].replace("#F0F0F0", "#FFFFFF");
            a_td[cx1] = a_td[cx1].replace("#f0f0f0", "#FFFFFF");
         }
         if (cx1 == 1) // ACR 435 Calendar Printing : Replace the Day header by black while printing
         {
            a_td[cx1] = a_td[cx1].replace("white", "black");  //ACR 435
         }
      }
      a_row[cx] = a_td.join("");
   }

   sDvinnerHTML = a_row.join("");
   oTheDoc.getElementById("outerDv").innerHTML = sDvinnerHTML;
            
   var oTbData0 = oTheDoc.getElementById("tbData0");
   var oTbMainH = oTheDoc.getElementById("tbMainH");
   var cell1 = oTheDoc.getElementById("Cell1");
   var oDvTop0 = oTheDoc.getElementById("dvTop0");
   var oDvInfo0 = oTheDoc.getElementById("dvInfo0");
   var odvData0 = oTheDoc.getElementById("dvData0");
   var otbHeader = oTheDoc.getElementById("tbHeader");
            
   oTbData0.cellSpacing      = "0";
   oTbData0.style.borderCollapse   = "collapse";
   oTbData0.style.backgroundColor   = "#f0f0f0";
   oTbData0.height         = nDispRowHeight * nDispRows;
            
   odvData0.style.overflow  = 'visible';
   odvData0.style.height    = "100%";
   odvData0.style.font="italic bold 12px arial,serif";
   oDvInfo0.style.height    = "100%";

   oDvInfo0.style.borderBottom   = '1px solid black';
   oDvInfo0.style.borderTop   = '1px solid black';
            
   if (oDvTop0 != null)
   {
      oDvTop0.style.width = "0px";
      oDvTop0.removeNode(true);
   }
      
   // ACR 435 Calendar Printing : Some unwanted TDs are getting added when widht is changed , so removing them
   try
   {
      for ( var r = 0;r < oTbMainH.rows.length; r++ )
      {
         for ( var c = 0; c < oTbMainH.rows[r].cells.length ; c++)
         {
            if ( r == 0 && c == 0 )
               continue;
            oTbMainH.rows[r].deleteCell(c); 
            c = 0;
         }
      }
   }
   catch(e)
   {
   }
                    
   oTbMainH.bgColor   = "#f0f0f0";
   oTbMainH.width      = "100%";
   oTbMainH.height      = cell1.style.height;

   if (SCHED_PARAMS.viewMode != 0)
   {
      var slotnumber;
      otbHeader.style.backgroundColor = "#FFFFFF";
      for (slotNumber = 0; slotNumber < 5; slotNumber++)
      {
         var dvHeader = oTheDoc.getElementById("dvSlot" + slotNumber);
         if ( dvHeader.style.backgroundColor == "#6666cc" )
         {
            dvHeader.style.backgroundColor = "#f0f0f0";
            dvHeader.style.color           = "black";
         }
      }
   }
   // oTheDoc.getElementById("dvSlot-1").innerHTML += "<SPAN  style='WIDTH: 64px;' </SPAN>";
   oTbData0.style.position = 'absolute';
 
   nYClipST = nDispRowHeight*nStartRow;
   var nYClipSTBottom = nDispRowHeight*(nDispRows+nStartRow-1);
   oTbData0.style.clip  = 'rect(' + nYClipST + ', auto,' +  nYClipSTBottom + ', auto)';
   oTbData0.style.top   = 3*nDispRowHeight  - nYClipST;//oTbData0.offsetTop - nYClipST;
}


function PrintHICCalGrid ()
{
   var bwName="";
   var bw=0;
   var bwVer = parseInt(navigator.appVersion);
   var printWin;

   if (navigator.appName.indexOf("Microsoft")>-1)
   {  
      bwName = "ie";   
      bw = 1; 
   }
   else if (navigator.appName.indexOf("Netscape")>-1)
   {  
      bwName = "ns";
      bw = 2; 
   }      

   if( (bw==1 && bwVer>=4) || (bw==2 && bwVer>=5) )
   {
      var aBodyHTML = new Array ();
      aBodyHTML[aBodyHTML.length] = "<HTML><HEAD><LINK HREF='" + g_sPageBaseUrl + "files/main.css' REL='stylesheet'/></HEAD><BODY>"
      aBodyHTML[aBodyHTML.length] = "<DIV ID=outerDv></DIV>";
      aBodyHTML[aBodyHTML.length] = "<scr" + "ipt> function window.onbeforeprint(){if(document.getElementById('tbData0')!=null) {tbData0.style.pixelTop -= 22;}";
      aBodyHTML[aBodyHTML.length] = "if(document.getElementById('dvInfo0')!=null) {dvInfo0.style.border='1px solid black';}}</scr" + "ipt>";
      aBodyHTML[aBodyHTML.length] = "<scr" + "ipt> function window.onafterprint(){if(document.getElementById('tbData0')!=null) {tbData0.style.pixelTop += 22;}";
      aBodyHTML[aBodyHTML.length] = "if(document.getElementById('dvInfo0')!=null) {dvInfo0.style.border='0px solid black';}}</scr" + "ipt>";
      aBodyHTML[aBodyHTML.length] = "</BODY></HTML>";
      
      var aDvinnerHTML = new Array();
      aDvinnerHTML[aDvinnerHTML.length] = "<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=0><TR><TD STYLE='font-size:20; font-family:arial; font-weight:bold'>";
      if (SCHED_PARAMS.viewMode == 0)
      {
         var format = GetUserProp("UISTR Print Format Daily");
         if (format == "") 
         {
            format = "DDDD, MMMM DD, YYYY";
         }
         aDvinnerHTML[aDvinnerHTML.length] = SCHED_PARAMS.selectedDay.toDateString (format);
      }
      else if (SCHED_PARAMS.viewMode == 1)
      {
         var tmp;
         var dtEndday = new Date;
         dtEndday.copy (SCHED_PARAMS.endDate);
         dtEndday.decreaseDay ();

         var format = GetUserProp("UISTR Print Format Weekly");
         if (format == "") 
         {
            format = "MMMM DD, YYYY";
         }

         var weekFromTo = GetUserProp("UISTR Print Format WeeklyFromTo");
         if (weekFromTo == "")
         {
            weekFromTo = "%1 - %2";
         }

         tmp = SCHED_PARAMS.startDate.toDateString (format);
         weekFromTo = weekFromTo.replace (/\%1/i, tmp);
         tmp = dtEndday.toDateString (format);
         weekFromTo = weekFromTo.replace(/\%2/i, tmp);
         aDvinnerHTML[aDvinnerHTML.length] = weekFromTo;
      }
      else
      {
         var format = GetUserProp("UISTR Print Format Monthly");
         if (format == "")
         {
            format = "MMMM YYYY";
         }
         aDvinnerHTML[aDvinnerHTML.length] = SCHED_PARAMS.selectedDay.toDateString (format);
      }
      aDvinnerHTML[aDvinnerHTML.length] = "</TD></TR>";
      if (g_bEnableAccessList)
      {
         aDvinnerHTML[aDvinnerHTML.length] = "<TR><TD STYLE='font-size:16; font-family:arial; font-weight:bold'>";
         aDvinnerHTML[aDvinnerHTML.length] = g_oAccessListObject.Value;
         aDvinnerHTML[aDvinnerHTML.length] = "</TD></TR>";
      }
      aDvinnerHTML[aDvinnerHTML.length] = "<TR><TD>&nbsp;</TD></TR><TR><TD>&nbsp;</TD></TR><TR><TD>";
      aDvinnerHTML[aDvinnerHTML.length] = g_oTargetDocument.getElementById("tbMainH").outerHTML;
      aDvinnerHTML[aDvinnerHTML.length] = "</TD></TR></TABLE>";

      var sDvinnerHTML = aDvinnerHTML.join("");
      var re = new RegExp("onMouseOver=|onmousemove=|onmousedown=|onkeypress=|onclick=|ondragenter=|ondragover=|ondragleave=|ondrop=|onfocus=|onblur=|", "gi");
      sDvinnerHTML = sDvinnerHTML.replace(re, ''); 

      re = /<a [^>]*>/gi;
      sDvinnerHTML = sDvinnerHTML.replace(re , "<a>");
      
      re = /\n/gi;
      sDvinnerHTML = sDvinnerHTML.replace(re , '');
      
      if (printWin) { printWin.close(); }
      printWin = window.open('','','width=800,height=600, scrollbars');
      printWin.document.open();
      var oTheDoc = printWin.document;
      oTheDoc.writeln(aBodyHTML.join(""));
      oTheDoc.body.style.visibility   = "hidden";
      oTheDoc.close();
      
      if(SCHED_PARAMS.viewMode == 0  || ((SCHED_PARAMS.viewMode == 1) && g_nWeeklyMode == 1))   
      {   
         PrintHICCalGridEx(printWin, sDvinnerHTML);
      }
      else
      {      
         oTheDoc.getElementById("outerDv").innerHTML = sDvinnerHTML;
         var oTbMainH = oTheDoc.getElementById("tbMainH");
         if (SCHED_PARAMS.viewMode == 1)
         {
            var nMax = 7;
            var nWidth = 454;
            for (var j = 0; j < nMax; j++)
            {
               var id = "dvHeader" + j;
               var oDvHeader = oTheDoc.getElementById(id);
               if (oDvHeader != null)
               {
                  oDvHeader.style.fontSize   = 14
                  oDvHeader.style.fontWeight = "bold"
                  oDvHeader.style.borderBottom = "1px solid #DCDCDC";
               }
               id = "dvInfo" + j;
               var oDvInfo = oTheDoc.getElementById(id);
               if (!g_bStretchCell)
               {
                  oDvInfo.style.position = 'absolute';
                  var nBottom = oDvInfo.offsetHeight;
                  oDvInfo.style.clip = 'rect(auto auto ' + nBottom  + ' auto)';
               }
            }
            //FR# 12-1TE5QUH: Following fixed style used to remove gap in printing weekly calendar. 
            oTbMainH.style.tableLayout = "fixed";
         }
         else
         {
            var nMax = 36;
            var nWidth = 150;
            if (navigator.appVersion.indexOf("MSIE 7.")>-1)
               nWidth =  200;
           
            for (var j = 0; j < nMax; j++)
            {
               var id = "dvHeader" + j;
               var oDvHeader = oTheDoc.getElementById(id);
               if (oDvHeader != null)
               {
                  oDvHeader.style.borderBottom = "1px solid #DCDCDC";
                  oDvHeader.style.width = nWidth + "px";
               }
            }
            var oRow = oTbMainH.rows(0);
            for (var j = 0; j < 6; j++)
            {
               oRow.cells(j).style.fontWeight = "bold";
               oRow.cells(j).style.width = nWidth + "px";
            }
         }
            
         // FR# 12-1TE5QUH: Removing all hardcoding of pixel values so as to maximize paper utilization.
         if (1 == SCHED_PARAMS.viewMode)   
         {
            for (var i = 0; i < nMax; i++)
            {
               var id = "tileCell" + i;
               var oCell = oTheDoc.getElementById(id);
               if (oCell != null)
                  oCell.width = "50%";

               id = "dvData" + i;
               oCell = oTheDoc.getElementById(id);
               if (oCell != null)
                  oCell.style.width = "100%";
            }
         }
         else
         {
            for (var i = 0; i < nMax; i++)
            {
               var id = "tileCell" + i;
               var oCell = oTheDoc.getElementById(id);
               if (oCell != null)
                  oCell.width = nWidth;

               id = "dvData" + i;
               oCell = oTheDoc.getElementById(id);
               if (oCell != null)
                  oCell.style.width = nWidth + "px";
            }
         }         
         oTbMainH.cellSpacing    = "0";
         oTbMainH.border         = 1;
         oTbMainH.borderColor    = "gray";         
         oTbMainH.style.borderCollapse   ="collapse";
         oTbMainH.height         = 400;
      }         

      oTheDoc.body.style.visibility = "visible";

      printWin.print ();
      printWin.close ();
   }
   else 
   {   
      //No special print format available for your browser so print is executed directly from the page.
      printWin.print ();
   }
}

function BuildFieldIndexes (dataPropSet)
{
   var i = 0;
   var sFieldName;
   if (g_aFieldName2Index != null)
      return;
      
   g_aFieldName2Index = new Array ();
   while ((sFieldName = dataPropSet.GetProperty (String (i))) != null && sFieldName != "")
   {
      g_aFieldName2Index[sFieldName] = String (i);
      i++;
   }
   
   if (i == 0)
      g_aFieldName2Index = null;
}

function HighlightCell (eventObj)
{
   if (_aHICGlobal["HIC_idHightlightElement"] != null && eventObj.srcElement.id == _aHICGlobal["HIC_idHightlightElement"].id)
      return;
   
   _aHICGlobal["HIC_idHightlightElement"] = eventObj.srcElement;
   eventObj.srcElement.dragbgcolor = eventObj.srcElement.style.backgroundColor;
      
   //HSAPUTRA: modify this to support drag and drop from SWE
   if  (typeof(eventObj.srcElement) != 'undefined' && (_aHICGlobal["HIC_DraggingItem"] || g_bIsDragItemFromSWE) && (eventObj.srcElement.tagName == 'TD' || eventObj.srcElement.tagName == 'DIV' ))
      eventObj.srcElement.style.backgroundColor = "#6666cc";  
}


function CellBorderFocus (eventObj)
{
   if (!IsAppletActive ())
      return;
   
   _aHICGlobal["HIC_LastFocusItem"] = GetParentElementByTagandId(eventObj.srcElement, "DIV", "DIV_TDCELL");
   _aHICGlobal["HIC_LastFocusItem"].parentElement.style.border = "1px solid #6666cc";

   var DragImg = _aHICGlobal["HIC_LastFocusItem"].all("dragimg");
   if (DragImg != null)
      DragImg.filters.alpha.opacity=100;
}


function RemoveCellBorderFocus (eventObj)
{
   if (_aHICGlobal["HIC_LastFocusItem"] != null)
   {
      _aHICGlobal["HIC_LastFocusItem"] = GetParentElementByTagandId(eventObj.srcElement, "DIV", "DIV_TDCELL");
      _aHICGlobal["HIC_LastFocusItem"].parentElement.style.border = "1px solid silver";
   
      var DragImg = _aHICGlobal["HIC_LastFocusItem"].all("dragimg");
      if (DragImg != null)
         DragImg.filters.alpha.opacity=0;
   }
}

function onDragLeave (eventObj)
{
   //HSAPUTRA: to support drag and drop from SWE
   g_sSWEAppletName = "";   
   g_sSWERowIds = "";
   
   UnHighlightCell (eventObj);
}

function UnHighlightCell (eventObj)
{
   //HSAPUTRA: drag and drop from SWE
   if  (typeof(eventObj) != 'undefined' && typeof(eventObj.srcElement) != 'undefined' && (_aHICGlobal["HIC_DraggingItem"] || g_bIsDragItemFromSWE) && typeof(eventObj.srcElement.rowNumber) != 'undefined')
      {
		
		if (typeof(eventObj.srcElement.dragbgcolor) != 'undefined' && eventObj.srcElement.dragbgcolor == "0")
		{
			// FR - 12-1HPXCY8 - We update the background color depending on whether the row (cell) lies in business or non business hours instead of using
			// 'dragbgcolor' directly as sometimes the value of 'dragbgcolor' gets re-initialized to zero.
			var start = getStartBusDay ();
			var end = getEndBusDay ();
			var slotInterval = SCHED_PARAMS.slotTimeInterval;
			var row = Number((eventObj.srcElement.rowNumber == null) ? 0 : eventObj.srcElement.rowNumber);

			if ((row >= start * 60 / slotInterval) && (row < end * 60 / slotInterval))      
					eventObj.srcElement.style.backgroundColor = SCHED_PARAMS.HUE_BUS_HRS;
				else
					eventObj.srcElement.style.backgroundColor = SCHED_PARAMS.HUE_NON_BUS_HRS;
		}
		else if (typeof(eventObj.srcElement.dragbgcolor) != 'undefined' && eventObj.srcElement.dragbgcolor == "")
		{
			eventObj.srcElement.style.backgroundColor = SCHED_PARAMS.backgroundColor;
		}
		else
			eventObj.srcElement.style.backgroundColor = eventObj.srcElement.dragbgcolor;
		
	  }
}

function onTextAreaKeyPress (sourceObj,eventObj,type)
{
   if ((sourceObj.value.length > 149) && (eventObj.keyCode != 13))
   {
      eventObj.returnValue = false;
      return;
   }
   
   if (eventObj.keyCode == 13 )
   {
      sourceObj.blur ();
      return;
   }
   
   if (eventObj.keyCode == 27 && typeof(sourceObj) != 'undefined' )
   {
      if (type == 'Add')
      {
         if (sourceObj.parentElement)
         {
            sourceObj.parentElement.innerHTML = "";
            clearAllBlanks ();
         }         
      }
      else
      {
         g_oTargetDocument.getElementById("tdMain").focus ();
         sourceObj.value = g_sOldInnerText;
      }
   }
   else
   {
      eventObj.cancelBubble = true;
      sourceObj.focus ();
   }
}

function SaveScroll ()
{
   if (SCHED_PARAMS.viewMode != 2)
   {
      _aHICGlobal["HIC_LastScrollTop"]       = g_oTargetDocument.getElementById("dvInfo0").scrollTop;
      _aHICGlobal["HIC_LastOuterScrollTop"]  = g_oTargetDocument.body.scrollTop;
   }
}

function TrimLeft (sText)
{
   var pos = 0;
   while (sText.charAt(pos) == " ")
   {
      sText = sText.substr(pos+1);
   }
   return sText;
}

function TrimBlank (sText)
{
   var pos = sText.indexOf("\n");
   if (pos != 0)
   {
      sText = sText.substr(pos+1);
   }

   pos = 0;
   while(sText.charAt(pos) == " ")
   {
      sText = sText.substr(pos+1);
   }

   pos = sText.length;
   while (sText.charAt(pos) == " ")
   {
      sText = sText.substring(0, pos-1);
   }

   return sText;
}

function RemoveDragIndicator ()
{
   if (_aHICGlobal["HIC_LastCellDrop"] != null)
      _aHICGlobal["HIC_LastCellDrop"].style.backgroundColor = _aHICGlobal["HIC_LastCellDrop"].dragbgcolor;

   if (_aHICGlobal["HIC_oDragIndicator"] != null)
   {      
      _aHICGlobal["HIC_oDragIndicator"].style.visibility = "hidden";
      _aHICGlobal["HIC_DraggingItem"] = false;
   }
   
   if (_aHICGlobal["HIC_DraggedStartItem"] != null)
      _aHICGlobal["HIC_DraggedStartItem"].style.border = "1px solid silver";
}

function RestoreInput ()
{
   if (g_oInput != null && g_oInput.parentElement != null)
   {
      g_oInput.parentElement.style.width = _aHICGlobal["HIC_OldInnerDivWidth"];
      g_oInput.parentElement.innerHTML = g_sOldInnerHTML;   
      g_oInput = null;
   }
}

function ClearDragStretch ()
{
   _aHICGlobal["HIC_DraggingStretchItemDown"] = false;
   _aHICGlobal["HIC_DraggingStretchItemUp"] = false;
   _aHICGlobal["HIC_idStretchStart"] = "";
   _aHICGlobal["HIC_oIndicator"].style.display = "none";
   _aHICGlobal["HIC_oTableBack"].style.visibility = "hidden";
   _aHICGlobal["HIC_StartStretchCellHeight"] = 0;
   _aHICGlobal["HIC_StartStretchY"] = 0;
   _aHICGlobal["HIC_nTimeSlotStretch"] = 0;
}

function GetElement (Element, idStop)
{
   oTD = Element;
   
   while (oTD != null)
   {
      if (oTD.id == idStop)
         break;
      else
         oTD = oTD.parentElement;
   }
   return oTD;
}

function GetParentElementByTagandId (Element, idTag, id)
{
   oTD = Element;
   
   while (oTD != null)
   {
      if (oTD.tagName == idTag && oTD.id == id)
         break;
      else
         oTD = oTD.parentElement;
   }
   return oTD;
}

function CreateBackTableForDrag (startrow,numrows, direction, startslot ,starttime, startCellid)
{
   var first = startrow;
   var slotInterval = SCHED_PARAMS.slotTimeInterval;
   var start = getStartBusDay ();
   var end = getEndBusDay ();
   var duration = Number(startrow) + Number(numrows);
   var nTime = new Date(Number(starttime));
   var time, sDate;
   var sTable = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 style='width:100%;z-index:6' ID=Table2>";
      
   for (; startrow < duration; startrow++)
   {
      if (startrow == first)
         sTable += "<TR ><TD Dragbackid=BackTableDrag    id=" + startCellid;
      else
         sTable += "<TR ><TD Dragbackid=BackTableDrag    id=BackTableDrag" + startrow;
      
      sTable += " ONDROP=_HIC_Calendar_onDropItem(this" + ",'" + startslot + "') ONDRAGENTER=_HIC_Calendar_CancelDef() ONDRAGOVER=_HIC_Calendar_CancelDef() ONDRAGLEAVE=_HIC_Calendar_DragLeave() time=" + starttime
      nTime.setMinutes(nTime.getMinutes() + SCHED_PARAMS.slotTimeInterval);
      starttime = nTime.valueOf ();
      sTable += " style='background-color:";

      if ((startrow >= start * 60 / slotInterval) && (startrow < end * 60 / slotInterval))      
         sTable += SCHED_PARAMS.HUE_BUS_HRS;
      else
         sTable += SCHED_PARAMS.HUE_NON_BUS_HRS;
         
      sTable +=";border-bottom:1px solid silver;padding:0;width:100%;height:19px'>&nbsp</TD></TR>";
   
   }
   sTable += "</TABLE>";
   return sTable;
}

function CreateTableAbs (startrow,numrows, direction)
{
   var slotInterval = SCHED_PARAMS.slotTimeInterval;
   var start = getStartBusDay ();
   var end = getEndBusDay ();
   var duration = startrow + numrows;
   var sTable = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 style='width:100%;' ID=Table3>";

   for (; startrow < duration; startrow++)
   {
      sTable += "<TR ><TD style='background-color:";

      if ((startrow >= start * 60 / slotInterval) && (startrow < end * 60 / slotInterval))      
         sTable += SCHED_PARAMS.HUE_BUS_HRS;
      else
         sTable += SCHED_PARAMS.HUE_NON_BUS_HRS;
         
      if (direction == 'imgUp')
         sTable +=";border-bottom:1px solid silver;padding:0;width:100%;height:19px'>&nbsp</TD></TR>";
      else
         sTable +=";border-top:1px solid silver;padding:0;width:100%;height:19px'>&nbsp</TD></TR>";
   }
   sTable += "</TABLE>";
   return sTable;
}

function ClearFocus ()
{
   _aHICGlobal["HIC_LastFocusItem"]  = null;      
   g_oInput = null;
}

function onDayMouseOver (sourceObj, eventObj)
{
   var toolTip = g_oPropset.GetProperty (g_aDateCellMap[sourceObj.tag]+ "Header");

   if (toolTip == null || typeof(toolTip) == 'undefined')
   {
      sourceObj.title = "";
      return;
   }
        
   sourceObj.title = toolTip;
}

function onClickScrollDown ()
{
   g_oTargetDocument.getElementById(_aHICGlobal["HIC_FirstTDtoScroll"][_aHICGlobal["HIC_FirstTDtoScroll"].length - 1]).scrollIntoView(false)
   g_oTargetDocument.getElementById("dvInfo0").scrollTop +=  (Number(g_oTargetDocument.getElementById(_aHICGlobal["HIC_FirstTDtoScroll"][_aHICGlobal["HIC_FirstTDtoScroll"].length - 1]).rowSpan)) * 19
}

function onClickScrollUp ()
{
   g_oTargetDocument.getElementById(_aHICGlobal["HIC_FirstTDtoScroll"][0]).scrollIntoView(true);
   g_oTargetDocument.getElementById("dvInfo0").scrollTop -= 19;
}

function GetStartInterval (date)
{      
   var nHour     = date.getHours ();
   var nMinute   = date.getMinutes ();
   var nRemainer = nMinute % SCHED_PARAMS.slotTimeInterval;

   nMinute -= nRemainer;

   return ((nHour + (nMinute / 60)) * 60 / SCHED_PARAMS.slotTimeInterval);
}

function GetEndInterval (date, multiDays)
{
   if (multiDays)
   {
      return (g_nMinutesInDay/SCHED_PARAMS.slotTimeInterval);      
   }
   
   var nHour      = date.getHours ();
   var nMinute    = date.getMinutes ();
   var nRemainer  = nMinute % SCHED_PARAMS.slotTimeInterval;

   if (nRemainer != 0)
      nMinute = nMinute + SCHED_PARAMS.slotTimeInterval - nRemainer;

   return ((nHour + (nMinute / 60)) * 60 / SCHED_PARAMS.slotTimeInterval);
}

function Replace5DayBlankCacheTimes ()
{
      sHTML = _aHICGlobal["HIC_5DayBlankHTMLCache_master"];
      var g_sFiveCacheHTML  = sHTML.split("8U-YGSDG7B-~- time=");
      var nTime         = new Date(1975, 1, 30, 0, 0);
   
      var Item, sDate;
      var sStringout = new Array ();
      var count;

      var FiveDateArray = new Array ();
   
      for (var u=0; u < SCHED_PARAMS.timeSlots; u++)
         FiveDateArray[u] = new Date(SCHED_PARAMS.dateRange[u])
            
      for (var t=1; t < g_sFiveCacheHTML.length; t++)
      {
         Item = g_sFiveCacheHTML[t].split("IYU23G9ZM~*~")
         count =  (t-1) % 5
         if ( count  == 0 &&  t != 1 )
            nTime.setMinutes(nTime.getMinutes () + SCHED_PARAMS.slotTimeInterval);
         
         sDate = FiveDateArray[count];
         sDate.setHours(nTime.getHours ());
         sDate.setMinutes(nTime.getMinutes ());
         sDate.setSeconds(nTime.getSeconds ());

         if (t == 1)
            sStringout[sStringout.length] = g_sFiveCacheHTML[0];
            
         sStringout[sStringout.length] = " 8U-YGSDG7B-~- time=";
         sStringout[sStringout.length] =  sDate.valueOf ();
         sStringout[sStringout.length] = " IYU23G9ZM~*~";
         sStringout[sStringout.length] = Item[1];
      }
   
      _aHICGlobal["HIC_5DayBlankHTMLCache_current"] = sStringout.join("");
}

//-------------------------------------------------------------------------------------------------
// Build the 5 day header
// 
//-------------------------------------------------------------------------------------------------
function Build5DayHeaderCache ()
{
      var htmlArray  = new Array ();
      var bkgColor   = GetUserProp ("Background Color");
      var nIndex     = 0;
      var sDateString;
      var sDateFormat= GetUserProp ("UISTR 5 Day Weekly Header Format");
      
      if (sDateFormat == "")
         sDateFormat = "DDD D";
      
      htmlArray[nIndex++] = "<TABLE ID=tbHeader BGCOLOR=" + bkgColor + " CELLPADDING=0 CELLSPACING=1 HEIGHT=100% WIDTH=100%><TR>";
      
      // Timeslot column
      if (g_bRTLWindow)
         htmlArray[nIndex++] = "<TD ID=dvSlot-1 STYLE=padding-right:" + g_nTimeSlotWidth + "px></TD>";
      else
         htmlArray[nIndex++] = "<TD ID=dvSlot-1 STYLE=padding-left:" + g_nTimeSlotWidth + "px></TD>";

      // Day column (5)
      for (var date in SCHED_PARAMS.dateRange)
      {
         sDateString = SCHED_PARAMS.dateRange[date].HICtoDateString("mm/dd/yyyy");
         htmlArray[nIndex++] = "<TD ALIGN=center NOWRAP WIDTH=";
         htmlArray[nIndex++] = Math.floor(100 / SCHED_PARAMS.timeSlots);
         htmlArray[nIndex++] = "% TITLE='";
         if ((SCHED_PARAMS.dateData[date] != "") && (SCHED_PARAMS.dateData[date] != null) &&  (typeof(SCHED_PARAMS.dateData[date]) != 'undefined'))
         {
            htmlArray[nIndex++] = SCHED_PARAMS.dateData[date];
         }
         htmlArray[nIndex++] = "'><DIV ID=dvSlot";
         htmlArray[nIndex++] = date;
         htmlArray[nIndex++] = " STYLE=cursor:hand;height:100%;padding-top:5;font-weight:bold ONCLICK=gotoDay('" + sDateString + "')>";
         htmlArray[nIndex++] = g_oLocale.getStringFromDateTime(sDateString, "MM/DD/YYYY", sDateFormat);
         htmlArray[nIndex++] =  "</DIV></TD>";
      }
   
      // Column for the vertical scrollbar
      htmlArray[nIndex++] = "<TD STYLE=padding-left:" + g_nScrollBarWidth + "px></TD>";
      
      htmlArray[nIndex++] = "</TR></TABLE>";
      return(htmlArray.join(""));
}

function BuildCachePtrs ()
{
   var oTable = g_oTargetDocument.getElementById ("tbData0");
   HIC_DataTable = oTable;
   for (i=0; i<oTable.rows.length; i++)
   {   
      _aHICGlobal["HIC_aTimeCells"][i] = oTable.rows[i].cells[0];
      for (var c = 0; c < SCHED_PARAMS.timeSlots; c++)
      {
         _aHICGlobal["HIC_aSlotWidths"][c] = oTable.rows[i].cells["_td_slwidth" + c];
      }
   }
}

function CacheArrayCellContents ()
{
   var tTR = new Array ();
   var tTD = new Array ();
   var oOutput = new Array ();

   var tTR = _aHICGlobal["HIC_5DayBlankHTMLCache_current"].split("<%~~TR~~%>");

   oOutput[oOutput.length] = tTR[0];
   for (var t=1; t < tTR.length; t++)
   {
      tTD[t] = tTR[t].split("<%~~BegTD~~%>");
      oOutput[oOutput.length] = tTD[t][0];
      oOutput[oOutput.length] = tTD[t][1];
      oOutput[oOutput.length] = tTD[t][2];
      oOutput[oOutput.length] = tTD[t][3];
      oOutput[oOutput.length] = tTD[t][4];
      
      if ( t == (tTR.length-1))
      {
         oOutput[oOutput.length] = tTD[t][5].substr(0,tTD[t][5].length-13);
         oOutput[oOutput.length] = tTD[t][6] = "</TR></TABLE>";
      }
      else
      {
         oOutput[oOutput.length] = tTD[t][5].substr(0,tTD[t][5].length-5);
         oOutput[oOutput.length] = tTD[t][6] = "</TR>";
      }
   }
   _aHICGlobal["HIC_5DayArrayCell_current"] = oOutput;
}

function InsertToCache (c,d,nRow, celldata, nVSlots, nCalOffSetWidth, nCalClientWidth, nTime)                     
{
   var sImgUp     = "";
   var sImgDown   = "";
   var __a        = new Array();
   var sDate;
   var sCellId    = "td_" + c + "_" + nRow + "_" + d;

   __a[__a.length] = "<TD PRINTTD23DGD32GSD ";
   __a[__a.length] = " ID=";
   __a[__a.length] = "td_" + c + "_" + nRow + "_" + d;
   __a[__a.length] = " COLSPAN=";
   __a[__a.length] = celldata.nColSpan;
   __a[__a.length] = " ROWSPAN=";
   __a[__a.length] = celldata.nRowSpan;
   __a[__a.length] = " VALIGN=TOP";
   __a[__a.length] = " WIDTH=";

   sDataWidth = Math.floor(((nCalOffSetWidth - 45 - (SCHED_PARAMS.timeSlots*6)) * (100 / SCHED_PARAMS.timeSlots/ nVSlots * celldata.nColSpan) / 100))- 3
   __a[__a.length] = sDataWidth;
                     
   sDate = new Date (SCHED_PARAMS.dateRange[c]);
   sDate.setHours (nTime.getHours());
   sDate.setMinutes (nTime.getMinutes());
   sDate.setSeconds (nTime.getSeconds());

   _aHICGlobal["HIC_FirstTDtoScroll"][_aHICGlobal["HIC_FirstTDtoScroll"].length] = sCellId;
                        
   __a[__a.length] = " timeSlot=";
   __a[__a.length] = c;
   __a[__a.length] = " vSlot=";
   __a[__a.length] = d;
   __a[__a.length] = " rowNumber=";
   __a[__a.length] = nRow;
   __a[__a.length] = " 8U-YGSDG7B-~- time=";
   __a[__a.length] = sDate.valueOf ();
   __a[__a.length] = " IYU23G9ZM~*~ options=";
   __a[__a.length] = celldata.sOptions;
   __a[__a.length] = " ONMOUSEDOWN=_HIC_Calendar_onSchedMouseDownEx(this)";
   __a[__a.length] = " ONMOUSEMOVE=_HIC_Calendar_onSchedMouseMoveEx(this)";
   __a[__a.length] = " ONKEYPRESS=_HIC_Calendar_OnSlotKeyPress('Edit')";
   __a[__a.length] = " ONDROP=_HIC_Calendar_onDropItem(this" + ",'" + c + "')";
   __a[__a.length] = " ONDRAGENTER=_HIC_Calendar_CancelDef()";
   __a[__a.length] = " ONDRAGOVER=_HIC_Calendar_CancelDef()";
   //__a[__a.length] = " dragbgcolor=0 ONDRAGLEAVE=_HIC_Calendar_DragLeave()";
   __a[__a.length] = " dragbgcolor=#E0E0E0 ONDRAGLEAVE=_HIC_Calendar_DragLeave()";

   if (celldata.sOptions.slice(3,4) == 1)
   {
      __a[__a.length] = " STYLE='PRINTBRDFILLED2D4g:2px solid gray;border:1px solid silver;background-color:white'"
   }
   else
   {      
      __a[__a.length] = " STYLE='border:solid silver;background-color:"
      __a[__a.length] =  SCHED_PARAMS.backgroundColor;
      __a[__a.length] =  "'";      
   }

   nType = (celldata.sOptions.slice(5,6) == 0) ? 0 : 1;

   nRowSpan = celldata.nRowSpan - 1;
   nBottomPos = nRowSpan == 0 ? 18 : ((nRowSpan + 1) * 19);

   // sImgUp = "<IMG TYPE=" + nType + " SRC=" + g_sPageBaseUrl + "images/spacer.gif ID=imgUp rowSpan=" + nRowSpan + " rowNumber= " + celldata.rowNumber   + " idStretch=" + celldata.sDocGUID + " ONMOUSEOVER=onCellMouseOver(this,'up') ONMOUSEUP=HIC_onBeginStrechMouseUp() ONMOUSEDOWN=HIC_onBeginStrechMouseDown(this" + ",'" + sCellId + "') STYLE='z-index:9;height:6;width:100%'>";  // Fix for FR 12-1ZFBJE1
   // Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
   sImgUp = "<IMG TYPE=" + nType + " SRC=" + g_sPageBaseUrl + "images/spacer.gif ID=imgUp rowSpan=" + nRowSpan + " rowNumber= " + celldata.rowNumber   + " idStretch=" + celldata.sDocGUID + " ONMOUSEOVER=onCellMouseOver(this,'up'" + ",'" + sCellId + "') STYLE='z-index:9;height:6;width:100%'>";  // Fix for FR 12-1SJ56UP & FR 12-1TXC2SO   

   if (nRow + celldata.nRowSpan < g_nMinutesInDay / SCHED_PARAMS.slotTimeInterval)
   {
      offsetTop = String( Number(celldata.nRowSpan)-1)*19 + 4;
      // sImgDown = "<IMG TYPE=" + nType  + " SRC=" + g_sPageBaseUrl + "images/spacer.gif ID=imgDown rowSpan=" + nRowSpan + " rowNumber=" + String(Number(celldata.rowNumber) + Number(celldata.nRowSpan))   + " idStretch=" + celldata.sDocGUID + " ONMOUSEOVER=onCellMouseOver(this,'down')  ONMOUSEUP=HIC_onBeginStrechMouseUp(this) ONMOUSEDOWN=HIC_onBeginStrechMouseDown(this" + ",'" + sCellId + "') STYLE='z-index:2;position:relative;top:" +  offsetTop +  "px;height:6;width:100%'>"; // Fix for FR 12-1ZFBJE1   
      // Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
      sImgDown = "<IMG TYPE=" + nType  + " SRC=" + g_sPageBaseUrl + "images/spacer.gif ID=imgDown rowSpan=" + nRowSpan + " rowNumber=" + String(Number(celldata.rowNumber) + Number(celldata.nRowSpan))   + " idStretch=" + celldata.sDocGUID + " ONMOUSEOVER=onCellMouseOver(this,'down'" + ",'" + sCellId + "') STYLE='z-index:2;position:relative;top:" +  offsetTop +  "px;height:6;width:100%'>"; // Fix for FR 12-1ZFBJE1           
   }
                        
   if (celldata.nRowSpan == 1)
      offSetTop = 10;
   else   
      offSetTop = 8;

   if (g_bRTLWindow)
   {
      __a[__a.length] = "><GS9SDIVPRINT><DIV  rowid=" + celldata.sDocGUID + " ID=DIV_TDCELL TYPE=" + nType + " ONDRAGEND=onItemEndDrag() ONDRAGSTART=HIC_onDragStart(this) ONDRAG=HIC_onDrag(this) ONBLUR=_HIC_Calendar_RemoveCellFocus() ONFOCUS=_HIC_Calendar_CellFocus()  STYLE='height:100%;width:" + sDataWidth + ";color:navy;font-family:arial;font-size:8pt;padding:0px;overflow:hidden'><TABLE CELLPADDING=0 CELLSPACING=0 style='height:100%;width:100%'><TR><TD style='cursor:move;width:7px;overflow:hidden;background-color:silver'><IMG id='dragimg' style='height:100%;width:7px;filter:Alpha(opacity=0)' src='" + g_sPageBaseUrl + "images/blank.jpg'></TD><TD ONBLUR=_HIC_Calendar_RemoveCellFocus() ONFOCUS=_HIC_Calendar_CellFocus()   style='height:6px;' valign=top>" + sImgUp + sImgDown + "<SPAN style='padding-right:3px;position:relative;top:-" + offSetTop + "'  id=" + celldata.sDocGUID + ">" + celldata.data  + "</SPAN></TD></TR></TABLE></DIV></GS9SDIVPRINT>";                                          
      __a[__a.length] = "</GS9SDIVPRINT><DIV  STYLE='display:none;height:100%;width:" + sDataWidth + ";color:navy;font-family:arial;font-size:8pt;padding:0px;overflow:hidden'><SPAN style='padding-right:3px;' id=" + celldata.sDocGUID + ">"  + celldata.data  + "</SPAN></DIV>";
   }
   else
   {
      __a[__a.length] = "><GS9SDIVPRINT><DIV  rowid=" + celldata.sDocGUID + " ID=DIV_TDCELL TYPE=" + nType + " ONDRAGEND=onItemEndDrag() ONDRAGSTART=HIC_onDragStart(this) ONDRAG=HIC_onDrag(this) ONBLUR=_HIC_Calendar_RemoveCellFocus() ONFOCUS=_HIC_Calendar_CellFocus()  STYLE='height:100%;width:" + sDataWidth + ";color:navy;font-family:arial;font-size:8pt;padding:0px;overflow:hidden'><TABLE CELLPADDING=0 CELLSPACING=0 style='height:100%;width:100%'><TR><TD style='cursor:move;width:7px;overflow:hidden;background-color:silver'><IMG id='dragimg' style='height:100%;width:7px;filter:Alpha(opacity=0)' src='" + g_sPageBaseUrl + "images/blank.jpg'></TD><TD ONBLUR=_HIC_Calendar_RemoveCellFocus() ONFOCUS=_HIC_Calendar_CellFocus()   style='height:6px;' valign=top>" + sImgUp + sImgDown + "<SPAN style='padding-left:3px;position:relative;top:-" + offSetTop + "'  id=" + celldata.sDocGUID + ">" + celldata.data  + "</SPAN></TD></TR></TABLE></DIV></GS9SDIVPRINT>";                                          
      __a[__a.length] = "</GS9SDIVPRINT><DIV  STYLE='display:none;height:100%;width:" + sDataWidth + ";color:navy;font-family:arial;font-size:8pt;padding:0px;overflow:hidden'><SPAN style='padding-left:3px;' id=" + celldata.sDocGUID + ">"  + celldata.data  + "</SPAN></DIV>";
   }
   __a[__a.length] ="</TD>";

   _aHICGlobal["HIC_5DayArrayCell_current"][7*(nRow) + c + 2] = __a.join("");
   
   if (celldata.nRowSpan > 1)
   {
      for (var y1=1; y1 < celldata.nRowSpan; y1++)
         _aHICGlobal["HIC_5DayArrayCell_current"][7*(nRow + y1) + c + 2] = "";
   }
}

function copyArray (a)
{
   var b = new Array ();

   for (var i in a)
      b[i] = a[i];
   
   return b;
}

function onTimeCellMouseOver (obj)
{
   if (g_bNoInsert || g_bNoUpdate || (SCHED_PARAMS.viewMode != 1 && SCHED_PARAMS.duration != 5))
      return;
      
   if (_aHICGlobal["HIC_b5DayTimeSlot_Click"])
      obj.style.cursor = 'hand';   
   else
      obj.style.cursor = 'default';
}

function onTextAreaPaste (sourceObj, eventObj)
{
   var stTemp = window.clipboardData.getData ("Text");

   if ((g_oInput.value.length + stTemp.length - 1) > 149)
   {
      eventObj.returnValue = false;
      eventObj.cancelBubble = true;
      return;
   }
}

function onToggleStretch (id)
{

   if (g_bStretchCell)
   {
      g_bStretchCell = false;            
   }
   else   
   {
      g_bStretchCell = true;
      _aHICGlobal["HIC_bStretchCellElementScrollIntoView"] = "dvData" + id;
   }      
   
   DoPopulate ();
}

function ActivateApplet ()
{  
   return (true);
}

function IsAppletActive ()
{
   return (true);
   // Actually, in ActiveX environment, we do not need to worry about Applet Active
   // because based on the Custom Control Guideline, as long as the control is 
   // clicked, the primary applet is set to active by SWE.
}

function onMonthItemMouseOver (sourceObj)
{   
   var sRowId = sourceObj.ROWID;
   var sToolTip;
   var aTemp;
   var i;
   var oAnchor;      
   oAnchor = sourceObj;
   
   while (!sourceObj.tag)
   {
      sourceObj = sourceObj.parentElement;
   }
   
   sToolTip = g_oPropset.GetProperty (g_aDateCellMap[sourceObj.tag]+ "Header");
   if (sToolTip == null || typeof(sToolTip) == 'undefined')
   {
      return;
   }
   var aTemp = sToolTip.split ("~*|*~");
   for (i=0; i < aTemp.length; i++)
   {
      if (aTemp[i] == sRowId)
         break;
   }
   if ( i+1 < aTemp.length)
   {
      aTemp[i+1] = aTemp[i+1].replace(/\n/g,"");
      oAnchor.title = aTemp[i+1];
   }
}

function reOrderWeekView(id)
{
   switch(id)
   {
      case 0:
      case 5:
      case 6:
      {
         return id;
      }
      case 1:
      {
         return 3;
      }
      case 2:
      {
         return 1;
      }
      case 3:
      {
         return 4;
      }
      case 4:
      {
         return 2;
      }
   }
}
function reOrderWeekDateArray(id)
{
   switch(id)
   {
      case 0:
      case 5:
      case 6:
      {
         return id;
      }
      case 1:
      {
         return 3;
      }
      case 2:
      {
         return 1;
      }
      case 3:
      {
         return 4;
      }
      case 4:
      {
         return 2;
      }
   }
}

function SetSelectedUser (userLogin)
{
   if (!g_bEnableAccessList || (g_oAccessListObject == null))
      return;
      
   if (userLogin == "")
      userLogin = g_sLoginUserLoginName;

   g_oAccessListObject.Value = g_aAccessListLogin2Display[userLogin];
   g_sSelectedUser = userLogin;
         
   CheckUserPermission (userLogin);
}


function SetSelectedTimeZone (timeZone)
{
   if (!g_bEnableTimeZone || (g_oTimeZonePicker == null))
      return;
      
   if (timeZone != null && timeZone != "")
   {
      g_oTimeZonePicker.Value = g_aTimeZoneListName2Display[timeZone]; // 12551879
      g_sSelectedTimeZone = timeZone;
   }
}


function SetSelectedFilter (filter)
{
   if (!g_bEnableFilterPicker || g_oFilterPicker == null)
      return;
      
   if (filter != null && filter != "")
   {
      g_oFilterPicker.Value = filter;
      g_sSelectedFilter = filter;
   }
}


function RenderActivityItem (oRecord)
{
   if (oRecord.GetProperty (g_aFieldName2Index["Private"]) == "Y")
   {
      oRecord.SetProperty("OPTIONS", "100100"); 
      g_aPrivateItems[oRecord.GetProperty(g_aFieldName2Index["Id"])] = "1";
   }
   else
   {
      if (oRecord.GetProperty(g_aFieldName2Index["Repeating"]) == "Y")
         oRecord.SetProperty ("OPTIONS", "100101");
      else
         oRecord.SetProperty ("OPTIONS", "100100");
   }
}


function EditRecord (inputSet)
{
   if (g_nItemType == 1) // Repeating
   {
      OpenRepeatingWindow ();
      
      g_oRepPropSet = inputSet;
   }
   else
   {
      InvokeMethod ("UpdateRecord", inputSet);
   }
}


function OpenRepeatingWindow ()
{
   var sRepeatBody, oRepeatDocument, deltaX, deltaY, body;
   
   if (typeof(g_oRepPopupWindow) == 'undefined' || g_oRepPopupWindow == null || g_oRepPopupWindow.closed == true)
    {
      sRepeatBody = BuildRepeatBody ();
      
      //var newWindow = Object1.GetPopupWindow(window, 'RepeatingWindow', 'toolbar=no,status=no,width=45,height=10,top=10250,left=250');
      //var newDoc = newWindow.document;
      //newDoc.write(sRepeatBody);
      //Object1.ShowPopupWindow(newWindow);     
	
      g_oRepPopupWindow = window.external.GetPopupWindow(window, 'RepeatingWindow', 'toolbar=no,status=no,width=45,height=10,top=10250,left=250');       
      oRepeatDocument =g_oRepPopupWindow.document;
      oRepeatDocument.write(sRepeatBody);
      body = oRepeatDocument.body;
      deltaX  = body.scrollWidth - body.offsetWidth;
      deltaY  = body.scrollHeight - body.offsetHeight;
      g_oRepPopupWindow.resizeBy(deltaX + 120, deltaY);   
      g_oRepPopupWindow.moveBy(0, -10000);
      g_oRepPopupWindow.focus ();      
   }
   else
      g_oRepPopupWindow.focus ();
}

function RepeatButton_Ok ()
{   
   var optPropSet = NewPropertySet ();
   optPropSet.SetProperty ("Repeating", "Y");
   
   if (g_oRepPopupWindow.document.getElementById("radioThisOne").checked == true) 
      optPropSet.SetProperty ("Modify", "ThisOne");
   else 
      optPropSet.SetProperty ("Modify", "AllFuture");
   
   g_oRepPropSet.SetProperty ("Optional", optPropSet.EncodeAsString ());
   InvokeMethod ("UpdateRecord", g_oRepPropSet);

   g_oRepPopupWindow.close ();
}

function RepeatButton_Close ()
{
   g_oRepPopupWindow.close ();
}

function RepeatWindow_Unload ()
{
   var propSet = NewPropertySet ();
   propSet.SetType ("ClosePopup");
   NotifyGeneric (propSet.EncodeAsString ());
   
   if (g_oRepPopupWindow.closed != true)
   {
      g_oRepPropSet = null;
      g_oRepPopupWindow = null;
   }   
}

function RepeatWindow_Focus ()
{
   if (g_oRepPopupWindow != null && g_oRepPopupWindow != 'undefined')
      g_oRepPopupWindow.focus ();
}

function BuildRepeatBody ()
{
   var sDirection = "ltr";
   var imageSrcL = g_sPageBaseUrl + "images/btn_opn_d.gif";
   var imageSrcR = g_sPageBaseUrl + "images/btn_cls_d.gif";
   
   if (g_bRTLWindow)
      sDirection = "rtl";
         
   var sScript = "<SCR" + "IPT>function cancelClick(){return false;}document.oncontextmenu=cancelClick;</SCR" + "IPT>"
   var RepeatDoc = "<html><head>"+sScript+"<title>"+g_sRepPopupStartTitle+"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</title>"+
   "<link href='" + g_sPageBaseUrl + "files/main.css' rel='stylesheet'></head>"+
   "<body topmargin=0 leftmargin=0 marginwidth=0 marginheight=0 bgcolor=#cccccc onBeforeUnload='opener.RepeatWindow_Unload();'>"+
      "<table width=100% cellspacing=0 cellpadding=0 border=0 align=center style='direction:"+sDirection+"'>"+
         "<tr valign=top>"+
            "<td class=AppletStyle1>"+
               "<table class=AppletBack valign=top width=100% cellpadding=0 cellspacing=0 border=0>"+
                  "<tr valign=top>"+
                     "<td>"+
                        "<table width=100% class=AppletBack border=0 cellspacing=2 cellpadding=1 align=center>"+
                           "<tr valign=top>"+
                              "<td class=scLabelRight nowrap>"+g_sRepPopupLabel1+"</td>"+
                              "<td class=scField width=100%>"+
                                 "<table cellpadding=0 cellspacing=0 border=0>"+
                                    "<tr></tr>"+
                                 "</table>"+
                              "</td>"+
                           "</tr>"+
                           "<tr valign=top>"+
                              "<td class=scLabelRight nowrap>"+g_sRepPopupLabel2+"</td>"+
                           "</tr>"+
                        "</table>"+
                        "<table  class=AppletBack border=0 cellpadding=0  cellspacing=0>"+
                           "<tr valign=top>"+
                              "<td>"+
                                 "<table border=0 cellspacing=2 cellpadding=1 align=center>"+
                                    "<tr valign=top>"+
                                       "<td class=scField width=100% nowrap>"+
                                          "<table cellpadding=0 cellspacing=0 border=0>"+
                                             "<tr>"+
                                                "<td class=scField nowrap>"+
                                                   "<input type=radio id=radioThisOne name=radioRepeat style=cursor:hand onfocus=this.blur() checked >&nbsp;<span style='position:relative;top:-2px;'>"+g_sRepPopupLabel3+"</span><br>"+
                                                   "<input type=radio id=radioAllFuture name=radioRepeat style=cursor:hand onfocus=this.blur()>&nbsp;<span style='position:relative;top:-2px;'>"+g_sRepPopupLabel4+"</span><br>"+
                                                "</td>"+
                                                "<td>&nbsp;</td>"+
                                             "</tr>"+
                                          "</table>"+
                                       "</td>"+
                                    "</tr>"+
                                 "</table>"+
                              "</td>"+
                              "<td>"+
                                 "<table border=0 cellspacing=2 cellpadding=1>"+
                                 "</table>"+
                              "</td>"+
                           "</tr>"+
                        "</table>"+
                        "<table class=AppletBack border=0 cellspacing=2 cellpadding=1 align=center></table>"+
                     "</td>"+
                  "</tr>"+
               "</table>"+
            "</td>"+
         "</tr>"+
         "<tr>"+
            "<td>"+
               "<table width=100% cellpadding=2 cellspacing=2 border=0 bgcolor=#cccccc>"+
                  "<tr>"+
                     "<td width=100%><img src=" + g_sPageBaseUrl + "images/spacer.gif valign=top width=10 height=20></td>"+
                     "<td nowrap>"+
                        "<table CLASS=minibutton BORDER=0 CELLPADDING=0 CELLSPACING=0 HEIGHT=10 STYLE=position:relative;left:3>" +
                           "<tr><td CLASS=minibuttonOn><nobr>" +
                              "<A STYLE=cursor:hand;overflow:visible;height:100% ONCLICK='opener.RepeatButton_Ok();'>" +
                                  g_sRepPopupOKLabel + 
                              "</A></nobr></td></tr></table>" +
                     "</td>"+
                     "<td nowrap>"+
                        "<table CLASS=minibutton BORDER=0 CELLPADDING=0 CELLSPACING=0 HEIGHT=10 STYLE=position:relative;left:3>" +
                           "<tr><td CLASS=minibuttonOn><nobr>" +
                              "<A STYLE=cursor:hand;overflow:visible;height:100% ONCLICK='opener.RepeatButton_Close();'>" +
                                  g_sRepPopupCancelLabel + 
                              "</A></nobr></td></tr></table>" +
                     "</td>"+
                     "<td><img src=" + g_sPageBaseUrl + "images/spacer.gif valign=top width=10 height=20></td>"+
                  "</tr>"+
               "</table>"+
            "</td>"+
         "</tr>"+
      "</table>"+
   "</body></html>";
   
return RepeatDoc;
}

//TODO: use urldecode to get the applet name for robustness
//HSAPUTRA: to support drag and drop from SWE
function checkIfFromSWE (text)
{
   if (text == null || text == "" || text == 'undefined')
      return false;

   //Check if applet user property for external drag and drop is enabled
   var sAllowExternalDragNDrop = window.external.GetAppletUserProp ("Enable External Drag And Drop");
   if (sAllowExternalDragNDrop == "N" || sAllowExternalDragNDrop != "Y")
      return false;
   
   // the text data from SWE drag event will be something like this:
   // start.swe? ... SWEApplet0=Calendar+To+Do+List+Applet&SWERowId0=11-CXGNR
   // So we need to parse the data: get the applet name and row id
   var strText = text;
   var numFind = 0;
   var i = 0;
   
   var rowIdArray = new Array ();
   
   //tokenize based on newline
   var lines = strText.split ("\n");
   
   // iterate the token array
   for (var aa = 0; aa < lines.length; aa++)
   {
      if (lines[aa] == null || lines [aa] == "")
         continue;

      //tokenize the text and see if we could find SWEApplet and SWERowId
      var tokenArray = lines[aa].split ("&");

      // iterate the token array
      for (var xx = 0; xx < tokenArray.length; xx++)
      {
         var token = tokenArray [xx];
                  
         //try to find SWEApplet string
         if (token.search (/SWEApplet/) != -1)
         {

            //tokenize based on "="
            var tokenArray2 = token.split ("=");
            //Fix for FR 12-1UG91VX : Removed the previos condition( if g_sSWEAppletName is empty then only assgin the token value).
            // because if case of two applets(eg. Account and Contact) in calendar view from where drag and drop can be done on Calendar,
            // t2 SWEApplet tokens come as the input to this function and the last SWEApplet is valid. 
            // In general scenario where only one Applet ( eg. Account) is there in the Calendar from where drag and drop can be done,
            // only 1 SWEAppletf token comes as the input to this function.
            
            g_sSWEAppletName = tokenArray2[1];
        
            //check if the string is not blank
            if (g_sSWEAppletName == "")
                return false;
                
            //replace + with space
            var arrayTmp = g_sSWEAppletName.split ("+");               
            g_sSWEAppletName = arrayTmp.join (" ");
               
            numFind++;
         }
         // try to look for row id
         else if (token.search (/SWERowId/) != -1)
         {
            //tokenize based on "="
            var tokenArray2 = token.split ("=")
            rowIdArray[i] = tokenArray2[1].substr (0, tokenArray2[1].length-1);
            
            //check if the string is not blank
            if (rowIdArray[i] == null || rowIdArray[i] == "" || rowIdArray[i] == 'undefined')
               return false;
                  
            i++;
            numFind++;
         }
      }
   }
   
   //lets join the array of row ids   
   g_sSWERowIds = rowIdArray.join (",");

   if (numFind > 0)
      return true;
   else
      return false;       
}

function _HIC_Calendar_onSchedMouseDown (obj)
{
   onSchedMouseDown (null, null, null, event, obj);
}

function _HIC_Calendar_onSchedMouseDownEx (obj)
{
   onSchedMouseDownEx (event, obj);
}

function _HIC_Calendar_onSchedMouseMove (obj)
{
   onSchedMouseMove (null, null, event, obj);
}

function _HIC_Calendar_onSchedMouseMoveEx (obj)
{
   onSchedMouseMoveEx (event, obj);
}

function HIC_onDragStart (sourceObj)
{
   onItemDragStart (sourceObj, event);
}

function _HIC_Calendar_onDropItem (obj, data)
{
   onItemDrop (event, obj, data);
}

function _HIC_Calendar_CancelDef ()
{
   cancelDefDrag (event);
}

function HIC_onDrag (sourceObj)
{
   onItemDrag (sourceObj, event);
}

function _HIC_Calendar_OnSlotKeyPress (type)
{
   onSlotKeyPress (event, type);
}

function HIC_Calendar_OnBlur (sourceObj, type)
{
   onInputBlur (sourceObj, event, type);
}


function HIC_onCellMouseMove (sourceObj)
{
   onCellMouseMove (sourceObj, event);
}

function HIC_onCellMouseUp (sourceObj, data)
{
   onCellMouseUp (sourceObj, event, data);
}

function HIC_onBeginStrechMouseDown (sourceObj, data)
{
   onBeginStrechMouseDown (sourceObj, event, data);
}

function HIC_onCellCancelEvent (sourceObj)
{
   onCellCancelEvent (sourceObj, event);
}


function _HIC_Calendar_DragLeave ()
{
   onDragLeave (event);
}


function _HIC_Calendar_CellFocus ()
{
   CellBorderFocus (event);
}

function _HIC_Calendar_RemoveCellFocus ()
{
   RemoveCellBorderFocus (event);
}

function HIC_Calendar_TextAreaKeyPress (sourceObj, type)
{
   onTextAreaKeyPress (sourceObj, event, type);
}


function HIC_onBeginStrechMouseUp (sourceObj, event)
{
   onBeginStrechMouseUp (sourceObj, event);
}


function HIC_DayOnMouseOver (sourceObj)
{
   onDayMouseOver (sourceObj, event);
}

function _HIC_PopupOpen ()
{
   RepeatWindow_Focus ();
}


function HIC_Calendar_TextAreaPaste (sourceObj)
{
   onTextAreaPaste (sourceObj, event);
}


function CheckUserPermission (userLogin)
{
   if (g_aUpdateListLogin == null)
   {
      var sUpdateList = GetUserProp ("Update List");
      if (sUpdateList == "")
         return;
     
      g_aUpdateListLogin = new Array ();
   
      var name;
      var tempPropSet = NewPropertySet ();
      
      tempPropSet.DecodeFromString (sUpdateList);
      
      if ((name = tempPropSet.EnumProperties (true)) != null && name != "")
      {
         do  
         {
            g_aUpdateListLogin[name] = "Y";
         } while ((name = tempPropSet.EnumProperties (false)) != null && name != "");
      }
   }
   
   // User not in update list
   if (g_aUpdateListLogin[userLogin] != "Y")
   {
      g_bNoInsert = true;
      g_bNoUpdate = true;
   }
   else
   {
      g_bNoInsert = g_bCfgNoInsert;
      g_bNoUpdate = g_bCfgNoUpdate;
   }
}

function onNewConCall ()
{
   if (g_bNoInsert)
      return;

   if (!ActivateApplet ())
      return;

   var inputSet = NewPropertySet ();
   
   // Fix FR 12-1R75PC6
   if (_aHICGlobal["HIC_dtStart"] != null)
   {
      inputSet.SetProperty("StartDate", _aHICGlobal["HIC_dtStart"].HICtoDateString("MM/DD/YYYY HH:MM:SS"));
   }

   inputSet.SetProperty("CurrentDateTime", SCHED_PARAMS.selectedDay.HICtoDateString("MM/DD/YYYY HH:MM:SS"));
   InvokeMethod ("NewProfCall", inputSet);
}

function onNewAcctCall ()
{
   if (g_bNoInsert)
      return;

   if (!ActivateApplet ())
      return;
      
   var inputSet = NewPropertySet ();
   
   // Fix FR 12-1R75PC6
   if (_aHICGlobal["HIC_dtStart"] != null)
   {
      inputSet.SetProperty("StartDate", _aHICGlobal["HIC_dtStart"].HICtoDateString("MM/DD/YYYY HH:MM:SS"));
   }   
   
   inputSet.SetProperty("CurrentDateTime", SCHED_PARAMS.selectedDay.HICtoDateString("MM/DD/YYYY HH:MM:SS"));
   InvokeMethod ("NewAcctCall", inputSet);
}

function onNewMeeting ()
{
   if (g_bNoInsert)
      return;

   if (!ActivateApplet ())
      return;

   var inputSet = NewPropertySet ();
   
   // Fix FR 12-1R75PC6
   if (_aHICGlobal["HIC_dtStart"] != null)
   {
      inputSet.SetProperty("StartDate", _aHICGlobal["HIC_dtStart"].HICtoDateString("MM/DD/YYYY HH:MM:SS"));
   }   
   
   inputSet.SetProperty("CurrentDateTime", SCHED_PARAMS.selectedDay.HICtoDateString("MM/DD/YYYY HH:MM:SS"));
   InvokeMethod ("NewMeeting", inputSet);
}

function GetClippingCount ()
{
   var recSize    = -1; // Must be -1
   var nRows      = 0;
   var nHeight    = g_oTargetDocument.body.clientHeight - g_oTargetDocument.getElementById("tbBar").offsetHeight - g_nScrollBarWidth;
   var nDataHeight;
   var nLineHeight= 14;
         
   if (!g_bStretchCell)
   {
      if ((SCHED_PARAMS.viewMode == 1) && (g_nWeeklyMode == 0))
      {    
         nRows = 3;
         nDataHeight = Math.floor(nHeight - nRows - 1/ nRows); // Adjust for cellspacing
      }
      else if (SCHED_PARAMS.viewMode == 2)
      { 
         if (SCHED_PARAMS.duration == 28)
            nRows = 4;
         else if(SCHED_PARAMS.duration == 42)
            nRows = 6;
         else
            nRows = 5;
            
         nDataHeight = Math.floor((nHeight - g_nHeaderLabelHeight - nRows - 1) / nRows);
      }
      
      nDataHeight -= g_nCellHeaderHeight;
      recSize = Math.ceil(nDataHeight/nLineHeight);
      if (recSize < 0)
         recSize = -1;
   }
   
   return recSize;
}

function GetIndexInDateRange (dtDay)
{
   if (SCHED_PARAMS.viewMode != 0 && SCHED_PARAMS.duration >= 5)
   {
      var selectedDay = new Date (dtDay.getFullYear (),
                                  dtDay.getMonth (),
                                  dtDay.getDate ()).valueOf ();
         
      for (var i = 0; i < SCHED_PARAMS.dateRange.length; ++i)
      {
         if (SCHED_PARAMS.dateRange[i].valueOf () == selectedDay)
         {
            return i;  
         }
      }
   }
   
   return -1;
}
// Fix Bug 12613474: dragging boundaries of an Activity in the Siebel Calendar
function DragBoundaryEnd (sourceObj, sSatrtTime, dY)
{
   var sRowId       = sourceObj.idStretch;
   var nRowDuration = Number(sourceObj.rowSpan)+1;
   var nStartTime   = Number(sSatrtTime);
   var inputSet     = NewPropertySet ();
   
   if (dY == 0 ||
       sRowId == "")
   {
      return;
   }
      
   var nNewStartTime = 0;
   var sNewStartTime = "";
   
   var nNewEndTime = 0;
   var sNewEndTime = "";

   var nTimeSlotPixel = 19;
   var nRowD = Math.round(Math.abs(dY/nTimeSlotPixel));

   var nTimeSlotMin = 30;
   if (SCHED_PARAMS.slotTimeInterval > 0)
   {
      nTimeSlotMin = SCHED_PARAMS.slotTimeInterval;
   }
         
   if (sourceObj.id == 'imgUp')
   {
      // Move top boundary   
      // Setup End Time (End Time is not changed)
      nNewEndTime = nStartTime + (nRowDuration*nTimeSlotMin*60*1000);
      sNewEndTime = new Date(nNewEndTime);
      sNewEndTime = sNewEndTime.HICtoDateString("MM/DD/YYYY HH:MM:SS");
      inputSet.SetProperty ("NewEndDate", sNewEndTime);
 
      if (dY < 0)
      {
         // Move Start Time upwards: 9:00AM -> 8:00AM
         nNewStartTime = nStartTime - (nRowD*nTimeSlotMin*60*1000);
         sNewStartTime = new Date(nNewStartTime);
      }
      else if (dY > 0)
      {
         // Move Start Time downwards: 9:00AM -> 10:00AM
         var nRow = nRowDuration - nRowD;
         if (nRow < 1)
         {
            // Minimum duration is 30 min (1 row)
            nRow = 1;
         }
         nRowD = nRowDuration - nRow;
         nNewStartTime = nStartTime + (nRowD*nTimeSlotMin*60*1000);
         sNewStartTime = new Date(nNewStartTime);      
      }
      
      sNewStartTime = sNewStartTime.HICtoDateString("MM/DD/YYYY HH:MM:SS");
      inputSet.SetProperty ("NewStartDate", sNewStartTime);
   }
   else if (sourceObj.id == 'imgDown')
   {
      // Move bottom boundary
      // Setup Start Time (Start Time is not changed)
      sNewStartTime = new Date(nStartTime);
      sNewStartTime = sNewStartTime.HICtoDateString("MM/DD/YYYY HH:MM:SS");
      inputSet.SetProperty ("NewStartDate", sNewStartTime);

      if (dY < 0)
      {
         // Move End Time upwards: 11:00AM -> 10:00AM
         var nRow = nRowDuration - nRowD;
         if (nRow < 1)
         {
            // Minimum duration is 30 min (1 row)
            nRow = 1;
         }       
        
         nNewEndTime = nStartTime + (nRow*nTimeSlotMin*60*1000);
         sNewEndTime = new Date(nNewEndTime);
      }
      else if (dY > 0)
      {
         // Move End Time downwards: 11:00AM -> 12:00PM
         var nOldEndTime = nStartTime + (nRowDuration*nTimeSlotMin*60*1000);
         nNewEndTime = nOldEndTime + (nRowD*nTimeSlotMin*60*1000);      
         sNewEndTime = new Date(nNewEndTime);
      } 
      
      sNewEndTime = sNewEndTime.HICtoDateString("MM/DD/YYYY HH:MM:SS");  
      inputSet.SetProperty ("NewEndDate", sNewEndTime);
   }

   inputSet.SetProperty ("RowId", sRowId);
   
   SaveScroll ();
   EditRecord (inputSet);
}
// End of Fix Bug 12613474

this.window.onresize = Resize;

      </SCRIPT>
   </BODY>
</HTML>
